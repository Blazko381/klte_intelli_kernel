From 2fb76cc7d55985350dbeb970d2f59e591be819ee Mon Sep 17 00:00:00 2001
From: Samuel Pascua <pascua.samuel.14@gmail.com>
Date: Thu, 5 Dec 2019 20:48:50 +0800
Subject: [PATCH] asd

---
 fs/f2fs/segment.S | 13312 ++++++++++++++++++++++++++++++++++++++++++++
 fs/f2fs/segment.c |  3527 ------------
 2 files changed, 13312 insertions(+), 3527 deletions(-)
 create mode 100644 fs/f2fs/segment.S
 delete mode 100644 fs/f2fs/segment.c

diff --git a/fs/f2fs/segment.S b/fs/f2fs/segment.S
new file mode 100644
index 000000000000..82b15d8e33c8
--- /dev/null
+++ b/fs/f2fs/segment.S
@@ -0,0 +1,13312 @@
+__find_rev_next_bit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r2, r1
+	bcs	.L23
+	lsr	r3, r2, #5
+	bic	ip, r2, #31
+	.save {r4, lr}
+	str	r4, [sp, #-8]!
+	sub	ip, r1, ip
+	str	lr, [sp, #4]
+	add	r0, r0, r3, lsl #2
+	and	r2, r2, #31
+	mvn	lr, #0
+	sub	r0, r0, #4
+	b	.L6
+.L3:
+	cmp	ip, #32
+	mov	r2, #0
+	sub	ip, ip, #32
+	bls	.L2
+.L6:
+	ldr	r3, [r0, #4]!
+	cmp	r3, #0
+	beq	.L3
+	rev	r3, r3
+	cmp	ip, #31
+	rsb	r4, ip, #32
+	and	r3, r3, lr, lsr r2
+	andls	r3, r3, lr, lsl r4
+	cmp	r3, #0
+	beq	.L3
+.L5:
+	lsr	r2, r3, #16
+	sub	ip, r1, ip
+	lsl	r2, r2, #16
+	cmp	r2, #0
+	moveq	r1, #24
+	moveq	r2, #16
+	beq	.L7
+	lsr	r3, r3, #16
+	mov	r1, #8
+	mov	r2, #0
+.L7:
+	tst	r3, #65280
+	lsrne	r3, r3, #8
+	movne	r1, r2
+	tst	r3, #240
+	lsrne	r3, r3, #4
+	addeq	r1, r1, #4
+	tst	r3, #12
+	lsrne	r3, r3, #2
+	addeq	r1, r1, #2
+	tst	r3, #2
+	addeq	r1, r1, #1
+	add	r1, r1, ip
+.L2:
+	ldr	r4, [sp]
+	add	sp, sp, #4
+	mov	r0, r1
+	ldr	pc, [sp], #4
+.L23:
+	mov	r0, r1
+	bx	lr
+	.fnend
+	.size	__find_rev_next_bit, .-__find_rev_next_bit
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__find_rev_next_zero_bit, %function
+__find_rev_next_zero_bit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r2, r1
+	bcs	.L53
+	lsr	r3, r2, #5
+	bic	ip, r2, #31
+	.save {r4, lr}
+	str	r4, [sp, #-8]!
+	sub	ip, r1, ip
+	str	lr, [sp, #4]
+	add	r0, r0, r3, lsl #2
+	and	r2, r2, #31
+	mvn	r4, #0
+	sub	r0, r0, #4
+.L33:
+	ldr	r3, [r0, #4]!
+	cmn	r3, #1
+	rev	r3, r3
+	beq	.L29
+	cmp	r2, #0
+	rsb	lr, r2, #32
+	orrne	r3, r3, r4, lsl lr
+	cmp	ip, #31
+	orrls	r3, r3, r4, lsr ip
+	cmn	r3, #1
+	bne	.L32
+.L29:
+	cmp	ip, #32
+	mov	r2, #0
+	sub	ip, ip, #32
+	bhi	.L33
+	ldr	r4, [sp]
+	add	sp, sp, #4
+	mov	r0, r1
+	ldr	pc, [sp], #4
+.L53:
+	mov	r0, r1
+	bx	lr
+.L32:
+	mvn	r3, r3
+	sub	ip, r1, ip
+	lsr	r2, r3, #16
+	lsl	r2, r2, #16
+	cmp	r2, #0
+	moveq	r1, #24
+	moveq	r2, #16
+	beq	.L34
+	lsr	r3, r3, #16
+	mov	r1, #8
+	mov	r2, #0
+.L34:
+	tst	r3, #65280
+	ldr	r4, [sp]
+	add	sp, sp, #4
+	lsrne	r3, r3, #8
+	movne	r1, r2
+	tst	r3, #240
+	lsrne	r3, r3, #4
+	addeq	r1, r1, #4
+	tst	r3, #12
+	lsrne	r3, r3, #2
+	addeq	r1, r1, #2
+	tst	r3, #2
+	addeq	r1, r1, #1
+	add	r1, r1, ip
+	mov	r0, r1
+	ldr	pc, [sp], #4
+	.fnend
+	.size	__find_rev_next_zero_bit, .-__find_rev_next_zero_bit
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	add_discard_addrs, %function
+add_discard_addrs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	lr, [r0, #28]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r3, [r1, #8]
+	ldr	fp, [r0, #696]
+	ldr	r5, [lr]
+	add	r3, r3, r3, lsl #1
+	lsl	r3, r3, #3
+	ldr	ip, [r5, #60]
+	ldrh	r4, [ip, r3]
+	add	r3, ip, r3
+	cmp	fp, r4, lsr #6
+	beq	.L60
+	ldr	ip, [r0]
+	ldr	r6, [ip, #208]
+	ldr	r6, [r6, #88]
+	ldr	r6, [r6, #500]
+	ldr	r6, [r6, #556]
+	tst	r6, #16384
+	beq	.L89
+.L59:
+	ldr	r9, [r1]
+	ldr	ip, [lr, #80]
+	ldr	r5, [r5, #24]
+	ldr	lr, [r3, #4]
+	ands	r9, r9, #16
+	str	ip, [sp, #8]
+	ldr	ip, [r3, #8]
+	ldr	r3, [r3, #12]
+	beq	.L71
+	ldr	r4, [r3]
+	ldr	lr, [ip]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5]
+	ldr	r4, [r3, #4]
+	ldr	lr, [ip, #4]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #4]
+	ldr	r4, [r3, #8]
+	ldr	lr, [ip, #8]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #8]
+	ldr	r4, [r3, #12]
+	ldr	lr, [ip, #12]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #12]
+	ldr	r4, [r3, #16]
+	ldr	lr, [ip, #16]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #16]
+	ldr	r4, [r3, #20]
+	ldr	lr, [ip, #20]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #20]
+	ldr	r4, [r3, #24]
+	ldr	lr, [ip, #24]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #24]
+	ldr	r4, [r3, #28]
+	ldr	lr, [ip, #28]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #28]
+	ldr	r4, [r3, #32]
+	ldr	lr, [ip, #32]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #32]
+	ldr	r4, [r3, #36]
+	ldr	lr, [ip, #36]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #36]
+	ldr	r4, [r3, #40]
+	ldr	lr, [ip, #40]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #40]
+	ldr	r4, [r3, #44]
+	ldr	lr, [ip, #44]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #44]
+	ldr	r4, [r3, #48]
+	ldr	lr, [ip, #48]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #48]
+	ldr	r4, [r3, #52]
+	ldr	lr, [ip, #52]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #52]
+	ldr	r4, [r3, #56]
+	ldr	lr, [ip, #56]
+	orr	lr, lr, r4
+	mvn	lr, lr
+	str	lr, [r5, #56]
+	ldr	r3, [r3, #60]
+	ldr	ip, [ip, #60]
+	orr	r3, r3, ip
+	mvn	r3, r3
+	str	r3, [r5, #60]
+.L61:
+	movw	r3, #:lower16:.LANCHOR0
+	str	r9, [sp]
+	mov	r8, r1
+	str	r2, [sp, #4]
+	mvn	r2, #0
+	movt	r3, #:upper16:.LANCHOR0
+	mov	r10, #0
+	mov	r7, #1
+	mov	r4, r2
+	mov	r9, r0
+	str	r3, [sp, #16]
+	mov	r6, r5
+.L62:
+	ldr	r3, [sp]
+	cmp	r3, #0
+	bne	.L69
+.L91:
+	ldr	r2, [r9, #28]
+	ldr	r2, [r2, #80]
+	add	r2, r2, #4096
+	ldr	r1, [r2, #52]
+	ldr	r2, [r2, #56]
+	cmp	r1, r2
+	bhi	.L60
+	add	r2, r4, #1
+	mov	r1, fp
+	mov	r0, r6
+	bl	__find_rev_next_bit
+	cmp	fp, r0
+	mov	r5, r0
+	bls	.L60
+	add	r2, r5, #1
+	mov	r1, fp
+	mov	r0, r6
+	bl	__find_rev_next_zero_bit
+	mov	r4, r0
+.L63:
+	ldr	r3, [sp, #4]
+	cmp	r3, #0
+	bne	.L74
+	cmp	r10, #0
+	beq	.L90
+.L65:
+	cmp	r5, r4
+	mov	r2, r5
+	bcs	.L67
+	add	ip, r10, #12
+.L68:
+	cmp	r2, #0
+	add	r3, r2, #31
+	movge	r3, r2
+	rsbs	r1, r2, #0
+	asr	r3, r3, #5
+	and	r1, r1, #31
+	and	r0, r2, #31
+	rsbpl	r0, r1, #0
+	ldr	r1, [ip, r3, lsl #2]
+	add	r2, r2, #1
+	cmp	r2, r4
+	orr	r1, r1, r7, lsl r0
+	str	r1, [ip, r3, lsl #2]
+	bne	.L68
+.L67:
+	ldr	r2, [r9, #28]
+	ldr	r3, [sp]
+	ldr	r1, [r2, #80]
+	cmp	r3, #0
+	add	r1, r1, #4096
+	ldr	r2, [r1, #52]
+	add	r2, r4, r2
+	sub	r5, r2, r5
+	str	r5, [r1, #52]
+	beq	.L91
+.L69:
+	add	r2, r4, #1
+	mov	r1, fp
+	mov	r0, r6
+	bl	__find_rev_next_bit
+	cmp	fp, r0
+	mov	r5, r0
+	bls	.L60
+	add	r2, r0, #1
+	mov	r1, fp
+	mov	r0, r6
+	bl	__find_rev_next_zero_bit
+	cmp	r5, #0
+	cmpne	fp, r0
+	mov	r4, r0
+	beq	.L63
+	ldrd	r2, [r8, #24]
+	mov	r1, #0
+	sub	r0, r0, r5
+	cmp	r1, r3
+	cmpeq	r0, r2
+	bcs	.L63
+	b	.L62
+.L89:
+	ldr	ip, [ip, #616]
+	ldr	ip, [ip, #8]
+	ldr	ip, [ip, #2180]	@ unaligned
+	tst	ip, #2
+	bne	.L59
+.L60:
+	mov	r0, #0
+.L85:
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L71:
+	ldr	r3, [r0, #864]
+	tst	r3, #4
+	beq	.L60
+	bic	r4, r4, #63
+	cmp	r4, #0
+	beq	.L60
+	ldr	r3, [sp, #8]
+	add	r3, r3, #4096
+	ldr	r4, [r3, #52]
+	ldr	r3, [r3, #56]
+	cmp	r4, r3
+	bcs	.L60
+	ldr	r4, [lr]
+	ldr	r3, [ip]
+	bic	r3, r3, r4
+	str	r3, [r5]
+	ldr	r4, [lr, #4]
+	ldr	r3, [ip, #4]
+	bic	r3, r3, r4
+	str	r3, [r5, #4]
+	ldr	r4, [lr, #8]
+	ldr	r3, [ip, #8]
+	bic	r3, r3, r4
+	str	r3, [r5, #8]
+	ldr	r4, [lr, #12]
+	ldr	r3, [ip, #12]
+	bic	r3, r3, r4
+	str	r3, [r5, #12]
+	ldr	r4, [lr, #16]
+	ldr	r3, [ip, #16]
+	bic	r3, r3, r4
+	str	r3, [r5, #16]
+	ldr	r4, [lr, #20]
+	ldr	r3, [ip, #20]
+	bic	r3, r3, r4
+	str	r3, [r5, #20]
+	ldr	r4, [lr, #24]
+	ldr	r3, [ip, #24]
+	bic	r3, r3, r4
+	str	r3, [r5, #24]
+	ldr	r4, [lr, #28]
+	ldr	r3, [ip, #28]
+	bic	r3, r3, r4
+	str	r3, [r5, #28]
+	ldr	r4, [lr, #32]
+	ldr	r3, [ip, #32]
+	bic	r3, r3, r4
+	str	r3, [r5, #32]
+	ldr	r4, [lr, #36]
+	ldr	r3, [ip, #36]
+	bic	r3, r3, r4
+	str	r3, [r5, #36]
+	ldr	r4, [lr, #40]
+	ldr	r3, [ip, #40]
+	bic	r3, r3, r4
+	str	r3, [r5, #40]
+	ldr	r4, [lr, #44]
+	ldr	r3, [ip, #44]
+	bic	r3, r3, r4
+	str	r3, [r5, #44]
+	ldr	r4, [lr, #48]
+	ldr	r3, [ip, #48]
+	bic	r3, r3, r4
+	str	r3, [r5, #48]
+	ldr	r4, [lr, #52]
+	ldr	r3, [ip, #52]
+	bic	r3, r3, r4
+	str	r3, [r5, #52]
+	ldr	r4, [lr, #56]
+	ldr	r3, [ip, #56]
+	bic	r3, r3, r4
+	str	r3, [r5, #56]
+	ldr	r3, [ip, #60]
+	ldr	lr, [lr, #60]
+	bic	r3, r3, lr
+	str	r3, [r5, #60]
+	b	.L61
+.L90:
+	ldr	r3, [sp, #16]
+	movw	r1, #32848
+	ldr	r2, [r3]
+	mov	r0, r2
+	str	r2, [sp, #12]
+	bl	kmem_cache_alloc
+	subs	r10, r0, #0
+	ldr	r2, [sp, #12]
+	beq	.L92
+.L66:
+	ldr	ip, [r9, #28]
+	ldr	r3, [sp, #8]
+	ldrd	r0, [r8, #8]
+	ldr	r1, [r9, #692]
+	ldr	lr, [ip, #4]
+	add	r2, r3, #4
+	ldr	ip, [ip, #16]
+	str	r3, [sp, #12]
+	str	r2, [sp, #20]
+	ldr	lr, [lr]
+	adds	r2, r0, lr
+	mov	r3, r2
+	ldr	r2, [sp, #20]
+	add	r0, ip, r3, lsl r1
+	ldr	r3, [sp, #12]
+	str	r0, [r10, #8]
+	ldr	r1, [r3, #8]
+	str	r10, [r3, #8]
+	str	r2, [r10]
+	str	r1, [r10, #4]
+	str	r10, [r1]
+	b	.L65
+.L74:
+	mov	r0, r3
+	b	.L85
+.L92:
+	mov	r0, r2
+	movw	r1, #34896
+	bl	kmem_cache_alloc
+	mov	r10, r0
+	b	.L66
+	.fnend
+	.size	add_discard_addrs, .-add_discard_addrs
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	add_sit_entry, %function
+add_sit_entry:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	r2, #4767
+	strd	r4, [sp, #-16]!
+	.save {r4, r5, r6, lr}
+	mov	r4, r1
+	movt	r2, 10724
+	str	r6, [sp, #8]
+	mov	r5, #55
+	str	lr, [sp, #12]
+	ldr	r3, [r1]
+	umull	r1, r2, r2, r0
+	cmp	r4, r3
+	sub	r0, r0, r2
+	add	r2, r2, r0, lsr #1
+	lsr	r2, r2, #5
+	mul	r5, r5, r2
+	beq	.L94
+	ldr	r2, [r3, #8]
+	cmp	r5, r2
+	bne	.L96
+	b	.L95
+.L101:
+	ldr	r2, [r3, #8]
+	cmp	r2, r5
+	beq	.L95
+.L96:
+	ldr	r3, [r3]
+	cmp	r3, r4
+	bne	.L101
+.L94:
+	movw	r3, #:lower16:.LANCHOR0
+	mov	r1, #80
+	movt	r3, #:upper16:.LANCHOR0
+	ldr	r6, [r3, #4]
+	mov	r0, r6
+	bl	kmem_cache_alloc
+	cmp	r0, #0
+	beq	.L109
+.L102:
+	mov	r3, #1
+	str	r0, [r0]
+	stmib	r0, {r0, r5}
+	str	r3, [r0, #12]
+	ldr	r3, [r4]
+	str	r0, [r3, #4]
+	stm	r0, {r3, r4}
+	str	r0, [r4]
+.L93:
+	ldrd	r4, [sp]
+	ldr	r6, [sp, #8]
+	add	sp, sp, #12
+	ldr	pc, [sp], #4
+.L95:
+	ldr	ip, [r3]
+	ldr	r1, [r3, #12]
+	cmp	r4, ip
+	add	r1, r1, #1
+	str	r1, [r3, #12]
+	beq	.L93
+	cmp	ip, r4
+	beq	.L108
+	ldr	r2, [ip, #12]
+	cmp	r1, r2
+	bls	.L104
+	mov	r2, ip
+	b	.L99
+.L100:
+	ldr	r0, [r2, #12]
+	cmp	r1, r0
+	bls	.L105
+.L99:
+	ldr	r2, [r2]
+	cmp	r4, r2
+	bne	.L100
+.L98:
+	ldr	r1, [r3, #4]
+	str	r1, [ip, #4]
+	str	ip, [r1]
+	ldr	r1, [r2, #4]
+	str	r3, [r2, #4]
+	str	r4, [r3]
+	str	r1, [r3, #4]
+	str	r3, [r1]
+	b	.L93
+.L109:
+	mov	r0, r6
+	mov	r1, #2128
+	bl	kmem_cache_alloc
+	b	.L102
+.L105:
+	mov	r4, r2
+	b	.L98
+.L104:
+	mov	r4, ip
+.L108:
+	mov	r2, r4
+	b	.L98
+	.fnend
+	.size	add_sit_entry, .-add_sit_entry
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__locate_dirty_segment, %function
+__locate_dirty_segment:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	strd	r6, [sp, #8]
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+	ldr	ip, [r0, #28]
+	ldr	r3, [ip, #12]
+	ldr	lr, [r3, #48]
+	cmp	lr, r1
+	beq	.L110
+	ldr	lr, [r3, #112]
+	cmp	lr, r1
+	beq	.L110
+	ldr	lr, [r3, #176]
+	cmp	lr, r1
+	beq	.L110
+	ldr	lr, [r3, #240]
+	cmp	lr, r1
+	beq	.L110
+	ldr	lr, [r3, #304]
+	cmp	lr, r1
+	beq	.L110
+	ldr	r3, [r3, #368]
+	cmp	r3, r1
+	beq	.L110
+	ldr	r6, [ip, #8]
+	mov	r4, r1
+	mov	r8, r0
+	mov	r0, r1
+	mov	r5, r2
+	add	r7, r6, r2, lsl #2
+	ldr	r1, [r7, #4]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L114
+	ldr	r3, [r7, #56]
+	add	r3, r3, #1
+	str	r3, [r7, #56]
+.L114:
+	cmp	r5, #6
+	beq	.L117
+.L110:
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+.L117:
+	ldr	r2, [r8, #28]
+	add	r3, r4, r4, lsl #1
+	ldr	r2, [r2]
+	ldr	r2, [r2, #60]
+	ldrb	r3, [r2, r3, lsl #3]	@ zero_extendqisi2
+	and	r3, r3, #63
+	cmp	r3, #5
+	bhi	.L118
+	add	r6, r6, r3, lsl #2
+	mov	r0, r4
+	ldr	r1, [r6, #4]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L110
+	ldr	r3, [r6, #56]
+	add	r3, r3, #1
+	str	r3, [r6, #56]
+	b	.L110
+.L118:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #677
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	ldrd	r4, [sp]
+	add	r1, r8, #16
+	mov	r0, #2
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	ldr	lr, [sp, #20]
+	add	sp, sp, #24
+	b	_set_bit
+	.fnend
+	.size	__locate_dirty_segment, .-__locate_dirty_segment
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__submit_flush_wait, %function
+__submit_flush_wait:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-28]!
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	strd	r6, [sp, #8]
+	mov	r7, r0
+	mov	r6, r1
+	strd	r8, [sp, #16]
+	mov	r0, #16
+	mov	r1, #0
+	str	lr, [sp, #24]
+	.pad #12
+	sub	sp, sp, #12
+	bl	bio_alloc
+	subs	r4, r0, #0
+	beq	.L134
+.L120:
+	mov	r3, #1
+	mov	r1, r4
+	str	r6, [r4, #12]
+	movw	r0, #2577
+	str	r3, [r4, #20]
+	bl	submit_bio_wait
+	mov	r5, r0
+	mov	r0, r4
+	bl	bio_put
+	movw	r3, #:lower16:__tracepoint_f2fs_issue_flush
+	movt	r3, #:upper16:__tracepoint_f2fs_issue_flush
+	ldr	r2, [r3, #4]
+	cmp	r2, #0
+	bne	.L135
+.L119:
+	mov	r0, r5
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	add	sp, sp, #24
+	ldr	pc, [sp], #4
+.L134:
+	mov	r1, r4
+	mov	r0, #2064
+	bl	bio_alloc
+	mov	r4, r0
+	b	.L120
+.L135:
+	mov	r2, sp
+	ldr	r8, [r7, #864]
+	bic	r2, r2, #8128
+	bic	r2, r2, #63
+	ldr	r1, [r2, #4]
+	add	r1, r1, #1
+	str	r1, [r2, #4]
+	ldr	r4, [r3, #16]
+	cmp	r4, #0
+	beq	.L123
+	and	r9, r8, #1024
+	and	r8, r8, #2048
+.L124:
+	ldr	r0, [r4, #4]
+	mov	r3, r9
+	str	r5, [sp]
+	mov	r2, r8
+	ldr	r7, [r4]
+	mov	r1, r6
+	blx	r7
+	ldr	r3, [r4, #8]!
+	cmp	r3, #0
+	bne	.L124
+.L123:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	beq	.L119
+	bl	preempt_schedule
+	b	.L119
+	.fnend
+	.size	__submit_flush_wait, .-__submit_flush_wait
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_submit_discard_endio, %function
+f2fs_submit_discard_endio:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	.save {r4, lr}
+	str	r4, [sp, #-8]!
+	mov	r2, #2
+	mov	r4, r0
+	str	lr, [sp, #4]
+	ldr	r3, [r0, #60]
+	add	r0, r3, #32
+	strb	r2, [r3, #54]
+	str	r1, [r3, #56]
+	bl	complete
+	ldr	lr, [sp, #4]
+	mov	r0, r4
+	ldr	r4, [sp]
+	add	sp, sp, #8
+	b	bio_put
+	.fnend
+	.size	f2fs_submit_discard_endio, .-f2fs_submit_discard_endio
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	update_sit_entry, %function
+update_sit_entry:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	sub	r3, r1, #1
+	strd	r6, [sp, #8]
+	cmn	r3, #3
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	mov	fp, r2
+	str	lr, [sp, #32]
+	ldr	r0, [r0, #28]
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r6, [r0, #16]
+	sub	r1, r1, r6
+	bhi	.L156
+	ldr	r2, [r0, #4]
+	mov	r10, #1
+	ldr	r3, [r5, #692]
+	ldr	r8, [r2]
+	rsb	r8, r8, r1, lsr r3
+	rsbs	r3, r8, #0
+	and	r2, r8, #31
+	and	r3, r3, #31
+	add	r9, r8, #31
+	rsbpl	r2, r3, #0
+	cmp	r8, #0
+	movge	r9, r8
+	add	r4, r8, r8, lsl r10
+	asr	r9, r9, #5
+	lsl	r10, r10, r2
+	lsl	r9, r9, #2
+	lsl	r3, r4, #3
+.L139:
+	ldr	r0, [r0]
+	ldr	r2, [r5, #696]
+	ldr	r4, [r0, #60]
+	sub	r6, r2, #1
+	and	r6, r6, r1
+	ldrh	r7, [r4, r3]
+	add	r4, r4, r3
+	add	r7, fp, r7, lsr #6
+	lsrs	r3, r7, #16
+	bne	.L140
+	cmp	r2, r7
+	bcc	.L140
+.L141:
+	ldrh	r3, [r4]
+	bfi	r3, r7, #6, #10
+	strh	r3, [r4]	@ movhi
+	ldr	r3, [r5, #28]
+	ldr	r7, [r3]
+	ldr	r2, [r7, #72]
+	ldr	r1, [r7, #76]
+	str	r1, [sp, #8]
+	str	r2, [sp, #12]
+	bl	get_seconds
+	ldr	ip, [r7, #80]
+	mvn	r3, r6
+	ldr	r2, [sp, #12]
+	and	r3, r3, #7
+	ldr	lr, [r7, #84]
+	mov	r7, #1
+	ldr	r1, [sp, #8]
+	lsl	r7, r7, r3
+	subs	r3, r2, ip
+	sxtb	ip, r7
+	str	r3, [sp]
+	sbc	r3, r1, lr
+	str	r3, [sp, #4]
+	ldrd	r2, [sp]
+	adds	r2, r2, r0
+	adc	r3, r3, r0, asr #31
+	mov	r0, r2
+	cmp	fp, #1
+	mov	r1, r3
+	strd	r0, [r4, #16]
+	ldr	r2, [r5, #28]
+	ldr	r2, [r2]
+	strd	r0, [r2, #96]
+	ldr	r1, [r4, #4]
+	bne	.L142
+	ldrb	r2, [r1, r6, lsr #3]	@ zero_extendqisi2
+	tst	r2, r7
+	orr	r2, ip, r2
+	strb	r2, [r1, r6, lsr #3]
+	bne	.L162
+.L143:
+	ldr	r2, [r5]
+	ldr	r1, [r2, #208]
+	ldr	r1, [r1, #88]
+	ldr	r1, [r1, #500]
+	ldr	r1, [r1, #556]
+	tst	r1, #16384
+	beq	.L163
+.L144:
+	ldr	r1, [r4, #12]
+	ldrb	r2, [r1, r6, lsr #3]	@ zero_extendqisi2
+	tst	r2, r7
+	orr	r2, ip, r2
+	strb	r2, [r1, r6, lsr #3]
+	bne	.L145
+	ldr	r2, [r5, #744]
+	sub	r2, r2, #1
+	str	r2, [r5, #744]
+.L145:
+	ldr	r0, [r4, #8]
+	ldrb	r2, [r4]	@ zero_extendqisi2
+	ldrb	r1, [r0, r6, lsr #3]	@ zero_extendqisi2
+	and	r2, r2, #63
+	cmp	r2, #4
+	and	r2, r1, r7
+	beq	.L164
+.L146:
+	cmp	r2, #0
+	bne	.L150
+	ldrh	r3, [r4, #2]
+	ubfx	r2, r3, #0, #10
+	add	r2, fp, r2
+	bfi	r3, r2, #0, #10
+	strh	r3, [r4, #2]	@ movhi
+.L150:
+	ldr	r3, [r5, #28]
+	ldr	r2, [r3]
+	ldr	r1, [r2, #28]
+	ldr	r3, [r1, r9]
+	tst	r3, r10
+	orr	r10, r3, r10
+	str	r10, [r1, r9]
+	bne	.L151
+	ldr	r3, [r2, #32]
+	add	r3, r3, #1
+	str	r3, [r2, #32]
+.L151:
+	ldr	r3, [r5, #28]
+	ldr	r2, [r3]
+	ldr	r3, [r2, #12]
+	add	r3, r3, fp
+	str	r3, [r2, #12]
+	ldr	r3, [r5, #700]
+	cmp	r3, #1
+	bls	.L138
+	ldr	r2, [r5, #28]
+	udiv	r8, r8, r3
+	ldr	r3, [r2]
+	ldr	r3, [r3, #64]
+	ldr	r2, [r3, r8, lsl #2]
+	add	fp, r2, fp
+	str	fp, [r3, r8, lsl #2]
+.L138:
+	add	sp, sp, #20
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L156:
+	mov	r9, #0
+	mvn	r3, #23
+	mov	r10, r9
+	mvn	r8, #0
+	b	.L139
+.L163:
+	ldr	r2, [r2, #616]
+	ldr	r2, [r2, #8]
+	ldr	r2, [r2, #2180]	@ unaligned
+	tst	r2, #2
+	bne	.L144
+	b	.L145
+.L162:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1603
+	str	ip, [sp]
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r5, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	ip, [sp]
+	b	.L143
+.L142:
+	ldrb	r2, [r1, r6, lsr #3]	@ zero_extendqisi2
+	mvn	r3, ip
+	tst	r2, r7
+	and	r2, r2, r3
+	strb	r2, [r1, r6, lsr #3]
+	beq	.L165
+.L148:
+	ldr	r2, [r5]
+	ldr	r1, [r2, #208]
+	ldr	r1, [r1, #88]
+	ldr	r1, [r1, #500]
+	ldr	r1, [r1, #556]
+	tst	r1, #16384
+	beq	.L166
+.L149:
+	ldr	r2, [r4, #12]
+	ldrb	r1, [r2, r6, lsr #3]	@ zero_extendqisi2
+	and	r3, r3, r1
+	tst	r1, r7
+	strb	r3, [r2, r6, lsr #3]
+	beq	.L161
+	ldr	r3, [r5, #744]
+	add	r3, r3, #1
+	str	r3, [r5, #744]
+.L161:
+	ldr	r3, [r4, #8]
+	ldrb	r2, [r3, r6, lsr #3]	@ zero_extendqisi2
+	and	r2, r2, r7
+	b	.L146
+.L164:
+	orr	r3, ip, r1
+	cmp	r2, #0
+	strb	r3, [r0, r6, lsr #3]
+	bne	.L161
+	ldrh	r3, [r4, #2]
+	ldr	r2, [r4, #8]
+	add	r1, r3, #1
+	bfi	r3, r1, #0, #10
+	strh	r3, [r4, #2]	@ movhi
+	ldrb	r2, [r2, r6, lsr #3]	@ zero_extendqisi2
+	and	r2, r2, r7
+	b	.L146
+.L166:
+	ldr	r2, [r2, #616]
+	ldr	r2, [r2, #8]
+	ldr	r2, [r2, #2180]	@ unaligned
+	tst	r2, #2
+	bne	.L149
+	b	.L161
+.L140:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1587
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r5, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L141
+.L165:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1624
+	str	r3, [sp]
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r5, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r3, [sp]
+	b	.L148
+	.fnend
+	.size	update_sit_entry, .-update_sit_entry
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__remove_dirty_segment, %function
+__remove_dirty_segment:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r2
+	strd	r6, [sp, #8]
+	mov	r7, r0
+	mov	r6, r1
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+	ldr	r3, [r0, #28]
+	mov	r0, r1
+	ldr	r8, [r3, #8]
+	add	r5, r8, r2, lsl #2
+	ldr	r1, [r5, #4]
+	bl	_test_and_clear_bit
+	cmp	r0, #0
+	beq	.L168
+	ldr	r3, [r5, #56]
+	sub	r3, r3, #1
+	str	r3, [r5, #56]
+.L168:
+	cmp	r4, #6
+	beq	.L182
+.L167:
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+.L182:
+	ldr	r3, [r7, #28]
+	add	r5, r6, r6, lsl #1
+	mov	r0, r6
+	lsl	r5, r5, #3
+	ldr	r3, [r3]
+	ldr	r3, [r3, #60]
+	ldrb	r4, [r3, r5]	@ zero_extendqisi2
+	and	r4, r4, #63
+	add	r4, r8, r4, lsl #2
+	ldr	r1, [r4, #4]
+	bl	_test_and_clear_bit
+	cmp	r0, #0
+	beq	.L171
+	ldr	r3, [r4, #56]
+	sub	r3, r3, #1
+	str	r3, [r4, #56]
+.L171:
+	ldr	r3, [r7, #28]
+	ldr	r0, [r7, #700]
+	ldr	r2, [r3]
+	cmp	r0, #1
+	bls	.L172
+	udiv	r3, r6, r0
+	ldr	r2, [r2, #64]
+	ldr	r3, [r2, r3, lsl #2]
+.L173:
+	cmp	r3, #0
+	bne	.L167
+	udiv	r0, r6, r0
+	ldr	r1, [r8, #88]
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	ldr	lr, [sp, #20]
+	add	sp, sp, #24
+	b	_clear_bit
+.L172:
+	ldr	r3, [r2, #60]
+	ldrh	r3, [r3, r5]
+	lsr	r3, r3, #6
+	b	.L173
+	.fnend
+	.size	__remove_dirty_segment, .-__remove_dirty_segment
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__insert_discard_tree.constprop.8, %function
+__insert_discard_tree.constprop.8:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, #0
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	mov	r9, r2
+	strd	r10, [sp, #24]
+	mov	r10, r1
+	mov	fp, r3
+	str	lr, [sp, #32]
+	ldr	lr, [r0, #28]
+	.pad #28
+	sub	sp, sp, #28
+	add	ip, sp, #24
+	mov	r3, r2
+	ldr	r7, [sp, #64]
+	str	r5, [ip, #-4]!
+	mov	r2, ip
+	ldr	r1, [lr, #80]
+	add	r1, r1, #4160
+	add	r1, r1, #12
+	bl	__lookup_rb_tree_for_insert
+	ldr	r2, [sp, #20]
+	cmp	r7, r5
+	ldr	r3, [r4, #28]
+	stm	sp, {r0, r2}
+	ldr	r8, [r3, #80]
+	beq	.L187
+.L184:
+	cmp	r7, #512
+	movw	r3, #:lower16:.LANCHOR0
+	movcc	r5, r7
+	movcs	r5, #512
+	movt	r3, #:upper16:.LANCHOR0
+	lsl	r5, r5, #3
+	ldr	r6, [r3, #8]
+	mov	r1, #80
+	add	r3, r5, #4
+	add	r3, r8, r3
+	mov	r0, r6
+	str	r3, [sp, #8]
+	bl	kmem_cache_alloc
+	subs	r4, r0, #0
+	beq	.L188
+.L185:
+	add	r3, r4, #24
+	mov	r6, #0
+	ldr	r2, .L189
+	movw	r1, #:lower16:.LC1
+	add	r0, r4, #36
+	str	r9, [r4, #12]
+	movt	r1, #:upper16:.LC1
+	str	r7, [r4, #16]
+	add	r5, r8, r5
+	str	fp, [r4, #20]
+	str	r3, [r4, #24]
+	str	r3, [r4, #28]
+	str	r6, [r4, #32]
+	str	r10, [r4, #48]
+	strh	r6, [r4, #52]	@ movhi
+	strb	r6, [r4, #54]
+	str	r6, [r4, #56]
+	str	r3, [sp, #12]
+	bl	__init_waitqueue_head
+	ldr	r0, [sp, #8]
+	add	r2, r8, #4160
+	ldr	r1, [r5, #8]
+	add	r2, r2, #8
+	ldr	r3, [sp, #12]
+	str	r3, [r5, #8]
+	strd	r0, [r4, #24]
+	str	r3, [r1]
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r3, [r2]
+	add	r3, r3, #1
+	strex	r1, r3, [r2]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	add	r2, r8, #4096
+	add	r1, r8, #4160
+	ldr	r3, [r2, #60]
+	mov	r0, r4
+	add	r1, r1, #12
+	add	r7, r3, r7
+	ldr	r3, [sp, #4]
+	str	r7, [r2, #60]
+	stm	r4, {r3, r6}
+	ldr	r3, [sp]
+	str	r6, [r4, #8]
+	str	r4, [r3]
+	bl	rb_insert_color
+	mov	r0, r4
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L188:
+	mov	r0, r6
+	mov	r1, #2128
+	bl	kmem_cache_alloc
+	mov	r4, r0
+	b	.L185
+.L187:
+	movw	r0, #:lower16:.LC0
+	mov	r1, #744
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r4, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L184
+.L190:
+	.align	2
+.L189:
+	.word	.LANCHOR0+12
+	.fnend
+	.size	__insert_discard_tree.constprop.8, .-__insert_discard_tree.constprop.8
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__queue_discard_cmd, %function
+__queue_discard_cmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	ip, #:lower16:__tracepoint_f2fs_queue_discard
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r3
+	movt	ip, #:upper16:__tracepoint_f2fs_queue_discard
+	strd	r6, [sp, #8]
+	mov	r6, r2
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	mov	fp, r1
+	mov	r10, r0
+	str	lr, [sp, #32]
+	ldr	r1, [ip, #4]
+	.pad #68
+	sub	sp, sp, #68
+	cmp	r1, #0
+	bne	.L275
+.L193:
+	ldr	r3, [r10, #1076]
+	cmp	r3, #0
+	moveq	r9, r6
+	beq	.L197
+	mov	r1, r6
+	mov	r0, r10
+	bl	f2fs_target_device_index
+	ldr	r3, [r10, #1080]
+	add	r0, r0, r0, lsl #2
+	add	r3, r3, r0, lsl #4
+	ldr	r3, [r3, #72]
+	sub	r3, r6, r3
+	mov	r9, r3
+.L197:
+	ldr	r3, [r10, #28]
+	mov	r4, #0
+	add	r8, r6, r5
+	str	r4, [sp, #48]
+	str	r4, [sp, #52]
+	ldr	r3, [r3, #80]
+	add	r1, r3, #4160
+	add	r2, r3, #4096
+	str	r3, [sp, #16]
+	add	r7, r1, #12
+	add	r3, r2, #32
+	mov	r0, r3
+	str	r7, [sp, #24]
+	str	r3, [sp, #28]
+	str	r4, [sp, #56]
+	str	r4, [sp, #60]
+	bl	mutex_lock
+	add	r0, sp, #60
+	add	r3, sp, #56
+	add	r1, sp, #52
+	mov	r2, #1
+	stm	sp, {r1, r3}
+	add	r3, sp, #48
+	mov	r1, r4
+	str	r0, [sp, #8]
+	mov	r0, r7
+	str	r2, [sp, #12]
+	mov	r2, r6
+	bl	__lookup_rb_tree_ret
+	subs	r3, r0, #0
+	beq	.L198
+	mov	r5, r4
+	mov	r7, r4
+	str	r3, [sp, #48]
+.L199:
+	movw	r2, #:lower16:.LC0
+	movw	r1, #:lower16:.LANCHOR0
+	str	r10, [sp, #20]
+	movw	r0, #:lower16:.LC2
+	movt	r2, #:upper16:.LC0
+	movt	r1, #:upper16:.LANCHOR0
+	movt	r0, #:upper16:.LC2
+	cmp	r3, #0
+	str	r2, [sp, #32]
+	mov	r10, r9
+	str	r1, [sp, #36]
+	str	r0, [sp, #40]
+	beq	.L201
+.L278:
+	ldr	r2, [r3, #12]
+	ldr	r1, [r3, #16]
+	add	r2, r1, r2
+	cmp	r6, r2
+	movcs	r4, r6
+	movcc	r4, r2
+	cmp	r8, r4
+	bls	.L226
+	ldr	r0, [sp, #52]
+	cmp	r0, #0
+	beq	.L203
+	ldr	r5, [r0, #12]
+	cmp	r8, r5
+	bcc	.L203
+	subs	r5, r5, r4
+	sub	r7, r10, r6
+	add	r7, r7, r4
+	beq	.L213
+	ldrb	ip, [r3, #54]	@ zero_extendqisi2
+	cmp	ip, #0
+	beq	.L230
+.L221:
+	ldrb	r9, [r0, #54]	@ zero_extendqisi2
+	cmp	r9, #0
+	bne	.L222
+	ldr	r3, [r0, #48]
+	cmp	fp, r3
+	bne	.L222
+	ldr	r3, [r0, #12]
+	add	r2, r4, r5
+	cmp	r2, r3
+	bne	.L222
+	ldr	r3, [sp, #16]
+	add	r2, r3, #4096
+	mov	lr, r3
+.L231:
+	ldr	r3, [r0, #16]
+	str	r4, [r0, #12]
+	add	r1, r0, #24
+	str	r7, [r0, #20]
+	add	r3, r3, r5
+	str	r3, [r0, #16]
+	ldr	r3, [r2, #60]
+	add	r3, r3, r5
+	str	r3, [r2, #60]
+	ldr	r3, [r0, #16]
+	ldr	ip, [r0, #24]
+	ldr	r2, [r0, #28]
+	cmp	r3, #512
+	movcs	r3, #512
+	cmp	r9, #0
+	lsl	r3, r3, #3
+	str	r2, [ip, #4]
+	str	ip, [r2]
+	add	r2, lr, r3
+	add	r3, r3, #4
+	ldr	ip, [r2, #8]
+	add	r3, lr, r3
+	str	r1, [r2, #8]
+	str	r3, [r0, #24]
+	str	ip, [r0, #28]
+	str	r1, [ip]
+	beq	.L214
+	ldr	r2, [sp, #20]
+	ldr	r3, [r9, #56]
+	ldr	r2, [r2, #28]
+	cmn	r3, #95
+	moveq	r3, #0
+	ldr	r2, [r2, #80]
+	streq	r3, [r9, #56]
+	str	r2, [sp, #44]
+	beq	.L216
+	cmp	r3, #0
+	beq	.L216
+	ldr	r2, [sp, #20]
+	movw	r1, #:lower16:.LC3
+	movt	r1, #:upper16:.LC3
+	ldr	r0, [r2]
+	ldr	r2, [sp, #40]
+	bl	f2fs_msg
+.L216:
+	ldrb	r3, [r9, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	beq	.L276
+.L217:
+	ldr	r1, [sp, #44]
+	mov	lr, #256
+	mov	ip, #512
+	ldrd	r2, [r9, #24]
+	mov	r0, r9
+	add	r1, r1, #4160
+	str	r3, [r2, #4]
+	add	r1, r1, #12
+	str	r2, [r3]
+	str	lr, [r9, #24]
+	str	ip, [r9, #28]
+	bl	rb_erase
+	ldr	ip, [r9, #16]
+	ldr	r1, [sp, #44]
+	ldr	r0, [sp, #36]
+	add	r2, r1, #4096
+	mov	r1, r9
+	ldr	r3, [r2, #60]
+	ldr	r0, [r0, #8]
+	sub	r3, r3, ip
+	str	r3, [r2, #60]
+	bl	kmem_cache_free
+	ldr	r1, [sp, #44]
+	add	r3, r1, #4160
+	add	r3, r3, #8
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L214:
+	ldrd	r0, [sp, #20]
+	bl	__check_rb_tree_consistence
+	cmp	r0, #0
+	bne	.L272
+	movw	r1, #1080
+	b	.L273
+.L203:
+	subs	r5, r8, r4
+	sub	r7, r10, r6
+	add	r7, r7, r4
+	beq	.L205
+	ldrb	ip, [r3, #54]	@ zero_extendqisi2
+	cmp	ip, #0
+	bne	.L209
+.L230:
+	ldr	ip, [r3, #48]
+	cmp	fp, ip
+	beq	.L277
+.L209:
+	cmp	r0, #0
+	bne	.L221
+.L222:
+	ldr	r9, [sp, #20]
+	mov	r3, r7
+	mov	r2, r4
+	mov	r1, fp
+	str	r5, [sp]
+	mov	r0, r9
+	bl	__insert_discard_tree.constprop.8
+	ldr	r1, [sp, #24]
+	mov	r0, r9
+	bl	__check_rb_tree_consistence
+	cmp	r0, #0
+	beq	.L219
+.L272:
+	ldr	r0, [sp, #52]
+.L205:
+	cmp	r0, #0
+	str	r0, [sp, #48]
+	beq	.L226
+.L227:
+	bl	rb_next
+	ldr	r3, [sp, #48]
+	str	r0, [sp, #52]
+	cmp	r3, #0
+	bne	.L278
+.L201:
+	cmp	r5, #0
+	ldr	r0, [sp, #52]
+	bne	.L209
+	cmp	r0, #0
+	str	r0, [sp, #48]
+	bne	.L227
+.L226:
+	ldr	r0, [sp, #28]
+	bl	mutex_unlock
+	mov	r0, #0
+	add	sp, sp, #68
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L277:
+	cmp	r6, r2
+	bhi	.L209
+	ldr	r7, [sp, #16]
+	add	r1, r1, r5
+	add	lr, r3, #24
+	ldr	r0, [sp, #20]
+	str	r1, [r3, #16]
+	ldr	r1, [sp, #24]
+	add	r2, r7, #4096
+	ldr	ip, [r2, #60]
+	str	r2, [sp, #44]
+	add	r5, ip, r5
+	str	r5, [r2, #60]
+	ldr	ip, [r3, #16]
+	ldr	r5, [r3, #24]
+	ldr	r4, [r3, #28]
+	cmp	ip, #512
+	movcs	ip, #512
+	lsl	ip, ip, #3
+	str	r4, [r5, #4]
+	str	r5, [r4]
+	add	r4, r7, ip
+	add	ip, ip, #4
+	ldr	r5, [r4, #8]
+	add	ip, r7, ip
+	str	lr, [r4, #8]
+	str	ip, [r3, #24]
+	str	r5, [r3, #28]
+	str	lr, [r5]
+	bl	__check_rb_tree_consistence
+	cmp	r0, #0
+	ldr	r2, [sp, #44]
+	beq	.L279
+.L210:
+	ldr	r9, [sp, #48]
+	ldr	r0, [sp, #52]
+	add	r4, r9, #12
+	cmp	r0, #0
+	ldm	r4, {r4, r5, r7}
+	beq	.L280
+	ldrb	r3, [r0, #54]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L281
+.L213:
+	str	r0, [sp, #48]
+	b	.L227
+.L198:
+	ldr	r3, [sp, #48]
+	cmp	r3, #0
+	bne	.L233
+	ldr	r2, [sp, #52]
+	cmp	r2, #0
+	beq	.L200
+	ldr	r2, [r2, #12]
+	sub	r2, r2, r6
+	cmp	r5, r2
+	movcs	r5, r2
+.L200:
+	mov	r7, r9
+	mov	r4, r6
+	b	.L199
+.L219:
+	mov	r1, #1088
+.L273:
+	ldr	r0, [sp, #32]
+	bl	warn_slowpath_null
+	ldr	r3, [sp, #20]
+	mov	r0, #2
+	add	r1, r3, #16
+	bl	_set_bit
+	b	.L272
+.L275:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	add	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r4, [ip, #16]
+	cmp	r4, #0
+	beq	.L194
+.L195:
+	mov	r3, r5
+	ldr	r7, [r4]
+	mov	r2, r6
+	ldr	r0, [r4, #4]
+	mov	r1, fp
+	blx	r7
+	ldr	r3, [r4, #8]!
+	cmp	r3, #0
+	bne	.L195
+.L194:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	beq	.L193
+	bl	preempt_schedule
+	b	.L193
+.L276:
+	ldr	r3, [sp, #44]
+	add	r3, r3, #4160
+	add	r3, r3, #4
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	b	.L217
+.L279:
+	movw	r1, #1063
+	ldr	r0, [sp, #32]
+	bl	warn_slowpath_null
+	ldr	r3, [sp, #20]
+	mov	r0, #2
+	add	r1, r3, #16
+	bl	_set_bit
+	ldr	r2, [sp, #44]
+	b	.L210
+.L280:
+	str	r0, [sp, #48]
+	b	.L226
+.L281:
+	ldr	r3, [r0, #48]
+	cmp	fp, r3
+	bne	.L213
+	ldr	r3, [r0, #12]
+	add	r1, r4, r5
+	cmp	r1, r3
+	ldreq	lr, [sp, #16]
+	bne	.L213
+	b	.L231
+.L233:
+	mov	r5, r4
+	mov	r7, r4
+	b	.L199
+	.fnend
+	.size	__queue_discard_cmd, .-__queue_discard_cmd
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_issue_discard, %function
+f2fs_issue_discard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r1
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	add	r9, r1, r2
+	mov	r2, #0
+	strd	r10, [sp, #24]
+	mov	r8, r0
+	str	lr, [sp, #32]
+	.pad #12
+	sub	sp, sp, #12
+	bl	f2fs_target_device
+	cmp	r4, r9
+	bcs	.L283
+	mov	fp, r0
+	mov	r2, r4
+	mov	r3, #0
+	add	r4, r4, #1
+	stm	sp, {r9, fp}
+	mov	r6, #0
+	mov	r7, #0
+	mov	r5, #0
+	mov	r10, r2
+	mov	fp, r3
+	b	.L284
+.L289:
+	cmp	fp, r5
+	cmpeq	r10, r4
+	beq	.L286
+	mov	r2, #0
+	mov	r0, r8
+	bl	f2fs_target_device
+	ldr	r1, [sp, #4]
+	mov	r9, r0
+	cmp	r1, r0
+	beq	.L286
+	mov	r3, r6
+	mov	r2, r10
+	mov	r0, r8
+	bl	__queue_discard_cmd
+	cmp	r0, #0
+	bne	.L282
+	mov	r10, r4
+	mov	fp, r5
+	str	r9, [sp, #4]
+	mov	r6, #0
+	mov	r7, #0
+.L286:
+	adds	r4, r4, #1
+	adc	r5, r5, #0
+.L284:
+	ldr	ip, [r8, #28]
+	cmp	r4, #1
+	sub	r3, r4, #1
+	mov	r1, r4
+	mvnls	r0, #23
+	ldr	r2, [ip, #16]
+	sub	r2, r3, r2
+	bls	.L287
+	ldr	r0, [ip, #4]
+	ldr	r3, [r8, #692]
+	ldr	r0, [r0]
+	rsb	r0, r0, r2, lsr r3
+	add	r0, r0, r0, lsl #1
+	lsl	r0, r0, #3
+.L287:
+	ldr	ip, [ip]
+	ldr	r3, [r8, #696]
+	ldr	ip, [ip, #60]
+	sub	r3, r3, #1
+	and	r3, r3, r2
+	mvn	r2, r3
+	add	r0, ip, r0
+	and	r2, r2, #7
+	ldr	ip, [r0, #12]
+	mov	r0, #1
+	lsl	r2, r0, r2
+	ldrb	r0, [ip, r3, lsr #3]	@ zero_extendqisi2
+	tst	r0, r2
+	orr	r2, r0, r2
+	strb	r2, [ip, r3, lsr #3]
+	bne	.L288
+	ldr	r3, [r8, #744]
+	sub	r3, r3, #1
+	str	r3, [r8, #744]
+.L288:
+	ldr	r3, [sp]
+	adds	r6, r6, #1
+	adc	r7, r7, #0
+	cmp	r3, r1
+	bhi	.L289
+	orrs	r3, r6, r7
+	ldr	fp, [sp, #4]
+	bne	.L298
+.L283:
+	mov	r0, #0
+.L282:
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L298:
+	mov	r3, r6
+	mov	r2, r10
+	mov	r1, fp
+	mov	r0, r8
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	__queue_discard_cmd
+	.fnend
+	.size	f2fs_issue_discard, .-f2fs_issue_discard
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__revoke_inmem_pages.constprop.10, %function
+__revoke_inmem_pages.constprop.10:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r5, [r1]
+	.pad #20
+	sub	sp, sp, #20
+	cmp	r5, r1
+	ldr	r6, [r5]
+	beq	.L322
+	mov	r7, r2
+	movw	r3, #:lower16:__tracepoint_f2fs_commit_inmem_page
+	mov	r2, #57344
+	movt	r3, #:upper16:__tracepoint_f2fs_commit_inmem_page
+	movt	r2, 65535
+	movw	r10, #:lower16:.LANCHOR0
+	mov	r9, r0
+	mov	r8, r1
+	str	r3, [sp, #4]
+	movt	r10, #:upper16:.LANCHOR0
+	mov	fp, #0
+	str	r2, [sp, #8]
+	b	.L311
+.L332:
+	ldr	r3, [sp, #4]
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bne	.L330
+.L303:
+	mov	r1, r4
+	mov	r0, #0
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L307
+.L313:
+	mov	r1, r4
+	mov	r0, #3
+	bl	_clear_bit
+.L308:
+	mov	r1, r4
+	mov	r0, #11
+	str	fp, [r4, #28]
+	bl	_clear_bit
+	cmp	r4, #0
+	beq	.L309
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L331
+.L310:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	bl	put_page
+.L309:
+	ldrd	r2, [r5]
+	mov	lr, #256
+	mov	ip, #512
+	mov	r1, r5
+	ldr	r0, [r10, #12]
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	lr, [r5]
+	str	ip, [r5, #4]
+	bl	kmem_cache_free
+	ldr	r3, [r9, #28]
+	ldr	r3, [r3, #616]
+	add	r2, r3, #772
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r1, [r2]
+	sub	r1, r1, #1
+	strex	r0, r1, [r2]
+	teq	r0, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	cmp	r8, r6
+	mov	r5, r6
+	ldr	r6, [r6]
+	beq	.L322
+.L311:
+	cmp	r7, #0
+	ldr	r4, [r5, #8]
+	bne	.L332
+	mov	r1, r4
+	mov	r0, r7
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	beq	.L308
+	mov	r0, r4
+	bl	__lock_page
+	b	.L308
+.L322:
+	mov	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L331:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L310
+.L307:
+	mov	r0, r4
+	bl	__lock_page
+	b	.L313
+.L330:
+	ldr	r2, [sp, #8]
+	mov	r3, sp
+	and	r2, r3, r2
+	ldr	r3, [r2, #4]
+	add	r3, r3, #1
+	str	r3, [r2, #4]
+	ldr	r3, [sp, #4]
+	ldr	r3, [r3, #16]
+	cmp	r3, #0
+	beq	.L304
+	str	r5, [sp, #12]
+	mov	r5, r3
+.L305:
+	ldr	r3, [r5]
+	mov	r2, #6
+	mov	r1, r4
+	ldr	r0, [r5, #4]
+	blx	r3
+	ldr	r3, [r5, #8]!
+	cmp	r3, #0
+	bne	.L305
+	ldr	r5, [sp, #12]
+.L304:
+	ldr	r2, [sp, #8]
+	mov	r3, sp
+	and	r3, r3, r2
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	beq	.L303
+	bl	preempt_schedule
+	b	.L303
+	.fnend
+	.size	__revoke_inmem_pages.constprop.10, .-__revoke_inmem_pages.constprop.10
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	reset_curseg, %function
+reset_curseg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r0
+	mov	ip, #0
+	strd	r6, [sp, #8]
+	mov	r6, r1
+	mov	r1, #5
+	str	r8, [sp, #16]
+	mov	r8, r2
+	str	lr, [sp, #20]
+	ldr	r3, [r0, #28]
+	mvn	r0, #0
+	ldr	r4, [r3, #12]
+	add	r4, r4, r6, lsl #6
+	ldr	r7, [r4, #20]
+	ldr	r3, [r4, #60]
+	str	r3, [r4, #48]
+	ldr	r2, [r5, #700]
+	udiv	r3, r3, r2
+	ldr	r2, [r5, #704]
+	strh	ip, [r4, #52]	@ movhi
+	str	r0, [r4, #60]
+	add	r0, r7, #4080
+	add	r0, r0, #11
+	udiv	r3, r3, r2
+	str	r3, [r4, #56]
+	bl	__memzero
+	cmp	r6, #2
+	movle	r3, #0
+	movgt	r3, #1
+	cmp	r8, #0
+	strb	r3, [r7, #4091]
+	ldr	r2, [r5, #28]
+	ldr	r3, [r4, #48]
+	ldr	r1, [r2]
+	add	r2, r3, r3, lsl #1
+	lsl	r2, r2, #3
+	ldr	r1, [r1, #60]
+	ldrb	r0, [r1, r2]	@ zero_extendqisi2
+	bfi	r0, r6, #0, #6
+	strb	r0, [r1, r2]
+	beq	.L333
+	ldr	r0, [r5, #28]
+	rsbs	r2, r3, #0
+	and	r1, r3, #31
+	and	r2, r2, #31
+	add	ip, r3, #31
+	rsbpl	r1, r2, #0
+	mov	r2, #1
+	cmp	r3, #0
+	lsl	r2, r2, r1
+	ldr	r0, [r0]
+	movlt	r3, ip
+	asr	r3, r3, #5
+	ldr	r1, [r0, #28]
+	ldr	ip, [r1, r3, lsl #2]
+	tst	r2, ip
+	orr	r2, r2, ip
+	str	r2, [r1, r3, lsl #2]
+	bne	.L333
+	ldr	r3, [r0, #32]
+	add	r3, r3, #1
+	str	r3, [r0, #32]
+.L333:
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+	.fnend
+	.size	reset_curseg, .-reset_curseg
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	issue_flush_thread, %function
+issue_flush_thread:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	strd	r6, [sp, #8]
+	movw	r7, #:lower16:autoremove_wake_function
+	strd	r8, [sp, #16]
+	mov	r8, #57344
+	movt	r7, #:upper16:autoremove_wake_function
+	strd	r10, [sp, #24]
+	movt	r8, 65535
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, [r3, #76]
+	add	r6, r4, #4
+.L339:
+	bl	kthread_should_stop
+	cmp	r0, #0
+	bne	.L363
+.L367:
+	ldr	r3, [r4, #24]
+	cmp	r3, #0
+	beq	.L341
+	add	r2, r4, #24
+	.syntax divided
+@ 38 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	dmb
+@ 0 "" 2
+@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/processor.h" 1
+	pld	[r2]
+@ 0 "" 2
+@ 54 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	@	__xchg4
+1:	ldrex	r3, [r2]
+	strex	r1, r0, [r2]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+@ 100 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	dmb
+@ 0 "" 2
+	.arm
+	.syntax unified
+	cmp	r3, #0
+	str	r3, [r4, #28]
+	bne	.L343
+	b	.L342
+.L353:
+	mov	r3, r2
+.L343:
+	ldr	r2, [r3]
+	str	r0, [r3]
+	mov	r0, r3
+	cmp	r2, #0
+	bne	.L353
+.L342:
+	str	r3, [r4, #28]
+	ldr	r3, [r5]
+	mov	r0, r5
+	ldr	r1, [r3, #208]
+	bl	__submit_flush_wait
+	ldr	r2, [r5, #1076]
+	adds	r3, r0, #0
+	mov	r9, r0
+	movne	r3, #1
+	cmp	r2, #0
+	moveq	r3, #1
+	cmp	r3, #0
+	beq	.L365
+.L344:
+	add	r3, r4, #16
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r2, [r3]
+	add	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	ldr	r0, [r4, #28]
+	cmp	r0, #0
+	sub	r0, r0, #16
+	beq	.L347
+.L348:
+	ldr	r10, [r0, #16]
+	str	r9, [r0, #20]
+	bl	complete
+	cmp	r10, #0
+	sub	r0, r10, #16
+	bne	.L348
+.L347:
+	mov	r3, #0
+	str	r3, [r4, #28]
+.L341:
+	bl	kthread_should_stop
+	cmp	r0, #0
+	bne	.L339
+	ldr	r3, [r4, #24]
+	cmp	r3, #0
+	bne	.L339
+	mov	r2, sp
+	str	r3, [sp, #4]
+	and	r2, r2, r8
+	str	r3, [sp, #8]
+	str	r3, [sp, #12]
+	mov	r9, r2
+	str	r7, [sp, #12]
+	str	r3, [sp, #16]
+	str	r3, [sp, #20]
+	ldr	r2, [r2, #12]
+	add	r3, sp, #16
+	str	r2, [sp, #8]
+	str	r3, [sp, #16]
+	str	r3, [sp, #20]
+	b	.L351
+.L366:
+	bl	schedule
+.L351:
+	mov	r2, #1
+	add	r1, sp, #4
+	mov	r0, r6
+	bl	prepare_to_wait
+	bl	kthread_should_stop
+	cmp	r0, #0
+	bne	.L350
+	ldr	r3, [r4, #24]
+	cmp	r3, #0
+	bne	.L350
+	ldr	r3, [r9, #12]
+	ldr	r3, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #1
+	beq	.L366
+.L350:
+	add	r1, sp, #4
+	mov	r0, r6
+	bl	finish_wait
+	bl	kthread_should_stop
+	cmp	r0, #0
+	beq	.L367
+.L363:
+	mov	r0, #0
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L365:
+	cmp	r2, #1
+	movgt	r10, #80
+	movgt	fp, #1
+	ble	.L346
+.L345:
+	ldr	r3, [r5, #1080]
+	mov	r0, r5
+	add	fp, fp, #1
+	ldr	r1, [r3, r10]
+	add	r10, r10, #80
+	bl	__submit_flush_wait
+	subs	r9, r0, #0
+	bne	.L344
+	ldr	r3, [r5, #1076]
+	cmp	fp, r3
+	blt	.L345
+.L346:
+	mov	r9, #0
+	b	.L344
+	.fnend
+	.size	issue_flush_thread, .-issue_flush_thread
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	new_curseg, %function
+new_curseg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r2
+	strd	r6, [sp, #8]
+	mov	r7, r0
+	strd	r8, [sp, #16]
+	lsl	r8, r1, #6
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r2, [r3, #12]
+	ldr	r3, [r3, #24]
+	add	r2, r2, r8
+	ldr	r6, [r2, #20]
+	stmib	sp, {r1, r2}
+	ldr	r1, [r2, #48]
+	add	r1, r1, r3
+	bl	grab_meta_page
+	mov	r4, r0
+	bl	page_address
+	cmp	r6, #0
+	beq	.L369
+	mov	r1, r6
+	mov	r2, #4096
+	bl	memcpy
+.L370:
+	mov	r0, r4
+	bl	set_page_dirty
+	cmp	r4, #0
+	beq	.L371
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L431
+.L372:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	bl	put_page
+.L371:
+	ldr	r3, [r7, #864]
+	tst	r3, #8
+	movne	r9, #0
+	bne	.L373
+	ldr	r3, [sp, #4]
+	sub	r9, r3, #1
+	cmp	r9, #1
+	movls	r9, #0
+	movhi	r9, #1
+.L373:
+	ldr	r3, [r7, #28]
+	ldr	r4, [r7, #700]
+	cmp	r4, #1
+	beq	.L374
+	ldr	r2, [r3, #12]
+	add	r8, r2, r8
+	ldr	r6, [r8, #48]
+	udiv	r4, r6, r4
+.L375:
+	ldr	r8, [r3, #4]
+	ldr	r3, [r7, #704]
+	ldr	fp, [r7, #708]
+	add	r2, r8, #12
+	udiv	r10, r4, r3
+	mov	r0, r2
+	udiv	r3, fp, r3
+	str	r3, [sp]
+	str	r2, [sp, #12]
+	bl	_raw_spin_lock
+	cmp	r5, #0
+	bne	.L378
+	ldr	r1, [r7, #700]
+	add	r2, r6, #1
+	udiv	r3, r2, r1
+	mls	r3, r1, r3, r2
+	cmp	r3, #0
+	bne	.L432
+.L378:
+	movw	r3, #:lower16:.LC0
+	mov	fp, r4
+	movt	r3, #:upper16:.LC0
+	mov	r6, #0
+	mov	r5, #1
+	str	r3, [sp, #16]
+.L377:
+	mov	r2, r4
+	ldr	r1, [r7, #708]
+	ldr	r0, [r8, #20]
+	bl	_find_next_zero_bit_le
+	ldr	r1, [r7, #708]
+	mov	r2, r0
+	cmp	r0, r1
+	bcc	.L380
+	cmp	r9, #0
+	ldr	r0, [r8, #20]
+	subne	fp, r4, #1
+	beq	.L433
+.L382:
+	cmp	fp, #0
+	add	r2, fp, #31
+	movge	r2, fp
+	and	r6, fp, #31
+	asr	r2, r2, #5
+	ldr	r2, [r0, r2, lsl #2]
+	lsr	r6, r2, r6
+	ands	r6, r6, #1
+	beq	.L404
+.L386:
+	cmp	fp, #0
+	beq	.L385
+	sub	fp, fp, #1
+	cmp	fp, #0
+	add	r3, fp, #31
+	movge	r3, fp
+	and	r2, fp, #31
+	asr	r3, r3, #5
+	ldr	r3, [r0, r3, lsl #2]
+	lsr	r3, r3, r2
+	tst	r3, #1
+	bne	.L386
+	mov	r2, fp
+	mov	lr, #1
+	b	.L383
+.L433:
+	mov	r2, r9
+	bl	_find_next_zero_bit_le
+	ldr	r1, [r7, #708]
+	mov	r2, r0
+	cmp	r0, r1
+	bcc	.L380
+	movw	r1, #1833
+	ldr	r0, [sp, #16]
+	str	r2, [sp, #20]
+	bl	warn_slowpath_null
+	add	r1, r7, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r2, [sp, #20]
+.L380:
+	cmp	r6, #0
+	moveq	lr, r6
+	bne	.L434
+.L383:
+	eor	ip, r5, #1
+	ldr	r0, [r7, #700]
+	ldr	r4, [r7, #704]
+	mul	r5, r2, r0
+	udiv	r1, r2, r4
+	cmp	r4, #1
+	orreq	ip, ip, #1
+	cmp	r10, r1
+	orreq	ip, ip, #1
+	cmp	ip, #0
+	bne	.L379
+	cmp	r9, #1
+	beq	.L435
+	ldr	r2, [r7, #28]
+	ldr	r2, [r2, #12]
+	ldr	ip, [r2, #56]
+	cmp	r1, ip
+	beq	.L392
+.L398:
+	ldr	ip, [r2, #120]
+	cmp	ip, r1
+	beq	.L392
+	ldr	ip, [r2, #184]
+	cmp	r1, ip
+	beq	.L392
+	ldr	ip, [r2, #248]
+	cmp	r1, ip
+	beq	.L392
+	ldr	ip, [r2, #312]
+	cmp	r1, ip
+	beq	.L392
+	ldr	r2, [r2, #376]
+	cmp	r1, r2
+	beq	.L392
+.L379:
+	cmp	r5, #0
+	ldr	r2, [r8, #16]
+	add	r3, r5, #31
+	movge	r3, r5
+	and	r1, r5, #31
+	asr	r3, r3, #5
+	ldr	r2, [r2, r3, lsl #2]
+	lsr	r3, r2, r1
+	tst	r3, #1
+	bne	.L436
+.L395:
+	ldr	r3, [r7, #28]
+	udiv	r4, r5, r0
+	mov	r0, r5
+	ldr	r6, [r3, #4]
+	ldr	r1, [r6, #16]
+	bl	_set_bit
+	ldr	r3, [r6, #4]
+	mov	r0, r4
+	ldr	r1, [r6, #20]
+	sub	r3, r3, #1
+	str	r3, [r6, #4]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L396
+	ldr	r3, [r6, #8]
+	sub	r3, r3, #1
+	str	r3, [r6, #8]
+.L396:
+	ldr	r0, [sp, #12]
+	bl	_raw_spin_unlock
+	ldmib	sp, {r1, r4}
+	mov	r0, r7
+	mov	r2, #1
+	str	r5, [r4, #60]
+	bl	reset_curseg
+	mov	r3, #0
+	strb	r3, [r4, #44]
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L392:
+	cmp	r6, #0
+	bne	.L397
+	ldr	r3, [sp]
+	add	ip, r1, #1
+.L393:
+	cmp	r3, ip
+	movls	r6, #0
+	movls	r4, r6
+	bls	.L394
+	mul	r4, ip, r4
+	mov	r6, #0
+.L394:
+	mov	r5, #0
+	b	.L377
+.L389:
+	cmp	r1, #0
+	movne	lr, #0
+	cmp	lr, #0
+	bne	.L379
+	ldr	r2, [r7, #28]
+	ldr	r2, [r2, #12]
+	ldr	ip, [r2, #56]
+	cmp	r1, ip
+	bne	.L398
+.L397:
+	mul	r4, r1, r4
+	mov	r6, #1
+	sub	r4, r4, #1
+	b	.L394
+.L435:
+	cmp	r6, #0
+	bne	.L389
+	ldr	r3, [sp]
+	add	ip, r1, #1
+	cmp	r3, ip
+	bls	.L379
+	ldr	r2, [r7, #28]
+	ldr	r2, [r2, #12]
+	ldr	lr, [r2, #56]
+	cmp	r1, lr
+	bne	.L398
+	b	.L393
+.L385:
+	mov	r2, #0
+	ldr	r1, [r7, #708]
+	bl	_find_next_zero_bit_le
+	ldr	r3, [r7, #708]
+	mov	r2, r0
+	cmp	r0, r3
+	movcc	fp, r0
+	movcc	lr, #1
+	bcc	.L383
+	movw	r1, #1849
+	ldr	r0, [sp, #16]
+	str	r2, [sp, #20]
+	bl	warn_slowpath_null
+	add	r1, r7, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r2, [sp, #20]
+	mov	lr, #1
+	mov	fp, r2
+	b	.L383
+.L434:
+	ldr	r0, [r8, #20]
+	b	.L382
+.L374:
+	ldr	r1, [sp, #4]
+	cmp	r1, #2
+	movle	r2, #0
+	movgt	r2, #1
+	cmp	r1, #0
+	moveq	r2, #1
+	cmp	r2, #0
+	movne	r4, #0
+	movne	r6, r4
+	bne	.L375
+	ldr	r2, [r3]
+	ldr	r6, [r2, #112]
+	cmp	r6, #0
+	ldreq	r2, [r3, #12]
+	addeq	r8, r2, r8
+	ldreq	r6, [r8, #48]
+	mov	r4, r6
+	b	.L375
+.L369:
+	mov	r1, #4096
+	bl	__memzero
+	b	.L370
+.L404:
+	mov	lr, #1
+	mov	r2, fp
+	mov	r6, lr
+	b	.L383
+.L432:
+	add	r6, r4, #1
+	ldr	r0, [r8, #16]
+	mul	r1, r6, r1
+	bl	_find_next_zero_bit_le
+	mov	r5, r0
+	ldr	r0, [r7, #700]
+	mul	r6, r0, r6
+	cmp	r5, r6
+	bcc	.L379
+	b	.L378
+.L436:
+	movw	r0, #:lower16:.LC0
+	mov	r1, #1888
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	mov	r0, #2
+	add	r1, r7, #16
+	bl	_set_bit
+	ldr	r0, [r7, #700]
+	b	.L395
+.L431:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L372
+	.fnend
+	.size	new_curseg, .-new_curseg
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	change_curseg.constprop.11, %function
+change_curseg.constprop.11:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	mov	r8, r1
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #4
+	sub	sp, sp, #4
+	ldr	r9, [r3, #8]
+	ldr	r5, [r3, #12]
+	ldr	r1, [r3, #24]
+	add	r5, r5, r8, lsl #6
+	ldr	r10, [r5, #20]
+	ldr	r3, [r5, #48]
+	ldr	r6, [r5, #60]
+	add	r1, r1, r3
+	bl	grab_meta_page
+	mov	r7, r0
+	bl	page_address
+	cmp	r10, #0
+	beq	.L438
+	mov	r1, r10
+	mov	r2, #4096
+	bl	memcpy
+.L439:
+	mov	r0, r7
+	bl	set_page_dirty
+	cmp	r7, #0
+	beq	.L440
+	ldr	r3, [r7]
+	tst	r3, #1
+	beq	.L455
+.L441:
+	mov	r0, r7
+	bl	unlock_page
+	mov	r0, r7
+	bl	put_page
+.L440:
+	ldr	r3, [r4, #28]
+	ldr	fp, [r4, #700]
+	ldr	r7, [r3, #4]
+	add	r10, r7, #12
+	mov	r0, r10
+	bl	_raw_spin_lock
+	mov	r0, r6
+	ldr	r1, [r7, #16]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	beq	.L456
+.L443:
+	mov	r0, r10
+	add	r7, r9, #36
+	bl	_raw_spin_unlock
+	mov	r0, r7
+	bl	mutex_lock
+	ldr	r3, [r4, #28]
+	mov	r0, r6
+	ldr	r9, [r3, #8]
+	ldr	r1, [r9, #32]
+	bl	_test_and_clear_bit
+	cmp	r0, #0
+	beq	.L445
+	ldr	r3, [r9, #84]
+	sub	r3, r3, #1
+	str	r3, [r9, #84]
+.L445:
+	mov	r2, #6
+	mov	r1, r6
+	mov	r0, r4
+	bl	__remove_dirty_segment
+	mov	r0, r7
+	bl	mutex_unlock
+	mov	r0, r4
+	mov	r1, r8
+	mov	r2, #1
+	bl	reset_curseg
+	mov	r3, #1
+	ldr	r0, [r5, #48]
+	mov	r2, #0
+	strb	r3, [r5, #44]
+	ldr	r3, [r4, #28]
+	add	r1, r0, r0, lsl #1
+	ldr	r3, [r3]
+	ldr	r0, [r3, #60]
+	ldr	r3, [r3, #24]
+	add	r0, r0, r1, lsl #3
+	ldmib	r0, {r1, ip}
+	mov	r0, r3
+	ldr	r7, [ip]
+	ldr	lr, [r1]
+	orr	lr, lr, r7
+	str	lr, [r3]
+	ldr	r7, [r1, #4]
+	ldr	lr, [ip, #4]
+	orr	lr, lr, r7
+	str	lr, [r3, #4]
+	ldr	r7, [ip, #8]
+	ldr	lr, [r1, #8]
+	orr	lr, lr, r7
+	str	lr, [r3, #8]
+	ldr	r7, [r1, #12]
+	ldr	lr, [ip, #12]
+	orr	lr, lr, r7
+	str	lr, [r3, #12]
+	ldr	r7, [r1, #16]
+	ldr	lr, [ip, #16]
+	orr	lr, lr, r7
+	str	lr, [r3, #16]
+	ldr	r7, [r1, #20]
+	ldr	lr, [ip, #20]
+	orr	lr, lr, r7
+	str	lr, [r3, #20]
+	ldr	r7, [r1, #24]
+	ldr	lr, [ip, #24]
+	orr	lr, lr, r7
+	str	lr, [r3, #24]
+	ldr	r7, [r1, #28]
+	ldr	lr, [ip, #28]
+	orr	lr, lr, r7
+	str	lr, [r3, #28]
+	ldr	lr, [ip, #32]
+	ldr	r7, [r1, #32]
+	orr	lr, lr, r7
+	str	lr, [r3, #32]
+	ldr	r7, [r1, #36]
+	ldr	lr, [ip, #36]
+	orr	lr, lr, r7
+	str	lr, [r3, #36]
+	ldr	r7, [r1, #40]
+	ldr	lr, [ip, #40]
+	orr	lr, lr, r7
+	str	lr, [r3, #40]
+	ldr	r7, [r1, #44]
+	ldr	lr, [ip, #44]
+	orr	lr, lr, r7
+	str	lr, [r3, #44]
+	ldr	r7, [r1, #48]
+	ldr	lr, [ip, #48]
+	orr	lr, lr, r7
+	str	lr, [r3, #48]
+	ldr	r7, [r1, #52]
+	ldr	lr, [ip, #52]
+	orr	lr, lr, r7
+	str	lr, [r3, #52]
+	ldr	r7, [r1, #56]
+	ldr	lr, [ip, #56]
+	orr	lr, lr, r7
+	str	lr, [r3, #56]
+	ldr	ip, [ip, #60]
+	ldr	r1, [r1, #60]
+	orr	r1, ip, r1
+	str	r1, [r3, #60]
+	ldr	r1, [r4, #696]
+	bl	__find_rev_next_zero_bit
+	strh	r0, [r5, #52]	@ movhi
+	ldr	r3, [r4, #28]
+	mov	r0, r4
+	ldr	r1, [r3, #24]
+	add	r1, r6, r1
+	bl	get_meta_page
+	mov	r4, r0
+	bl	page_address
+	mov	r1, r0
+	mov	r2, #3584
+	ldr	r0, [r5, #20]
+	bl	memcpy
+	cmp	r4, #0
+	beq	.L437
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L457
+.L447:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	add	sp, sp, #4
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	put_page
+.L456:
+	ldr	r3, [r7, #4]
+	udiv	r0, r6, fp
+	ldr	r1, [r7, #20]
+	sub	r3, r3, #1
+	str	r3, [r7, #4]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L443
+	ldr	r3, [r7, #8]
+	sub	r3, r3, #1
+	str	r3, [r7, #8]
+	b	.L443
+.L438:
+	mov	r1, #4096
+	bl	__memzero
+	b	.L439
+.L437:
+	add	sp, sp, #4
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L457:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L447
+.L455:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r7, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L441
+	.fnend
+	.size	change_curseg.constprop.11, .-change_curseg.constprop.11
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	allocate_segment_by_default, %function
+allocate_segment_by_default:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	cmp	r2, #0
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	ip, [r0, #28]
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r5, [ip, #12]
+	add	r5, r5, r1, lsl #6
+	bne	.L493
+	ldr	r3, [r0, #368]
+	mov	r6, r1
+	sub	r1, r1, #4
+	clz	r1, r1
+	lsr	r1, r1, #5
+	ldr	r3, [r3, #132]	@ unaligned
+	eor	r3, r3, #64
+	ands	r3, r1, r3, lsr #6
+	bne	.L494
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	ldr	r2, [r0, #700]
+	cmp	r3, #0
+	beq	.L495
+.L462:
+	ldr	r9, [r4, #764]
+	ldr	r3, [r4, #864]
+	ldr	r10, [r4, #756]
+	ldr	r7, [r4, #776]
+	tst	r3, #262144
+	str	r10, [sp, #16]
+	bne	.L463
+	ldr	r10, [sp, #16]
+	mov	fp, #0
+	ldr	r0, [r4, #696]
+	mov	r1, fp
+	ldr	r3, [r4, #692]
+	ldr	r8, [ip, #4]
+	mul	r0, r0, r2
+	rsb	lr, r3, #32
+	strd	r0, [sp, #8]
+	adds	r0, r0, r10
+	adc	r1, fp, r10, asr #31
+	subs	r10, r0, #1
+	lsr	r10, r10, r3
+	sbc	r1, r1, #0
+	subs	r0, r3, #32
+	orr	r10, r10, r1, lsl lr
+	orrpl	r10, r10, r1, asr r0
+	ldrd	r0, [sp, #8]
+	udiv	r10, r10, r2
+	adds	r0, r0, r9
+	adc	r1, r1, r9, asr #31
+	strd	r0, [sp, #16]
+	subs	r0, r0, #1
+	ldr	r1, [sp, #20]
+	lsl	r10, r10, #1
+	sbc	r9, r1, #0
+	lsr	r1, r0, r3
+	subs	r0, r3, #32
+	orr	r1, r1, r9, lsl lr
+	orrpl	r1, r1, r9, asr r0
+	udiv	r9, r1, r2
+	ldrd	r0, [sp, #8]
+	adds	r0, r0, r7
+	adc	r1, r1, r7, asr #31
+	strd	r0, [sp, #8]
+	subs	r0, r0, #1
+	ldr	r1, [sp, #12]
+	add	r10, r10, r9
+	lsr	r0, r0, r3
+	ldr	r9, [ip, #36]
+	sbc	r1, r1, #0
+	subs	r3, r3, #32
+	orr	r0, r0, r1, lsl lr
+	udiv	r9, r9, r2
+	orrpl	r0, r0, r1, asr r3
+	ldr	r3, [r8, #8]
+	udiv	r0, r0, r2
+	add	r2, r10, r0
+	add	r2, r2, r9, lsl #1
+	cmp	r3, r2
+	bls	.L496
+.L463:
+	mov	r1, r6
+	mov	r2, #0
+	mov	r0, r4
+	bl	new_curseg
+.L460:
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	add	r4, r4, r3, lsl #2
+	ldr	r3, [r4, #912]
+	add	r3, r3, #1
+	str	r3, [r4, #912]
+	add	sp, sp, #36
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L495:
+	ldr	r1, [r5, #48]
+	ldr	r0, [ip, #32]
+	add	r3, r1, #1
+	cmp	r3, r0
+	bcs	.L462
+	udiv	r0, r3, r2
+	mls	r0, r2, r0, r3
+	cmp	r0, #0
+	beq	.L462
+	ldr	lr, [ip, #4]
+	cmp	r3, #0
+	and	r0, r3, #31
+	addlt	r3, r1, #32
+	asr	r3, r3, #5
+	ldr	r1, [lr, #16]
+	ldr	r3, [r1, r3, lsl #2]
+	mvn	r3, r3, lsr r0
+	tst	r3, #1
+	bne	.L463
+	b	.L462
+.L493:
+	mov	r2, #1
+	bl	new_curseg
+	b	.L460
+.L496:
+	ldr	lr, [ip, #8]
+	add	r7, sp, #32
+	mvn	r1, #0
+	mov	ip, #1
+	mov	r3, r6
+	mov	r2, #0
+	mov	r0, r4
+	ldr	r9, [lr]
+	str	r1, [r7, #-4]!
+	mov	r1, r7
+	str	ip, [sp]
+	ldr	r8, [r9]
+	blx	r8
+	subs	r8, r0, #0
+	bne	.L476
+	cmp	r6, #2
+	bgt	.L497
+	cmp	r6, #0
+	movgt	r8, #2
+	ble	.L471
+.L470:
+	sub	fp, r8, #3
+	mov	r10, #1
+.L473:
+	cmp	r6, r8
+	mov	r3, r8
+	mov	r2, #0
+	mov	r1, r7
+	mov	r0, r4
+	sub	r8, r8, #1
+	beq	.L472
+	str	r10, [sp]
+	ldr	ip, [r9]
+	blx	ip
+	cmp	r0, #0
+	bne	.L476
+.L472:
+	cmp	fp, r8
+	bne	.L473
+	b	.L463
+.L476:
+	ldr	r3, [sp, #28]
+	mov	r1, r6
+	mov	r0, r4
+	str	r3, [r5, #60]
+	bl	change_curseg.constprop.11
+	b	.L460
+.L494:
+	mov	r1, #4
+	bl	new_curseg
+	b	.L460
+.L497:
+	cmp	r6, #3
+	moveq	r8, r6
+	beq	.L471
+	mov	r8, #5
+	b	.L470
+.L471:
+	add	fp, r8, #3
+	mov	r10, #1
+.L477:
+	cmp	r6, r8
+	mov	r3, r8
+	mov	r2, #0
+	mov	r1, r7
+	mov	r0, r4
+	add	r8, r8, #1
+	beq	.L475
+	str	r10, [sp]
+	ldr	ip, [r9]
+	blx	ip
+	cmp	r0, #0
+	bne	.L476
+.L475:
+	cmp	r8, fp
+	bne	.L477
+	b	.L463
+	.fnend
+	.size	allocate_segment_by_default, .-allocate_segment_by_default
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__submit_discard_cmd, %function
+__submit_discard_cmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldrb	r3, [r1, #54]	@ zero_extendqisi2
+	cmp	r3, #0
+	bxne	lr
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r2, r1
+	movw	r3, #:lower16:__tracepoint_f2fs_issue_discard
+	strd	r6, [sp, #8]
+	movt	r3, #:upper16:__tracepoint_f2fs_issue_discard
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r1, [r0, #28]
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r4, [r2, #16]
+	str	r2, [sp, #16]
+	ldr	r6, [r2, #20]
+	str	r0, [sp, #28]
+	ldr	r1, [r1, #80]
+	str	r1, [sp, #24]
+	ldr	r1, [r2, #48]
+	ldr	r2, [r3, #4]
+	str	r1, [sp, #4]
+	cmp	r2, #0
+	bne	.L552
+.L501:
+	ldr	r3, [sp, #4]
+	lsr	r2, r6, #29
+	lsr	fp, r4, #29
+	lsl	r6, r6, #3
+	lsl	r10, r4, #3
+	str	r2, [sp]
+	ldr	r3, [r3, #88]
+	ldr	ip, [r3, #500]
+	cmp	ip, #0
+	beq	.L553
+	ldr	r3, [ip, #556]
+	tst	r3, #16384
+	beq	.L554
+	add	r3, ip, #776
+	ldrh	r3, [r3]
+	cmp	r3, #0
+	beq	.L507
+	mov	lr, r2
+	lsr	r2, r3, #9
+	orr	lr, lr, fp
+	sub	r2, r2, #1
+	orr	r3, r6, r10
+	asr	r5, r2, #31
+	and	r0, r2, r3
+	and	r1, r5, lr
+	orrs	r3, r0, r1
+	bne	.L508
+.L507:
+	ldr	r1, [sp, #4]
+	ldr	r2, [ip, #768]
+	ldr	r3, [r1, #68]
+	lsr	r2, r2, #9
+	cmp	r2, #1
+	movcc	r2, #1
+	cmp	r3, r1
+	str	r2, [sp, #8]
+	beq	.L509
+	ldr	r3, [r1, #76]
+	mov	r1, r2
+	ldr	r3, [r3, #24]
+.L510:
+	asr	r3, r3, #9
+	orrs	r2, r10, fp
+	mov	r5, #0
+	udiv	r2, r3, r1
+	mls	r3, r1, r2, r3
+	str	r3, [sp, #12]
+	strne	r3, [sp, #20]
+	bne	.L511
+	b	.L512
+.L543:
+	ldr	r1, [sp]
+	subs	r10, r10, r8
+	lsl	r3, r8, #9
+	mov	r2, #129
+	str	r6, [r5]
+	sbc	fp, fp, #0
+	str	r1, [r5, #4]
+.L549:
+	ldr	r1, [sp, #4]
+	str	r1, [r5, #12]
+	str	r2, [r5, #20]
+	str	r3, [r5, #32]
+	bl	_cond_resched
+	orrs	r3, r10, fp
+	beq	.L512
+	mov	r6, r7
+	str	r9, [sp]
+.L511:
+	mov	r3, #0
+	movw	r2, #65535
+	movt	r2, 127
+	cmp	fp, r3
+	cmpeq	r10, r2
+	mov	r3, fp
+	mov	r2, r10
+	bls	.L513
+	movw	r2, #65535
+	mov	r3, #0
+	movt	r2, 127
+.L513:
+	ldr	r1, [sp]
+	adds	r7, r2, r6
+	mov	r8, r2
+	adc	r9, r3, r1
+	cmp	r3, fp
+	cmpeq	r2, r10
+	bcs	.L514
+	mov	r0, r7
+	mov	r1, r9
+	ldr	r4, [sp, #8]
+	.syntax divided
+@ 866 "/home/pascua14/Desktop/s5-kernel/fs/f2fs/segment.c" 1
+	.ifnc r1,r1 ; .err ; .endif
+	.ifnc r2,r2 ; .err ; .endif
+	.ifnc r0,r0 ; .err ; .endif
+	.ifnc r4,r4 ; .err ; .endif
+	bl	__do_div64
+@ 0 "" 2
+	.arm
+	.syntax unified
+	ldr	r3, [sp, #12]
+	cmp	r3, r1
+	beq	.L514
+	ldr	r8, [sp, #20]
+	mov	r3, #0
+	subs	r0, r7, r8
+	sbc	r1, r9, r3
+	.syntax divided
+@ 868 "/home/pascua14/Desktop/s5-kernel/fs/f2fs/segment.c" 1
+	.ifnc r1,r1 ; .err ; .endif
+	.ifnc r2,r2 ; .err ; .endif
+	.ifnc r0,r0 ; .err ; .endif
+	.ifnc r4,r4 ; .err ; .endif
+	bl	__do_div64
+@ 0 "" 2
+	.arm
+	.syntax unified
+	ldr	ip, [sp, #8]
+	umull	r0, r1, ip, r2
+	mla	r1, ip, r3, r1
+	adds	r7, r0, r8
+	sub	r8, r7, r6
+	adc	r9, r1, #0
+.L514:
+	cmp	r5, #0
+	beq	.L520
+	mov	r1, r5
+	mov	r0, #0
+	bl	submit_bio_wait
+	mov	r4, r0
+	mov	r0, r5
+	bl	bio_put
+	cmp	r4, #0
+	bne	.L555
+.L520:
+	mov	r1, #1
+	mov	r0, #16
+	bl	bio_alloc
+	subs	r5, r0, #0
+	bne	.L543
+	mov	r1, #1
+	mov	r0, #2064
+	bl	bio_alloc
+	ldr	r1, [sp]
+	subs	r10, r10, r8
+	mov	r5, r0
+	lsl	r3, r8, #9
+	mov	r2, #129
+	str	r6, [r0]
+	sbc	fp, fp, #0
+	str	r1, [r0, #4]
+	b	.L549
+.L512:
+	ldr	ip, [sp, #16]
+	mov	r2, #0
+	mov	r1, #1
+	ldr	r0, [sp, #24]
+	strb	r1, [ip, #54]
+	add	r3, r0, #4160
+	str	r2, [ip, #56]
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r2, [r3]
+	add	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	add	r3, r3, #4
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r2, [r3]
+	add	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	cmp	r5, #0
+	beq	.L498
+	movw	r3, #:lower16:f2fs_submit_discard_endio
+	mov	r1, r5
+	str	ip, [r5, #60]
+	movt	r3, #:upper16:f2fs_submit_discard_endio
+	mov	r0, #16
+	mov	r4, ip
+	str	r3, [r5, #56]
+	bl	submit_bio
+	ldr	r3, [sp, #24]
+	add	r1, r4, #24
+	mov	lr, r4
+	ldr	ip, [r4, #24]
+	ldr	r2, [r4, #28]
+	add	r0, r3, #4096
+	add	r3, r0, #12
+	str	r2, [ip, #4]
+	str	ip, [r2]
+	ldr	r2, [r0, #16]
+	str	r1, [r0, #16]
+	str	r3, [r4, #24]
+	str	r2, [r4, #28]
+	str	r1, [r2]
+.L498:
+	add	sp, sp, #36
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L552:
+	mov	r2, sp
+	bic	r2, r2, #8128
+	bic	r2, r2, #63
+	ldr	r1, [r2, #4]
+	add	r1, r1, #1
+	str	r1, [r2, #4]
+	ldr	r5, [r3, #16]
+	cmp	r5, #0
+	beq	.L502
+	ldr	r8, [sp, #4]
+.L503:
+	mov	r3, r4
+	ldr	r7, [r5]
+	mov	r2, r6
+	ldr	r0, [r5, #4]
+	mov	r1, r8
+	blx	r7
+	ldr	r3, [r5, #8]!
+	cmp	r3, #0
+	bne	.L503
+.L502:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	bne	.L504
+.L550:
+	ldr	r3, [sp, #16]
+	ldr	r4, [r3, #16]
+	ldr	r6, [r3, #20]
+	ldr	r3, [r3, #48]
+	str	r3, [sp, #4]
+	b	.L501
+.L555:
+	ldr	r3, [sp, #16]
+	cmn	r4, #95
+	str	r4, [r3, #56]
+	ldr	r3, [sp, #28]
+	ldr	r3, [r3, #28]
+	ldr	r5, [r3, #80]
+	beq	.L556
+.L523:
+	ldr	r3, [sp, #28]
+	movw	r2, #:lower16:.LC2
+	movw	r1, #:lower16:.LC3
+	movt	r2, #:upper16:.LC2
+	movt	r1, #:upper16:.LC3
+	ldr	r0, [r3]
+	mov	r3, r4
+	bl	f2fs_msg
+	ldr	r3, [sp, #16]
+.L528:
+	ldrb	r3, [r3, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L522
+	add	r3, r5, #4160
+	add	r3, r3, #4
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L522:
+	ldr	r4, [sp, #16]
+	mov	lr, #256
+	mov	ip, #512
+	add	r1, r5, #4160
+	add	r1, r1, #12
+	ldrd	r2, [r4, #24]
+	mov	r0, r4
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	lr, [r4, #24]
+	str	ip, [r4, #28]
+	bl	rb_erase
+	add	ip, r5, #4096
+	ldr	lr, [r4, #16]
+	movw	r2, #:lower16:.LANCHOR0
+	ldr	r3, [ip, #60]
+	movt	r2, #:upper16:.LANCHOR0
+	mov	r1, r4
+	ldr	r0, [r2, #8]
+	sub	r3, r3, lr
+	str	r3, [ip, #60]
+	bl	kmem_cache_free
+	add	r3, r5, #4160
+	add	r3, r3, #8
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	b	.L498
+.L509:
+	mov	r1, r2
+	ldr	r3, [ip, #772]
+	b	.L510
+.L556:
+	ldr	r2, [sp, #16]
+.L506:
+	mov	r3, #0
+	str	r3, [r2, #56]
+	mov	r3, r2
+	b	.L528
+.L504:
+	bl	preempt_schedule
+	b	.L550
+.L553:
+	mvn	r3, #5
+.L551:
+	ldr	r2, [sp, #16]
+	mov	r4, r3
+	str	r3, [r2, #56]
+	ldr	r3, [sp, #28]
+	ldr	r3, [r3, #28]
+	ldr	r5, [r3, #80]
+	b	.L523
+.L554:
+	ldr	r2, [sp, #16]
+	mvn	r3, #94
+	str	r3, [r2, #56]
+	ldr	r3, [sp, #28]
+	ldr	r3, [r3, #28]
+	ldr	r5, [r3, #80]
+	b	.L506
+.L508:
+	mvn	r3, #21
+	b	.L551
+	.fnend
+	.size	__submit_discard_cmd, .-__submit_discard_cmd
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	issue_discard_thread, %function
+issue_discard_thread:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movw	r2, #:lower16:.LC0
+	movw	r1, #:lower16:jiffies
+	strd	r6, [sp, #8]
+	mov	r6, r0
+	movw	r0, #:lower16:.LANCHOR0
+	strd	r8, [sp, #16]
+	movt	r2, #:upper16:.LC0
+	movt	r1, #:upper16:jiffies
+	strd	r10, [sp, #24]
+	movt	r0, #:upper16:.LANCHOR0
+	str	lr, [sp, #32]
+	ldr	r3, [r6, #28]
+	.pad #60
+	sub	sp, sp, #60
+	str	r2, [sp, #4]
+	str	r1, [sp, #8]
+	ldr	r3, [r3, #80]
+	str	r0, [sp, #12]
+	str	r3, [sp, #16]
+	add	r3, r3, #4096
+	add	r3, r3, #20
+	str	r3, [sp, #20]
+.L558:
+	bl	kthread_should_stop
+	subs	r5, r0, #0
+	bne	.L586
+.L591:
+	ldr	r3, [r6, #28]
+	ldr	r7, [r3, #80]
+	add	r8, r7, #4096
+	add	r7, r7, #4
+	mov	r10, r8
+	add	r8, r8, #32
+	mov	r0, r8
+	add	r10, r10, #4
+	bl	mutex_lock
+	add	r0, sp, #32
+	bl	blk_start_plug
+	ldr	fp, [sp, #8]
+.L567:
+	ldr	r9, [r10]
+	ldr	r3, [r9]
+	cmp	r10, r9
+	sub	r9, r9, #24
+	sub	r4, r3, #24
+	bne	.L566
+	b	.L560
+.L562:
+	add	r5, r5, #1
+	mov	r9, r4
+	sub	r3, r5, #1
+	cmp	r3, #8
+	bgt	.L565
+	ldr	r3, [r4, #24]!
+	cmp	r10, r4
+	sub	r4, r3, #24
+	beq	.L560
+.L566:
+	ldrb	r3, [r9, #54]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L589
+.L561:
+	ldr	r3, [r6]
+	ldr	r3, [r3, #208]
+	ldr	r3, [r3, #88]
+	ldr	r3, [r3, #500]
+	ldr	r2, [r3, #20]
+	cmp	r2, #0
+	bne	.L562
+	ldr	r3, [r3, #16]
+	cmp	r3, #0
+	bne	.L562
+	ldr	r2, [r6, #476]
+	add	r0, sp, #24
+	strd	r2, [sp, #24]
+	bl	timespec_to_jiffies
+	ldr	r3, [r6, #468]
+	ldr	r2, [fp]
+	sub	r3, r3, r2
+	cmn	r3, r0
+	bpl	.L562
+	mov	r1, r9
+	mov	r0, r6
+	bl	__submit_discard_cmd
+	b	.L562
+.L589:
+	movw	r1, #1131
+	ldr	r0, [sp, #4]
+	bl	warn_slowpath_null
+	add	r1, r6, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L561
+.L560:
+	sub	r10, r10, #8
+	cmp	r7, r10
+	bne	.L567
+.L565:
+	add	r0, sp, #32
+	bl	blk_finish_plug
+	mov	r0, r8
+	bl	mutex_unlock
+	ldr	r3, [r6, #28]
+	ldr	r4, [r3, #80]
+	add	r9, r4, #4096
+	add	r4, r4, #4096
+	mov	r8, r9
+	add	r9, r9, #32
+	mov	r0, r9
+	add	r8, r8, #12
+	bl	mutex_lock
+	ldr	r5, [r4, #12]
+	ldr	r4, [r5]
+	cmp	r8, r5
+	sub	r5, r5, #24
+	sub	r4, r4, #24
+	beq	.L568
+	movw	r10, #:lower16:.LC3
+	movw	fp, #:lower16:.LC2
+	movt	r10, #:upper16:.LC3
+	movt	fp, #:upper16:.LC2
+	str	r10, [sp]
+	b	.L573
+.L569:
+	mov	r5, r4
+	ldr	r3, [r4, #24]!
+	cmp	r8, r4
+	sub	r4, r3, #24
+	beq	.L568
+.L573:
+	ldrb	r3, [r5, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L569
+	ldrh	r10, [r5, #52]
+	add	r0, r5, #32
+	cmp	r10, #0
+	bne	.L569
+	bl	wait_for_completion_io
+	ldr	r3, [r5, #56]
+	ldr	r1, [r6, #28]
+	cmn	r3, #95
+	ldr	r7, [r1, #80]
+	streq	r10, [r5, #56]
+	beq	.L571
+	cmp	r3, #0
+	mov	r2, fp
+	ldr	r1, [sp]
+	beq	.L571
+	ldr	r0, [r6]
+	bl	f2fs_msg
+.L571:
+	ldrb	r3, [r5, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L572
+	add	r3, r7, #4160
+	add	r3, r3, #4
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L572:
+	ldrd	r2, [r5, #24]
+	mov	lr, #256
+	mov	ip, #512
+	add	r1, r7, #4160
+	mov	r0, r5
+	add	r1, r1, #12
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	lr, [r5, #24]
+	str	ip, [r5, #28]
+	bl	rb_erase
+	add	r2, r7, #4096
+	ldr	ip, [r5, #16]
+	mov	r1, r5
+	ldr	r3, [r2, #60]
+	ldr	r0, [sp, #12]
+	sub	r3, r3, ip
+	ldr	r0, [r0, #8]
+	str	r3, [r2, #60]
+	bl	kmem_cache_free
+	add	r3, r7, #4160
+	add	r3, r3, #8
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	b	.L569
+.L568:
+	mov	r0, r9
+	bl	mutex_unlock
+	mov	r1, #2
+	mov	r0, #1
+	bl	congestion_wait
+	bl	kthread_should_stop
+	cmp	r0, #0
+	bne	.L558
+	ldr	r3, [sp, #16]
+	add	r4, r3, #4096
+	ldr	r3, [r4, #72]
+	cmp	r3, #0
+	bne	.L558
+	mov	r2, sp
+	str	r3, [sp, #32]
+	add	r1, sp, #44
+	bic	r5, r2, #8128
+	str	r3, [sp, #36]
+	movw	r2, #:lower16:autoremove_wake_function
+	bic	r5, r5, #63
+	movt	r2, #:upper16:autoremove_wake_function
+	ldr	r7, [sp, #20]
+	ldr	r0, [r5, #12]
+	str	r1, [sp, #44]
+	str	r1, [sp, #48]
+	str	r0, [sp, #36]
+	str	r2, [sp, #40]
+	b	.L576
+.L590:
+	bl	schedule
+.L576:
+	mov	r2, #1
+	add	r1, sp, #32
+	mov	r0, r7
+	bl	prepare_to_wait
+	bl	kthread_should_stop
+	cmp	r0, #0
+	bne	.L575
+	ldr	r3, [r4, #72]
+	cmp	r3, #0
+	bne	.L575
+	ldr	r3, [r5, #12]
+	ldr	r3, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #1
+	beq	.L590
+.L575:
+	add	r1, sp, #32
+	ldr	r0, [sp, #20]
+	bl	finish_wait
+	bl	kthread_should_stop
+	subs	r5, r0, #0
+	beq	.L591
+.L586:
+	mov	r0, #0
+	add	sp, sp, #60
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+	.fnend
+	.size	issue_discard_thread, .-issue_discard_thread
+	.align	2
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	locate_dirty_segment, %function
+locate_dirty_segment:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmn	r1, #1
+	bxeq	lr
+	ldr	r2, [r0, #28]
+	ldr	r3, [r2, #12]
+	ldr	ip, [r3, #48]
+	cmp	ip, r1
+	bxeq	lr
+	ldr	ip, [r3, #112]
+	cmp	ip, r1
+	bxeq	lr
+	ldr	ip, [r3, #176]
+	cmp	ip, r1
+	bxeq	lr
+	ldr	ip, [r3, #240]
+	cmp	ip, r1
+	bxeq	lr
+	ldr	ip, [r3, #304]
+	cmp	ip, r1
+	bxeq	lr
+	ldr	r3, [r3, #368]
+	cmp	r3, r1
+	bxeq	lr
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r0
+	mov	r4, r1
+	strd	r6, [sp, #8]
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+	ldr	r6, [r2, #8]
+	add	r6, r6, #36
+	mov	r0, r6
+	bl	mutex_lock
+	ldr	r2, [r5, #28]
+	add	r3, r4, r4, lsl #1
+	lsl	r3, r3, #3
+	ldr	r1, [r2]
+	ldr	r1, [r1, #60]
+	ldrh	r3, [r1, r3]
+	lsrs	r3, r3, #6
+	beq	.L605
+	ldr	r2, [r5, #696]
+	cmp	r2, r3
+	bls	.L596
+	mov	r1, r4
+	mov	r0, r5
+	mov	r2, #6
+	bl	__locate_dirty_segment
+.L598:
+	mov	r0, r6
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	ldr	lr, [sp, #20]
+	add	sp, sp, #24
+	b	mutex_unlock
+.L605:
+	ldr	r3, [r2, #12]
+	ldr	r1, [r3, #48]
+	cmp	r4, r1
+	beq	.L596
+	ldr	r1, [r3, #112]
+	cmp	r4, r1
+	beq	.L596
+	ldr	r1, [r3, #176]
+	cmp	r4, r1
+	beq	.L596
+	ldr	r1, [r3, #240]
+	cmp	r4, r1
+	beq	.L596
+	ldr	r1, [r3, #304]
+	cmp	r4, r1
+	beq	.L596
+	ldr	r3, [r3, #368]
+	cmp	r4, r3
+	beq	.L596
+	ldr	r7, [r2, #8]
+	mov	r0, r4
+	ldr	r1, [r7, #32]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L596
+	ldr	r3, [r7, #84]
+	add	r3, r3, #1
+	str	r3, [r7, #84]
+.L596:
+	mov	r1, r4
+	mov	r0, r5
+	mov	r2, #6
+	bl	__remove_dirty_segment
+	b	.L598
+	.fnend
+	.size	locate_dirty_segment, .-locate_dirty_segment
+	.section	.init.text,"ax",%progbits
+	.align	2
+	.global	create_segment_manager_caches
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	create_segment_manager_caches, %function
+create_segment_manager_caches:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r4, #0
+	.pad #12
+	sub	sp, sp, #12
+	movw	r0, #:lower16:.LC5
+	mov	r3, #131072
+	mov	r2, r4
+	movt	r0, #:upper16:.LC5
+	mov	r1, #76
+	str	r4, [sp]
+	bl	kmem_cache_create
+	movw	r3, #:lower16:.LANCHOR0
+	cmp	r0, r4
+	movt	r3, #:upper16:.LANCHOR0
+	str	r0, [r3]
+	mvneq	r0, #11
+	beq	.L606
+	movw	r0, #:lower16:.LC6
+	mov	r5, r3
+	str	r4, [sp]
+	mov	r3, #131072
+	movt	r0, #:upper16:.LC6
+	mov	r2, r4
+	mov	r1, #60
+	bl	kmem_cache_create
+	cmp	r0, r4
+	str	r0, [r5, #8]
+	beq	.L608
+	movw	r0, #:lower16:.LC7
+	mov	r3, #131072
+	str	r4, [sp]
+	movt	r0, #:upper16:.LC7
+	mov	r2, r4
+	mov	r1, #16
+	bl	kmem_cache_create
+	cmp	r0, r4
+	str	r0, [r5, #4]
+	beq	.L609
+	movw	r0, #:lower16:.LC8
+	mov	r3, #131072
+	str	r4, [sp]
+	movt	r0, #:upper16:.LC8
+	mov	r2, r4
+	mov	r1, #16
+	bl	kmem_cache_create
+	cmp	r0, r4
+	str	r0, [r5, #12]
+	movne	r0, r4
+	bne	.L606
+.L610:
+	ldr	r0, [r5, #4]
+	bl	kmem_cache_destroy
+.L609:
+	ldr	r0, [r5, #8]
+	bl	kmem_cache_destroy
+.L608:
+	ldr	r0, [r5]
+	bl	kmem_cache_destroy
+	mvn	r0, #11
+.L606:
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, pc}
+	.fnend
+	.size	create_segment_manager_caches, .-create_segment_manager_caches
+	.text
+	.align	2
+	.global	llist_reverse_order
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	llist_reverse_order, %function
+llist_reverse_order:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r0, #0
+	movne	r2, #0
+	bne	.L622
+	b	.L621
+.L623:
+	mov	r0, r3
+.L622:
+	ldr	r3, [r0]
+	str	r2, [r0]
+	mov	r2, r0
+	cmp	r3, #0
+	bne	.L623
+.L621:
+	bx	lr
+	.fnend
+	.size	llist_reverse_order, .-llist_reverse_order
+	.align	2
+	.global	register_inmem_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	register_inmem_page, %function
+register_inmem_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mvn	r3, #0
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r1
+	strd	r6, [sp, #8]
+	mov	r6, r0
+	mov	r0, #11
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+	str	r3, [r1, #28]
+	bl	_set_bit
+	movw	r3, #:lower16:.LANCHOR0
+	mov	r1, #80
+	movt	r3, #:upper16:.LANCHOR0
+	ldr	r7, [r3, #12]
+	mov	r0, r7
+	bl	kmem_cache_alloc
+	subs	r4, r0, #0
+	beq	.L648
+.L628:
+	add	r7, r6, #432
+	str	r4, [r4]
+	mov	r0, r7
+	strd	r4, [r4, #4]
+	bl	mutex_lock
+	ldr	r3, [r5]
+	tst	r3, #32768
+	bne	.L629
+.L631:
+	mov	r3, r5
+	ldr	r2, [r3, #16]!
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r2, [r3]
+	add	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L630:
+	ldr	r3, [r6, #428]
+	add	r2, r6, #424
+	str	r4, [r6, #428]
+	strd	r2, [r4]
+	str	r4, [r3]
+	ldr	r3, [r6, #28]
+	ldr	r3, [r3, #616]
+	add	r2, r3, #772
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r1, [r2]
+	add	r1, r1, #1
+	strex	r0, r1, [r2]
+	teq	r0, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	mov	r0, r7
+	bl	mutex_unlock
+	movw	r3, #:lower16:__tracepoint_f2fs_register_inmem_page
+	movt	r3, #:upper16:__tracepoint_f2fs_register_inmem_page
+	ldr	r2, [r3, #4]
+	cmp	r2, #0
+	bne	.L649
+.L627:
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+.L648:
+	mov	r0, r7
+	mov	r1, #2128
+	bl	kmem_cache_alloc
+	mov	r4, r0
+	b	.L628
+.L629:
+	mov	r0, r5
+	bl	__get_page_tail
+	cmp	r0, #0
+	bne	.L630
+	b	.L631
+.L649:
+	mov	r2, sp
+	bic	r2, r2, #8128
+	bic	r2, r2, #63
+	ldr	r1, [r2, #4]
+	add	r1, r1, #1
+	str	r1, [r2, #4]
+	ldr	r4, [r3, #16]
+	cmp	r4, #0
+	beq	.L634
+.L635:
+	ldr	r3, [r4]
+	mov	r2, #5
+	mov	r1, r5
+	ldr	r0, [r4, #4]
+	blx	r3
+	ldr	r3, [r4, #8]!
+	cmp	r3, #0
+	bne	.L635
+.L634:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	beq	.L627
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	ldr	lr, [sp, #20]
+	add	sp, sp, #24
+	b	preempt_schedule
+	.fnend
+	.size	register_inmem_page, .-register_inmem_page
+	.align	2
+	.global	drop_inmem_pages
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	drop_inmem_pages, %function
+drop_inmem_pages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-16]!
+	.save {r4, r5, r6, lr}
+	add	r5, r0, #432
+	mov	r4, r0
+	mov	r0, r5
+	str	r6, [sp, #8]
+	str	lr, [sp, #12]
+	bl	mutex_lock
+	add	r1, r4, #424
+	mov	r2, #1
+	mov	r0, r4
+	bl	__revoke_inmem_pages.constprop.10
+	mov	r0, r5
+	bl	mutex_unlock
+	ldr	r3, [r4, #356]
+	tst	r3, #32768
+	beq	.L651
+	add	r1, r4, #356
+	mov	r0, #15
+	bl	_clear_bit
+.L651:
+	ldr	r3, [r4, #28]
+	ldr	r3, [r3, #616]
+	add	r2, r3, #980
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r1, [r2]
+	sub	r1, r1, #1
+	strex	r0, r1, [r2]
+	teq	r0, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	ldrd	r4, [sp]
+	ldr	r6, [sp, #8]
+	add	sp, sp, #12
+	ldr	pc, [sp], #4
+	.fnend
+	.size	drop_inmem_pages, .-drop_inmem_pages
+	.align	2
+	.global	drop_inmem_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	drop_inmem_page, %function
+drop_inmem_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r1
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	add	r6, r0, #424
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+	ldr	r2, [r1, #28]
+	ldr	r3, [r0, #28]
+	cmn	r2, #1
+	ldr	r7, [r3, #616]
+	bne	.L690
+.L657:
+	add	r8, r4, #432
+	mov	r0, r8
+	bl	mutex_lock
+	ldr	r4, [r4, #424]
+	cmp	r4, r6
+	bne	.L661
+	b	.L658
+.L691:
+	ldr	r4, [r4]
+	cmp	r4, r6
+	beq	.L658
+.L661:
+	ldr	r3, [r4, #8]
+	cmp	r3, r5
+	bne	.L691
+	cmp	r4, #0
+	beq	.L662
+.L663:
+	ldrd	r2, [r4]
+	mov	ip, #256
+	mov	r1, #512
+	mov	r0, r8
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	ip, [r4]
+	str	r1, [r4, #4]
+	bl	mutex_unlock
+	add	r3, r7, #772
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	movw	r3, #:lower16:.LANCHOR0
+	mov	r1, r4
+	movt	r3, #:upper16:.LANCHOR0
+	ldr	r0, [r3, #12]
+	bl	kmem_cache_free
+	mov	r1, r5
+	mov	r0, #3
+	bl	_clear_bit
+	mov	r3, #0
+	mov	r1, r5
+	mov	r0, #11
+	str	r3, [r5, #28]
+	bl	_clear_bit
+	cmp	r5, #0
+	beq	.L664
+	mov	r0, r5
+	bl	put_page
+.L664:
+	movw	r3, #:lower16:__tracepoint_f2fs_commit_inmem_page
+	movt	r3, #:upper16:__tracepoint_f2fs_commit_inmem_page
+	ldr	r2, [r3, #4]
+	cmp	r2, #0
+	bne	.L692
+.L656:
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+.L658:
+	cmp	r4, #0
+	beq	.L662
+	ldr	r3, [r4, #8]
+	cmp	r3, r5
+	beq	.L663
+.L662:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #327
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r7, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L663
+.L692:
+	mov	r2, sp
+	bic	r2, r2, #8128
+	bic	r2, r2, #63
+	ldr	r1, [r2, #4]
+	add	r1, r1, #1
+	str	r1, [r2, #4]
+	ldr	r4, [r3, #16]
+	cmp	r4, #0
+	beq	.L667
+.L668:
+	ldr	r3, [r4]
+	mov	r2, #7
+	mov	r1, r5
+	ldr	r0, [r4, #4]
+	blx	r3
+	ldr	r3, [r4, #8]!
+	cmp	r3, #0
+	bne	.L668
+.L667:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	beq	.L656
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	ldr	lr, [sp, #20]
+	add	sp, sp, #24
+	b	preempt_schedule
+.L690:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #319
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r7, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L657
+	.fnend
+	.size	drop_inmem_page, .-drop_inmem_page
+	.align	2
+	.global	f2fs_balance_fs_bg
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_balance_fs_bg, %function
+f2fs_balance_fs_bg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	.save {r4, lr}
+	str	r4, [sp, #-8]!
+	mov	r1, #4
+	mov	r4, r0
+	str	lr, [sp, #4]
+	.pad #24
+	sub	sp, sp, #24
+	bl	available_free_memory
+	cmp	r0, #0
+	beq	.L718
+.L694:
+	mov	r1, #1
+	mov	r0, r4
+	bl	available_free_memory
+	cmp	r0, #0
+	beq	.L719
+.L695:
+	mov	r1, #0
+	mov	r0, r4
+	bl	available_free_memory
+	cmp	r0, #0
+	bne	.L696
+	movw	r1, #3640
+	mov	r0, r4
+	bl	try_to_free_nids
+.L697:
+	ldr	r3, [r4]
+	ldr	r3, [r3, #208]
+	ldr	r3, [r3, #88]
+	ldr	r3, [r3, #500]
+	ldr	r2, [r3, #20]
+	cmp	r2, #0
+	bne	.L698
+	ldr	r3, [r3, #16]
+	cmp	r3, #0
+	beq	.L720
+.L698:
+	ldr	r2, [r4, #20]
+	movw	r1, #34079
+	movt	r1, 20971
+	ldr	r0, [r2, #4]
+	ldr	r3, [r2, #24]
+	ldr	r2, [r2, #80]
+	mul	r3, r3, r0
+	umull	r1, r3, r1, r3
+	cmp	r2, r3, lsr #5
+	bcc	.L693
+.L706:
+	mov	r1, #1
+	mov	r0, r4
+	bl	available_free_memory
+	cmp	r0, #0
+	bne	.L721
+.L707:
+	ldr	r3, [r4, #864]
+	tst	r3, #32768
+	bne	.L722
+.L705:
+	mov	r1, #1
+	ldr	r0, [r4]
+	bl	f2fs_sync_fs
+	ldr	r2, [r4, #908]
+	ldr	r3, [r2, #308]
+	add	r3, r3, #1
+	str	r3, [r2, #308]
+.L693:
+	add	sp, sp, #24
+	@ sp needed
+	ldr	r4, [sp]
+	add	sp, sp, #4
+	ldr	pc, [sp], #4
+.L696:
+	mov	r2, #0
+	mov	r0, r4
+	mov	r1, r2
+	bl	build_free_nids
+	b	.L697
+.L718:
+	mov	r1, #128
+	mov	r0, r4
+	bl	f2fs_shrink_extent_tree
+	b	.L694
+.L719:
+	movw	r1, #455
+	mov	r0, r4
+	bl	try_to_free_nats
+	b	.L695
+.L721:
+	mov	r1, #3
+	mov	r0, r4
+	bl	available_free_memory
+	cmp	r0, #0
+	beq	.L707
+	ldr	r3, [r4, #28]
+	ldr	r2, [r3, #8]
+	ldr	r3, [r3, #44]
+	ldr	r2, [r2, #84]
+	cmp	r2, r3
+	bhi	.L707
+	ldr	r2, [r4, #20]
+	movw	r1, #34079
+	movt	r1, 20971
+	ldr	r0, [r2, #4]
+	ldr	r3, [r2, #24]
+	ldr	r2, [r2, #80]
+	mul	r3, r3, r0
+	umull	r1, r3, r1, r3
+	cmp	r2, r3, lsr #5
+	bcs	.L707
+	ldr	r3, [r4, #472]
+	mov	r2, #0
+	mov	r0, sp
+	str	r3, [sp]
+	str	r2, [sp, #4]
+	bl	timespec_to_jiffies
+	movw	r2, #:lower16:jiffies
+	ldr	r3, [r4, #464]
+	movt	r2, #:upper16:jiffies
+	ldr	r2, [r2]
+	sub	r3, r3, r2
+	cmn	r3, r0
+	bpl	.L693
+	b	.L707
+.L722:
+	mov	r0, sp
+	bl	blk_start_plug
+	mov	r1, #1
+	mov	r0, r4
+	bl	sync_dirty_inodes
+	mov	r0, sp
+	bl	blk_finish_plug
+	b	.L705
+.L720:
+	ldr	r2, [r4, #476]
+	mov	r0, sp
+	strd	r2, [sp]
+	bl	timespec_to_jiffies
+	movw	r2, #:lower16:jiffies
+	ldr	r3, [r4, #468]
+	movt	r2, #:upper16:jiffies
+	ldr	r2, [r2]
+	sub	r3, r3, r2
+	cmn	r3, r0
+	bpl	.L698
+	b	.L706
+	.fnend
+	.size	f2fs_balance_fs_bg, .-f2fs_balance_fs_bg
+	.align	2
+	.global	f2fs_balance_fs
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_balance_fs, %function
+f2fs_balance_fs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #0
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+	beq	.L724
+	ldr	r2, [r0, #20]
+	movw	r3, #34463
+	movt	r3, 1
+	ldr	r2, [r2, #76]
+	cmp	r2, r3
+	bhi	.L733
+.L724:
+	ldr	r2, [r4, #692]
+	mov	r1, #0
+	ldr	r0, [r4, #696]
+	ldr	lr, [r4, #700]
+	ldr	r3, [r4, #764]
+	rsb	r5, r2, #32
+	mul	r0, r0, lr
+	adds	r6, r0, r3
+	adc	r7, r1, r3, asr #31
+	subs	r3, r6, #1
+	lsr	r3, r3, r2
+	sbc	ip, r7, #0
+	subs	r6, r2, #32
+	orr	r3, r3, ip, lsl r5
+	orrpl	r3, r3, ip, asr r6
+	ldr	ip, [r4, #756]
+	ldr	r8, [r4, #776]
+	udiv	r3, r3, lr
+	adds	r6, r0, ip
+	adc	r7, r1, ip, asr #31
+	subs	ip, r6, #1
+	lsr	ip, ip, r2
+	sbc	r6, r7, #0
+	subs	r7, r2, #32
+	orr	ip, ip, r6, lsl r5
+	orrpl	ip, ip, r6, asr r7
+	adds	r6, r0, r8
+	adc	r7, r1, r8, asr #31
+	subs	r1, r6, #1
+	lsr	r1, r1, r2
+	udiv	ip, ip, lr
+	sbc	r0, r7, #0
+	subs	r2, r2, #32
+	orr	r1, r1, r0, lsl r5
+	ldr	r5, [r4, #16]
+	orrpl	r1, r1, r0, asr r2
+	ubfx	r5, r5, #3, #1
+	cmp	r5, #0
+	udiv	r1, r1, lr
+	bne	.L723
+	ldr	r2, [r4, #28]
+	add	r3, r3, ip, lsl #1
+	add	r1, r3, r1
+	ldr	r3, [r2, #36]
+	ldr	r2, [r2, #4]
+	udiv	lr, r3, lr
+	ldr	r3, [r2, #8]
+	add	r1, r1, lr
+	cmp	r3, r1
+	bls	.L734
+.L723:
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+.L734:
+	add	r0, r4, #868
+	bl	mutex_lock
+	ldrd	r6, [sp, #8]
+	mov	r0, r4
+	mov	r2, r5
+	mov	r1, r5
+	mvn	r3, #0
+	ldrd	r4, [sp]
+	ldr	r8, [sp, #16]
+	ldr	lr, [sp, #20]
+	add	sp, sp, #24
+	b	f2fs_gc
+.L733:
+	bl	f2fs_balance_fs_bg
+	b	.L724
+	.fnend
+	.size	f2fs_balance_fs, .-f2fs_balance_fs
+	.align	2
+	.global	f2fs_issue_flush
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_issue_flush, %function
+f2fs_issue_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, [r0, #864]
+	ands	ip, r3, #2048
+	bne	.L750
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	tst	r3, #1024
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+	ldr	r2, [r0, #28]
+	.pad #24
+	sub	sp, sp, #24
+	ldr	r5, [r2, #76]
+	beq	.L762
+	mov	r6, r5
+	ldr	r3, [r6, #20]!
+	cmp	r3, #0
+	beq	.L763
+	movw	r1, #:lower16:.LC1
+	ldr	r2, .L768
+	add	r0, sp, #4
+	movt	r1, #:upper16:.LC1
+	str	ip, [sp]
+	bl	__init_waitqueue_head
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r3, [r6]
+	add	r3, r3, #1
+	strex	r2, r3, [r6]
+	teq	r2, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	mov	r4, r5
+	add	r2, sp, #16
+	ldr	r3, [r4, #24]!
+.L746:
+	str	r3, [sp, #16]
+	.syntax divided
+@ 197 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	dmb
+@ 0 "" 2
+@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/processor.h" 1
+	pld	[r4]
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L745:
+	.syntax divided
+@ 174 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	@ __cmpxchg4
+	ldrex	r0, [r4]
+	mov	r1, #0
+	teq	r0, r3
+	strexeq r1, r2, [r4]
+
+@ 0 "" 2
+	.arm
+	.syntax unified
+	cmp	r1, #0
+	bne	.L745
+	.syntax divided
+@ 199 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	dmb
+@ 0 "" 2
+	.arm
+	.syntax unified
+	cmp	r3, r0
+	beq	.L764
+	mov	r3, r0
+	b	.L746
+.L750:
+	mov	r0, #0
+	bx	lr
+.L764:
+	ldr	r3, [r5, #28]
+	cmp	r3, #0
+	beq	.L765
+.L747:
+	ldr	r3, [r5]
+	cmp	r3, #0
+	beq	.L748
+	mov	r0, sp
+	bl	wait_for_completion
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r3, [r6]
+	sub	r3, r3, #1
+	strex	r2, r3, [r6]
+	teq	r2, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L749:
+	ldr	r0, [sp, #20]
+	b	.L735
+.L762:
+	ldr	r3, [r0]
+	ldr	r1, [r3, #208]
+	bl	__submit_flush_wait
+	ldr	r2, [r4, #1076]
+	cmp	r0, #0
+	clz	r3, r2
+	lsr	r3, r3, #5
+	movne	r3, #1
+	cmp	r3, #0
+	beq	.L766
+.L761:
+	add	r3, r5, #16
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r2, [r3]
+	add	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L735:
+	add	sp, sp, #24
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+.L748:
+	.syntax divided
+@ 38 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	dmb
+@ 0 "" 2
+@ 111 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/processor.h" 1
+	pld	[r4]
+@ 0 "" 2
+@ 54 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	@	__xchg4
+1:	ldrex	r2, [r4]
+	strex	r1, r3, [r4]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+@ 100 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/cmpxchg.h" 1
+	dmb
+@ 0 "" 2
+	.arm
+	.syntax unified
+	str	r3, [r5, #20]
+	b	.L749
+.L763:
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r3, [r6]
+	add	r3, r3, #1
+	strex	r2, r3, [r6]
+	teq	r2, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	ldr	r3, [r0]
+	ldr	r1, [r3, #208]
+	bl	__submit_flush_wait
+	ldr	r2, [r4, #1076]
+	adds	r3, r0, #0
+	movne	r3, #1
+	cmp	r2, #0
+	moveq	r3, #1
+	cmp	r3, #0
+	beq	.L767
+.L742:
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r3, [r6]
+	sub	r3, r3, #1
+	strex	r2, r3, [r6]
+	teq	r2, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	b	.L761
+.L767:
+	cmp	r2, #1
+	movgt	r7, #80
+	movgt	r8, #1
+	ble	.L744
+.L743:
+	ldr	r3, [r4, #1080]
+	mov	r0, r4
+	add	r8, r8, #1
+	ldr	r1, [r3, r7]
+	add	r7, r7, #80
+	bl	__submit_flush_wait
+	cmp	r0, #0
+	bne	.L742
+	ldr	r3, [r4, #1076]
+	cmp	r8, r3
+	blt	.L743
+.L744:
+	mov	r0, #0
+	b	.L742
+.L765:
+	mov	r2, #1
+	mov	r1, #3
+	add	r0, r5, #4
+	bl	__wake_up
+	b	.L747
+.L766:
+	cmp	r2, #1
+	movgt	r6, #80
+	movgt	r7, #1
+	ble	.L740
+.L739:
+	ldr	r3, [r4, #1080]
+	mov	r0, r4
+	add	r7, r7, #1
+	ldr	r1, [r3, r6]
+	add	r6, r6, #80
+	bl	__submit_flush_wait
+	cmp	r0, #0
+	bne	.L761
+	ldr	r3, [r4, #1076]
+	cmp	r7, r3
+	blt	.L739
+.L740:
+	mov	r0, #0
+	b	.L761
+.L769:
+	.align	2
+.L768:
+	.word	.LANCHOR0+12
+	.fnend
+	.size	f2fs_issue_flush, .-f2fs_issue_flush
+	.align	2
+	.global	create_flush_cmd_control
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	create_flush_cmd_control, %function
+create_flush_cmd_control:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-20]!
+	.save {r4, r5, r6, r7, lr}
+	mov	r5, r0
+	strd	r6, [sp, #8]
+	str	lr, [sp, #16]
+	ldr	r3, [r0]
+	.pad #12
+	sub	sp, sp, #12
+	ldr	r2, [r0, #28]
+	ldr	r3, [r3, #208]
+	ldr	r4, [r2, #76]
+	ldr	r6, [r3]
+	cmp	r4, #0
+	beq	.L779
+.L771:
+	lsr	r2, r6, #20
+	ubfx	r6, r6, #0, #20
+	movw	r3, #:lower16:.LC10
+	movw	r0, #:lower16:issue_flush_thread
+	movt	r3, #:upper16:.LC10
+	stm	sp, {r2, r6}
+	movt	r0, #:upper16:issue_flush_thread
+	mov	r1, r5
+	mvn	r2, #0
+	bl	kthread_create_on_node
+	cmn	r0, #4096
+	mov	r7, r0
+	bhi	.L774
+	mov	r6, #0
+	bl	wake_up_process
+	str	r7, [r4]
+.L770:
+	mov	r0, r6
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	add	sp, sp, #16
+	ldr	pc, [sp], #4
+.L779:
+	movw	r3, #:lower16:kmalloc_caches
+	movt	r3, #:upper16:kmalloc_caches
+	ldr	r0, [r3, #24]
+	cmp	r0, #0
+	beq	.L775
+	mov	r2, #32
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	subs	r4, r0, #0
+	beq	.L780
+.L772:
+	mov	r7, #0
+	movw	r1, #:lower16:.LC9
+	ldr	r2, .L781
+	movt	r1, #:upper16:.LC9
+	add	r0, r4, #4
+	str	r7, [r4, #16]
+	str	r7, [r4, #20]
+	bl	__init_waitqueue_head
+	str	r7, [r4, #24]
+	ldr	r3, [r5, #28]
+	str	r4, [r3, #76]
+	ldr	r3, [r5, #864]
+	ands	r3, r3, #1024
+	moveq	r6, r3
+	bne	.L771
+	b	.L770
+.L775:
+	mov	r4, #16
+	b	.L772
+.L774:
+	mov	r0, r4
+	str	r7, [r4]
+	mov	r6, r7
+	bl	kfree
+	ldr	r3, [r5, #28]
+	mov	r2, #0
+	str	r2, [r3, #76]
+	b	.L770
+.L780:
+	mvn	r6, #11
+	b	.L770
+.L782:
+	.align	2
+.L781:
+	.word	.LANCHOR0+16
+	.fnend
+	.size	create_flush_cmd_control, .-create_flush_cmd_control
+	.align	2
+	.global	destroy_flush_cmd_control
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	destroy_flush_cmd_control, %function
+destroy_flush_cmd_control:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-16]!
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	str	r6, [sp, #8]
+	mov	r6, r1
+	str	lr, [sp, #12]
+	ldr	r3, [r0, #28]
+	ldr	r4, [r3, #76]
+	cmp	r4, #0
+	beq	.L784
+	ldr	r0, [r4]
+	cmp	r0, #0
+	beq	.L784
+	mov	r3, #0
+	str	r3, [r4]
+	bl	kthread_stop
+.L784:
+	cmp	r6, #0
+	beq	.L783
+	mov	r0, r4
+	bl	kfree
+	ldr	r3, [r5, #28]
+	mov	r2, #0
+	str	r2, [r3, #76]
+.L783:
+	ldrd	r4, [sp]
+	ldr	r6, [sp, #8]
+	add	sp, sp, #12
+	ldr	pc, [sp], #4
+	.fnend
+	.size	destroy_flush_cmd_control, .-destroy_flush_cmd_control
+	.align	2
+	.global	f2fs_wait_discard_bio
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_wait_discard_bio, %function
+f2fs_wait_discard_bio:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	mov	r7, r1
+	mov	r6, r0
+	strd	r8, [sp, #16]
+	movw	r8, #4172
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, [r3, #80]
+	add	r5, r4, #4096
+	add	r5, r5, #32
+	mov	r0, r5
+	bl	mutex_lock
+	add	r0, r4, r8
+	mov	r2, r7
+	mov	r1, #0
+	bl	__lookup_rb_tree
+	subs	r4, r0, #0
+	beq	.L815
+	ldrb	r2, [r4, #54]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L827
+	ldrh	r3, [r4, #52]
+	mov	r0, r5
+	add	r3, r3, #1
+	strh	r3, [r4, #52]	@ movhi
+	bl	mutex_unlock
+	add	r0, r4, #32
+	bl	wait_for_completion_io
+	mov	r0, r5
+	bl	mutex_lock
+	ldrb	r3, [r4, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L828
+.L814:
+	ldrh	r2, [r4, #52]
+	sub	r2, r2, #1
+	uxth	r2, r2
+	cmp	r2, #0
+	strh	r2, [r4, #52]	@ movhi
+	beq	.L829
+.L815:
+	mov	r0, r5
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	mutex_unlock
+.L827:
+	ldr	r3, [r4, #16]
+	ldr	r1, [r6, #28]
+	cmp	r3, #1
+	ldr	r9, [r1, #80]
+	beq	.L830
+	add	r2, r9, #4096
+	ldr	r10, [r4, #12]
+	ldr	r1, [r2, #60]
+	ldr	r0, [r4, #20]
+	cmp	r7, r10
+	add	fp, r10, r3
+	sub	r1, r1, r3
+	sub	r3, fp, #1
+	str	r0, [sp, #12]
+	str	r1, [r2, #60]
+	bhi	.L804
+	cmp	r3, r7
+	bls	.L815
+	ldr	lr, [r4, #12]
+	add	r1, r9, r8
+	add	ip, r4, #24
+	ldr	r3, [r4, #16]
+	ldr	r0, [r4, #20]
+	add	lr, lr, #1
+	sub	r3, r3, #1
+	add	r0, r0, #1
+	str	lr, [r4, #12]
+	str	r3, [r4, #16]
+	str	r0, [r4, #20]
+	ldr	lr, [r2, #60]
+	mov	r0, r6
+	add	r3, lr, r3
+	str	r3, [r2, #60]
+	ldr	r3, [r4, #16]
+	ldr	lr, [r4, #24]
+	ldr	r2, [r4, #28]
+	cmp	r3, #512
+	movcs	r3, #512
+	lsl	r3, r3, #3
+	str	r2, [lr, #4]
+	str	lr, [r2]
+	add	r2, r9, r3
+	add	r3, r3, #4
+	add	r9, r9, r3
+	ldr	r3, [r2, #8]
+	str	ip, [r2, #8]
+	str	r9, [r4, #24]
+	str	r3, [r4, #28]
+	str	ip, [r3]
+	bl	__check_rb_tree_consistence
+	cmp	r0, #0
+	bne	.L815
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1001
+.L826:
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r6, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L815
+.L829:
+	ldr	r3, [r4, #56]
+	ldr	r1, [r6, #28]
+	cmn	r3, #95
+	ldr	r7, [r1, #80]
+	streq	r2, [r4, #56]
+	beq	.L817
+	cmp	r3, #0
+	beq	.L817
+	movw	r2, #:lower16:.LC2
+	movw	r1, #:lower16:.LC3
+	ldr	r0, [r6]
+	movt	r2, #:upper16:.LC2
+	movt	r1, #:upper16:.LC3
+	bl	f2fs_msg
+.L817:
+	ldrb	r3, [r4, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L818
+	add	r3, r7, #4160
+	add	r3, r3, #4
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L818:
+	ldrd	r2, [r4, #24]
+	mov	lr, #256
+	mov	ip, #512
+	add	r1, r7, #4160
+	mov	r0, r4
+	add	r1, r1, #12
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	lr, [r4, #24]
+	str	ip, [r4, #28]
+	bl	rb_erase
+	add	ip, r7, #4096
+	ldr	lr, [r4, #16]
+	movw	r2, #:lower16:.LANCHOR0
+	ldr	r3, [ip, #60]
+	movt	r2, #:upper16:.LANCHOR0
+	mov	r1, r4
+	ldr	r0, [r2, #8]
+	sub	r3, r3, lr
+	str	r3, [ip, #60]
+	bl	kmem_cache_free
+	add	r3, r7, #4160
+	add	r3, r3, #8
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	b	.L815
+.L830:
+	ldr	r3, [r4, #56]
+	cmn	r3, #95
+	streq	r2, [r4, #56]
+	beq	.L803
+	cmp	r3, #0
+	beq	.L803
+	movw	r2, #:lower16:.LC2
+	movw	r1, #:lower16:.LC3
+	ldr	r0, [r6]
+	movt	r2, #:upper16:.LC2
+	movt	r1, #:upper16:.LC3
+	bl	f2fs_msg
+	ldrb	r3, [r4, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L803
+	add	r3, r9, #4160
+	add	r3, r3, #4
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L803:
+	ldrd	r2, [r4, #24]
+	mov	lr, #256
+	mov	ip, #512
+	add	r1, r9, #4160
+	mov	r0, r4
+	add	r1, r1, #12
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	lr, [r4, #24]
+	str	ip, [r4, #28]
+	bl	rb_erase
+	add	ip, r9, #4096
+	ldr	lr, [r4, #16]
+	movw	r2, #:lower16:.LANCHOR0
+	ldr	r3, [ip, #60]
+	movt	r2, #:upper16:.LANCHOR0
+	mov	r1, r4
+	ldr	r0, [r2, #8]
+	add	r9, r9, #4160
+	add	r9, r9, #8
+	sub	r3, r3, lr
+	str	r3, [ip, #60]
+	bl	kmem_cache_free
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r3, [r9]
+	sub	r3, r3, #1
+	strex	r2, r3, [r9]
+	teq	r2, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	b	.L815
+.L804:
+	ldr	ip, [r4, #12]
+	str	r3, [sp, #16]
+	add	r3, r9, r8
+	mov	r1, r3
+	mov	r0, r6
+	str	r3, [sp, #20]
+	sub	ip, r7, ip
+	str	ip, [r4, #16]
+	ldr	lr, [r2, #60]
+	add	ip, lr, ip
+	str	ip, [r2, #60]
+	ldr	r2, [r4, #16]
+	ldr	r8, [r4, #24]
+	ldr	lr, [r4, #28]
+	cmp	r2, #512
+	movcs	r2, #512
+	lsl	r2, r2, #3
+	str	lr, [r8, #4]
+	str	r8, [lr]
+	add	lr, r4, #24
+	add	ip, r9, r2
+	add	r2, r2, #4
+	ldr	r8, [ip, #8]
+	add	r2, r9, r2
+	str	lr, [ip, #8]
+	str	r2, [r4, #24]
+	str	r8, [r4, #28]
+	str	lr, [r8]
+	bl	__check_rb_tree_consistence
+	cmp	r0, #0
+	ldr	r3, [sp, #16]
+	beq	.L831
+.L825:
+	cmp	r3, r7
+	bls	.L815
+	mvn	r3, r7
+	add	r2, r7, #1
+	ldr	r1, [r4, #48]
+	add	fp, r3, fp
+	ldr	r3, [sp, #12]
+	mov	r0, r6
+	str	fp, [sp]
+	add	r3, r3, r2
+	sub	r3, r3, r10
+	bl	__insert_discard_tree.constprop.8
+	ldr	r1, [sp, #20]
+	mov	r0, r6
+	bl	__check_rb_tree_consistence
+	cmp	r0, #0
+	movweq	r0, #:lower16:.LC0
+	movweq	r1, #993
+	bne	.L815
+	b	.L826
+.L828:
+	movw	r0, #:lower16:.LC0
+	mov	r1, #1184
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r6, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L814
+.L831:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #982
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r6, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r3, [sp, #16]
+	b	.L825
+	.fnend
+	.size	f2fs_wait_discard_bio, .-f2fs_wait_discard_bio
+	.align	2
+	.global	f2fs_wait_discard_bios
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_wait_discard_bios, %function
+f2fs_wait_discard_bios:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	add	r7, r0, #16
+	movw	r6, #:lower16:.LC0
+	strd	r8, [sp, #16]
+	movt	r6, #:upper16:.LC0
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r8, [r3, #80]
+	add	r9, r8, #4096
+	add	r8, r8, #4
+	mov	r5, r9
+	add	r9, r9, #32
+	mov	r0, r9
+	add	r5, r5, #4
+	bl	mutex_lock
+	add	r0, sp, #8
+	bl	blk_start_plug
+.L837:
+	ldr	fp, [r5]
+	ldr	r10, [fp]
+	cmp	r5, fp
+	sub	fp, fp, #24
+	sub	r10, r10, #24
+	bne	.L833
+	b	.L834
+.L835:
+	bl	__submit_discard_cmd
+	mov	r2, r10
+	ldr	r3, [r2, #24]!
+	cmp	r5, r2
+	sub	r3, r3, #24
+	beq	.L834
+	mov	fp, r10
+	mov	r10, r3
+.L833:
+	ldrb	r3, [fp, #54]	@ zero_extendqisi2
+	mov	r1, fp
+	mov	r0, r4
+	cmp	r3, #0
+	beq	.L835
+	movw	r1, #1131
+	mov	r0, r6
+	bl	warn_slowpath_null
+	mov	r1, r7
+	mov	r0, #2
+	bl	_set_bit
+	mov	r1, fp
+	mov	r0, r4
+	b	.L835
+.L834:
+	sub	r5, r5, #8
+	cmp	r8, r5
+	bne	.L837
+.L838:
+	add	r0, sp, #8
+	bl	blk_finish_plug
+	mov	r0, r9
+	bl	mutex_unlock
+	ldr	r3, [r4, #28]
+	ldr	r5, [r3, #80]
+	add	r9, r5, #4096
+	add	r5, r5, #4096
+	mov	r8, r9
+	add	r9, r9, #32
+	mov	r0, r9
+	add	r8, r8, #12
+	bl	mutex_lock
+	ldr	r6, [r5, #12]
+	ldr	r5, [r6]
+	cmp	r8, r6
+	sub	r6, r6, #24
+	sub	r5, r5, #24
+	beq	.L839
+	movw	r10, #:lower16:.LANCHOR0
+	movw	fp, #:lower16:.LC2
+	movw	r3, #:lower16:.LC3
+	movt	r10, #:upper16:.LANCHOR0
+	movt	r3, #:upper16:.LC3
+	movt	fp, #:upper16:.LC2
+	stm	sp, {r3, r9}
+.L844:
+	ldrh	r9, [r6, #52]
+	add	r0, r6, #32
+	cmp	r9, #0
+	bne	.L840
+	bl	wait_for_completion_io
+	ldr	r3, [r6, #56]
+	ldr	r1, [r4, #28]
+	cmn	r3, #95
+	ldr	r7, [r1, #80]
+	streq	r9, [r6, #56]
+	beq	.L842
+	cmp	r3, #0
+	mov	r2, fp
+	ldr	r1, [sp]
+	beq	.L842
+	ldr	r0, [r4]
+	bl	f2fs_msg
+.L842:
+	ldrb	r3, [r6, #54]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L843
+	add	r3, r7, #4160
+	add	r3, r3, #4
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L843:
+	ldrd	r2, [r6, #24]
+	mov	lr, #256
+	mov	ip, #512
+	add	r1, r7, #4160
+	mov	r0, r6
+	add	r1, r1, #12
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	lr, [r6, #24]
+	str	ip, [r6, #28]
+	bl	rb_erase
+	add	r2, r7, #4096
+	ldr	ip, [r6, #16]
+	mov	r1, r6
+	ldr	r3, [r2, #60]
+	ldr	r0, [r10, #8]
+	sub	r3, r3, ip
+	str	r3, [r2, #60]
+	bl	kmem_cache_free
+	add	r3, r7, #4160
+	add	r3, r3, #8
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L840:
+	mov	r6, r5
+	ldr	r3, [r5, #24]!
+	cmp	r8, r5
+	sub	r5, r3, #24
+	bne	.L844
+	ldr	r9, [sp, #4]
+.L839:
+	mov	r0, r9
+	bl	mutex_unlock
+	add	sp, sp, #36
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+	.fnend
+	.size	f2fs_wait_discard_bios, .-f2fs_wait_discard_bios
+	.align	2
+	.global	release_discard_addrs
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	release_discard_addrs, %function
+release_discard_addrs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-32]!
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	str	r10, [sp, #24]
+	str	lr, [sp, #28]
+	ldr	r3, [r0, #28]
+	ldr	r6, [r3, #80]
+	ldr	r3, [r6, #4]
+	add	r6, r6, #4
+	cmp	r6, r3
+	ldr	r4, [r3]
+	beq	.L852
+	movw	r7, #:lower16:.LANCHOR0
+	mov	r5, r4
+	movt	r7, #:upper16:.LANCHOR0
+	mov	r9, #256
+	mov	r8, #512
+.L854:
+	ldr	r2, [r3, #4]
+	mov	r1, r3
+	ldr	r0, [r7]
+	str	r2, [r4, #4]
+	str	r4, [r2]
+	str	r9, [r3]
+	str	r8, [r3, #4]
+	bl	kmem_cache_free
+	ldr	r4, [r4]
+	cmp	r5, r6
+	mov	r3, r5
+	mov	r5, r4
+	bne	.L854
+.L852:
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldr	r10, [sp, #24]
+	add	sp, sp, #28
+	ldr	pc, [sp], #4
+	.fnend
+	.size	release_discard_addrs, .-release_discard_addrs
+	.align	2
+	.global	clear_prefree_segments
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	clear_prefree_segments, %function
+clear_prefree_segments:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	mov	r7, r0
+	mvn	r6, #0
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	mov	r10, r1
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r2, [r1]
+	ldr	fp, [r3, #8]
+	ldr	r3, [r3, #80]
+	and	r2, r2, #16
+	ldr	r5, [fp, #32]
+	str	r3, [sp, #4]
+	add	r3, r3, #4
+	str	r2, [sp, #20]
+	add	r2, fp, #36
+	mov	r0, r2
+	str	r2, [sp, #8]
+	str	r3, [sp, #24]
+	bl	mutex_lock
+	ldr	ip, [r7, #28]
+.L858:
+	ldr	r1, [ip, #32]
+	add	r2, r6, #1
+	mov	r0, r5
+	bl	_find_next_bit_le
+	ldr	r3, [r7, #28]
+	mov	r9, r0
+	mov	r4, r0
+	ldr	r1, [r3, #32]
+	cmp	r1, r0
+	bls	.L859
+	add	r8, r0, #1
+	mov	r0, r5
+	mov	r2, r8
+	bl	_find_next_zero_bit_le
+	cmp	r9, r0
+	mov	r6, r0
+	bcs	.L860
+	mov	r0, r9
+.L861:
+	mov	r1, r5
+	bl	_clear_bit
+	cmp	r6, r8
+	mov	r0, r8
+	add	r8, r8, #1
+	bne	.L861
+.L860:
+	ldr	r3, [fp, #84]
+	add	r3, r4, r3
+	sub	r3, r3, r6
+	str	r3, [fp, #84]
+	ldr	lr, [r7, #864]
+	tst	lr, #4
+	beq	.L862
+	ldr	r3, [sp, #20]
+	ldr	ip, [r7, #28]
+	cmp	r3, #0
+	beq	.L863
+	ldrd	r2, [r10, #8]
+	mov	r1, #0
+	cmp	r1, r3
+	cmpeq	r4, r2
+	bcc	.L863
+	ldrd	r0, [r10, #16]
+	mov	r3, #0
+	sub	r2, r6, #1
+	cmp	r3, r1
+	cmpeq	r2, r0
+	bls	.L858
+.L863:
+	tst	lr, #262144
+	beq	.L865
+	ldr	r2, [r7, #700]
+	cmp	r2, #1
+	beq	.L865
+.L866:
+	ldr	r0, [ip, #12]
+	udiv	r3, r4, r2
+	ldr	r1, [r0, #48]
+	udiv	r1, r1, r2
+	mul	r8, r2, r3
+	cmp	r1, r3
+	beq	.L867
+	ldr	r1, [r0, #112]
+	udiv	r1, r1, r2
+	cmp	r1, r3
+	beq	.L867
+	ldr	r1, [r0, #176]
+	udiv	r1, r1, r2
+	cmp	r1, r3
+	beq	.L867
+	ldr	r1, [r0, #240]
+	udiv	r1, r1, r2
+	cmp	r1, r3
+	beq	.L867
+	ldr	r1, [r0, #304]
+	udiv	r1, r1, r2
+	cmp	r1, r3
+	beq	.L867
+	ldr	r1, [r0, #368]
+	udiv	r1, r1, r2
+	cmp	r1, r3
+	beq	.L867
+	cmp	r2, #1
+	ldr	r1, [ip]
+	bls	.L868
+	ldr	r1, [r1, #64]
+	ldr	r3, [r1, r3, lsl #2]
+	cmp	r3, #0
+	beq	.L899
+.L867:
+	add	r4, r8, r2
+	cmp	r6, r4
+	bhi	.L866
+	sub	r6, r4, #1
+	b	.L858
+.L862:
+	ldr	ip, [r7, #28]
+	b	.L858
+.L865:
+	ldr	r3, [ip, #4]
+	sub	r2, r6, r4
+	mov	r0, r7
+	ldr	r1, [r7, #692]
+	ldr	ip, [ip, #16]
+	ldr	r3, [r3]
+	lsl	r2, r2, r1
+	add	r4, r4, r3
+	add	r1, ip, r4, lsl r1
+	bl	f2fs_issue_discard
+	ldr	ip, [r7, #28]
+	b	.L858
+.L859:
+	ldr	r0, [sp, #8]
+	bl	mutex_unlock
+	ldr	r3, [sp, #4]
+	ldr	fp, [r3, #4]
+	ldr	r3, [sp, #24]
+	cmp	r3, fp
+	ldr	r3, [fp]
+	str	r3, [sp, #16]
+	beq	.L870
+	movw	r3, #:lower16:.LANCHOR0
+	mov	r5, r7
+	movt	r3, #:upper16:.LANCHOR0
+	str	r3, [sp, #28]
+.L880:
+	ldr	r3, [sp, #20]
+	mov	r8, fp
+	ldr	ip, [r5, #696]
+	cmp	r3, #0
+	ldr	r3, [r8, #12]!
+	and	r7, r3, #1
+	beq	.L900
+	mov	r6, #0
+	mov	r3, r7
+	stmib	sp, {r7, r8}
+	mov	r4, r6
+	str	r6, [sp, #12]
+	b	.L871
+.L902:
+	bl	_find_next_zero_bit_le
+	ldrd	r6, [r10, #24]
+	mov	r3, r0
+	mov	r9, #0
+	sub	ip, r3, r4
+	mov	r0, r5
+	mov	r2, ip
+	mov	r8, ip
+	cmp	r7, r9
+	cmpeq	r6, ip
+	movhi	r4, r3
+	bhi	.L879
+	ldr	lr, [sp, #12]
+	ldr	r1, [fp, #8]
+	add	ip, lr, ip
+	add	r1, r4, r1
+	mov	r4, r3
+	str	ip, [sp, #12]
+	bl	f2fs_issue_discard
+	ldr	r3, [r10, #32]
+	ldr	r2, [r10, #36]
+	adds	r3, r3, r8
+	adc	r2, r2, r9
+	str	r3, [r10, #32]
+	str	r2, [r10, #36]
+.L879:
+	ldr	r3, [sp, #4]
+	ldr	ip, [r5, #696]
+	eor	r3, r3, #1
+	cmp	ip, r4
+	str	r3, [sp, #4]
+	bls	.L901
+.L871:
+	cmp	r3, #0
+	mov	r2, r4
+	ldr	r0, [sp, #8]
+	mov	r1, ip
+	bne	.L902
+	bl	_find_next_bit_le
+	mov	r4, r0
+	b	.L879
+.L901:
+	ldr	r6, [sp, #12]
+.L876:
+	ldrd	r2, [fp]
+	mov	ip, #512
+	mov	r1, fp
+	ldr	r4, [sp, #16]
+	ldr	r0, [sp, #28]
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	mov	r3, #256
+	ldr	r0, [r0]
+	str	r3, [fp]
+	str	ip, [fp, #4]
+	ldr	r3, [r5, #28]
+	mov	fp, r4
+	ldr	r3, [r3, #80]
+	add	r3, r3, #4096
+	ldr	r2, [r3, #52]
+	sub	r2, r2, r6
+	str	r2, [r3, #52]
+	bl	kmem_cache_free
+	ldr	r2, [r4]
+	str	r2, [sp, #16]
+	ldr	r2, [sp, #24]
+	cmp	r4, r2
+	bne	.L880
+	mov	r7, r5
+.L870:
+	ldr	r0, [r7, #28]
+	mov	r3, #0
+	mov	r2, #1
+	mov	r1, #3
+	ldr	r0, [r0, #80]
+	add	r0, r0, #4096
+	add	r0, r0, #20
+	add	sp, sp, #36
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	__wake_up
+.L900:
+	cmp	r7, #0
+	mov	r1, ip
+	ldr	r6, [sp, #20]
+	bne	.L882
+	mov	r4, r6
+	b	.L873
+.L874:
+	mov	r0, r8
+	bl	_find_next_zero_bit_le
+	ldr	r1, [fp, #8]
+	mov	r4, r0
+	mov	r0, r5
+	sub	r7, r4, r9
+	mov	r2, r7
+	add	r6, r6, r7
+	add	r1, r9, r1
+	bl	f2fs_issue_discard
+	ldrd	r2, [r10, #32]
+	adds	r0, r2, r7
+	adc	r1, r3, #0
+	strd	r0, [r10, #32]
+	ldr	r1, [r5, #696]
+	cmp	r1, r4
+	bls	.L876
+.L873:
+	mov	r2, r4
+	mov	r0, r8
+	bl	_find_next_bit_le
+	ldr	r1, [r5, #696]
+	mov	r2, r0
+	mov	r9, r0
+	cmp	r1, r0
+	bhi	.L874
+	b	.L876
+.L882:
+	mov	r2, r6
+	mov	r9, r6
+	b	.L874
+.L868:
+	add	r4, r4, r4, lsl #1
+	ldr	r1, [r1, #60]
+	lsl	r3, r4, #3
+	ldrh	r3, [r1, r3]
+	lsr	r3, r3, #6
+	cmp	r3, #0
+	bne	.L867
+.L899:
+	ldr	r3, [ip, #4]
+	mov	r0, r7
+	ldr	r1, [r7, #692]
+	ldr	ip, [ip, #16]
+	ldr	r3, [r3]
+	lsl	r2, r2, r1
+	add	r3, r8, r3
+	add	r1, ip, r3, lsl r1
+	bl	f2fs_issue_discard
+	ldr	ip, [r7, #28]
+	ldr	r2, [r7, #700]
+	b	.L867
+	.fnend
+	.size	clear_prefree_segments, .-clear_prefree_segments
+	.align	2
+	.global	refresh_sit_entry
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	refresh_sit_entry, %function
+refresh_sit_entry:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	sub	r3, r2, #1
+	strd	r6, [sp, #8]
+	cmn	r3, #3
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r0, [r0, #28]
+	.pad #28
+	sub	sp, sp, #28
+	str	r3, [sp, #8]
+	str	r1, [sp, #16]
+	ldr	r6, [r0, #16]
+	str	r2, [sp, #20]
+	sub	r2, r2, r6
+	bhi	.L932
+	ldr	r1, [r0, #4]
+	mov	r9, #1
+	ldr	r3, [r4, #692]
+	ldr	r8, [r1]
+	rsb	r8, r8, r2, lsr r3
+	rsbs	r1, r8, #0
+	and	ip, r8, #31
+	and	r1, r1, #31
+	add	r3, r8, #31
+	rsbpl	ip, r1, #0
+	cmp	r8, #0
+	movge	r3, r8
+	add	r5, r8, r8, lsl r9
+	asr	r3, r3, #5
+	lsl	r9, r9, ip
+	lsl	r3, r3, #2
+	lsl	r1, r5, #3
+	str	r3, [sp, #12]
+.L904:
+	ldr	ip, [r0]
+	ldr	r0, [r4, #696]
+	ldr	r5, [ip, #60]
+	sub	r6, r0, #1
+	and	r6, r6, r2
+	ldrh	r7, [r5, r1]
+	add	r5, r5, r1
+	lsr	r7, r7, #6
+	add	r7, r7, #1
+	cmp	r0, r7
+	bcc	.L946
+.L905:
+	ldrh	r2, [r5]
+	bfi	r2, r7, #6, #10
+	strh	r2, [r5]	@ movhi
+	ldr	r2, [r4, #28]
+	ldr	r7, [r2]
+	ldrd	r10, [r7, #72]
+	bl	get_seconds
+	ldr	r1, [r7, #80]
+	mvn	r2, r6
+	ldr	ip, [r7, #84]
+	and	r2, r2, #7
+	mov	r7, #1
+	lsl	r7, r7, r2
+	subs	r3, r10, r1
+	sxtb	r2, r7
+	str	r3, [sp]
+	sbc	r3, fp, ip
+	str	r3, [sp, #4]
+	ldrd	r10, [sp]
+	adds	r10, r10, r0
+	adc	fp, fp, r0, asr #31
+	mov	r0, r10
+	mov	r1, fp
+	strd	r0, [r5, #16]
+	ldr	ip, [r4, #28]
+	ldr	ip, [ip]
+	strd	r0, [ip, #96]
+	ldr	r0, [r5, #4]
+	ldrb	r1, [r0, r6, lsr #3]	@ zero_extendqisi2
+	tst	r1, r7
+	orr	r1, r2, r1
+	strb	r1, [r0, r6, lsr #3]
+	bne	.L947
+.L906:
+	ldr	r1, [r4]
+	ldr	r0, [r1, #208]
+	ldr	r0, [r0, #88]
+	ldr	r0, [r0, #500]
+	ldr	r0, [r0, #556]
+	tst	r0, #16384
+	bne	.L907
+	ldr	r1, [r1, #616]
+	ldr	r1, [r1, #8]
+	ldr	r1, [r1, #2180]	@ unaligned
+	tst	r1, #2
+	bne	.L907
+.L908:
+	ldr	ip, [r5, #8]
+	ldrb	r1, [r5]	@ zero_extendqisi2
+	ldrb	r0, [ip, r6, lsr #3]	@ zero_extendqisi2
+	and	r1, r1, #63
+	cmp	r1, #4
+	and	r1, r0, r7
+	beq	.L948
+.L909:
+	cmp	r1, #0
+	bne	.L911
+	ldrh	r2, [r5, #2]
+	ubfx	r1, r2, #0, #10
+	add	r1, r1, #1
+	bfi	r2, r1, #0, #10
+	strh	r2, [r5, #2]	@ movhi
+.L911:
+	ldr	r2, [r4, #28]
+	ldr	r3, [sp, #12]
+	ldr	r1, [r2]
+	ldr	r0, [r1, #28]
+	ldr	r2, [r0, r3]
+	tst	r2, r9
+	orr	r9, r2, r9
+	str	r9, [r0, r3]
+	bne	.L912
+	ldr	r3, [r1, #32]
+	add	r3, r3, #1
+	str	r3, [r1, #32]
+.L912:
+	ldr	r3, [r4, #28]
+	ldr	r2, [r3]
+	ldr	r3, [r2, #12]
+	add	r3, r3, #1
+	str	r3, [r2, #12]
+	ldr	r3, [r4, #700]
+	cmp	r3, #1
+	bls	.L913
+	ldr	r2, [r4, #28]
+	udiv	r8, r8, r3
+	ldr	r3, [r2]
+	ldr	r2, [r3, #64]
+	ldr	r3, [r2, r8, lsl #2]
+	add	r3, r3, #1
+	str	r3, [r2, r8, lsl #2]
+.L913:
+	ldr	r0, [sp, #16]
+	sub	r3, r0, #1
+	cmn	r3, #3
+	bhi	.L915
+	ldr	r2, [r4, #28]
+	mov	r5, r0
+	ldr	r1, [r4, #692]
+	ldr	r3, [r2, #4]
+	ldr	r2, [r2, #16]
+	ldr	r3, [r3]
+	sub	r2, r0, r2
+	rsb	r3, r3, r2, lsr r1
+	cmn	r3, #1
+	bne	.L949
+.L915:
+	ldr	r3, [sp, #8]
+	cmn	r3, #3
+	bhi	.L903
+	ldr	r0, [r4, #28]
+	ldr	ip, [sp, #20]
+	ldr	r1, [r4, #692]
+	ldr	r2, [r0, #4]
+	ldr	r3, [r0, #16]
+	ldr	r2, [r2]
+	sub	r10, ip, r3
+	rsb	r10, r2, r10, lsr r1
+	cmn	r10, #1
+	beq	.L903
+	ldr	r3, [r0, #12]
+	ldr	r2, [r3, #48]
+	cmp	r10, r2
+	beq	.L903
+	ldr	r2, [r3, #112]
+	cmp	r10, r2
+	beq	.L903
+	ldr	r2, [r3, #176]
+	cmp	r10, r2
+	beq	.L903
+	ldr	r2, [r3, #240]
+	cmp	r10, r2
+	beq	.L903
+	ldr	r2, [r3, #304]
+	cmp	r10, r2
+	beq	.L903
+	ldr	r3, [r3, #368]
+	cmp	r10, r3
+	beq	.L903
+	ldr	r5, [r0, #8]
+	add	r5, r5, #36
+	mov	r0, r5
+	bl	mutex_lock
+	ldr	r2, [r4, #28]
+	add	r3, r10, r10, lsl #1
+	lsl	r3, r3, #3
+	ldr	r1, [r2]
+	ldr	r1, [r1, #60]
+	ldrh	r3, [r1, r3]
+	lsrs	r3, r3, #6
+	beq	.L950
+	ldr	r2, [r4, #696]
+	mov	r1, r10
+	mov	r0, r4
+	cmp	r3, r2
+	mov	r2, #6
+	bcs	.L929
+	bl	__locate_dirty_segment
+.L928:
+	mov	r0, r5
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	mutex_unlock
+.L907:
+	ldr	r0, [r5, #12]
+	ldrb	r1, [r0, r6, lsr #3]	@ zero_extendqisi2
+	tst	r1, r7
+	orr	r1, r2, r1
+	strb	r1, [r0, r6, lsr #3]
+	bne	.L908
+	ldr	r1, [r4, #744]
+	sub	r1, r1, #1
+	str	r1, [r4, #744]
+	b	.L908
+.L903:
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L932:
+	mov	r3, #0
+	mvn	r1, #23
+	mov	r9, r3
+	mvn	r8, #0
+	str	r3, [sp, #12]
+	b	.L904
+.L949:
+	mov	r1, r0
+	mvn	r2, #0
+	mov	r0, r4
+	bl	update_sit_entry
+	ldr	r1, [r4, #28]
+	ldr	r0, [r4, #692]
+	ldr	r2, [r1, #4]
+	ldr	r3, [r1, #16]
+	ldr	r2, [r2]
+	sub	fp, r5, r3
+	rsb	fp, r2, fp, lsr r0
+	cmn	fp, #1
+	beq	.L915
+	ldr	r3, [r1, #12]
+	ldr	r2, [r3, #48]
+	cmp	fp, r2
+	beq	.L915
+	ldr	r2, [r3, #112]
+	cmp	fp, r2
+	beq	.L915
+	ldr	r2, [r3, #176]
+	cmp	fp, r2
+	beq	.L915
+	ldr	r2, [r3, #240]
+	cmp	fp, r2
+	beq	.L915
+	ldr	r2, [r3, #304]
+	cmp	fp, r2
+	beq	.L915
+	ldr	r3, [r3, #368]
+	cmp	fp, r3
+	beq	.L915
+	ldr	r5, [r1, #8]
+	add	r5, r5, #36
+	mov	r0, r5
+	bl	mutex_lock
+	ldr	r2, [r4, #28]
+	add	r3, fp, fp, lsl #1
+	lsl	r3, r3, #3
+	ldr	r1, [r2]
+	ldr	r1, [r1, #60]
+	ldrh	r3, [r1, r3]
+	lsrs	r3, r3, #6
+	beq	.L951
+	ldr	r2, [r4, #696]
+	mov	r1, fp
+	mov	r0, r4
+	cmp	r3, r2
+	mov	r2, #6
+	bcs	.L922
+	bl	__locate_dirty_segment
+.L921:
+	mov	r0, r5
+	bl	mutex_unlock
+	b	.L915
+.L948:
+	orr	r2, r2, r0
+	cmp	r1, #0
+	strb	r2, [ip, r6, lsr #3]
+	bne	.L952
+	ldrh	r2, [r5, #2]
+	ldr	r1, [r5, #8]
+	add	r0, r2, #1
+	bfi	r2, r0, #0, #10
+	strh	r2, [r5, #2]	@ movhi
+	ldrb	r1, [r1, r6, lsr #3]	@ zero_extendqisi2
+	and	r1, r1, r7
+	b	.L909
+.L947:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1603
+	str	r2, [sp]
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r4, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r2, [sp]
+	b	.L906
+.L952:
+	ldr	r2, [r5, #8]
+	ldrb	r1, [r2, r6, lsr #3]	@ zero_extendqisi2
+	and	r1, r1, r7
+	b	.L909
+.L946:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1587
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r4, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L905
+.L950:
+	ldr	r3, [r2, #12]
+	ldr	r1, [r3, #48]
+	cmp	r10, r1
+	beq	.L926
+	ldr	r1, [r3, #112]
+	cmp	r10, r1
+	beq	.L926
+	ldr	r1, [r3, #176]
+	cmp	r10, r1
+	beq	.L926
+	ldr	r1, [r3, #240]
+	cmp	r10, r1
+	beq	.L926
+	ldr	r1, [r3, #304]
+	cmp	r10, r1
+	beq	.L926
+	ldr	r3, [r3, #368]
+	cmp	r10, r3
+	beq	.L926
+	ldr	r6, [r2, #8]
+	mov	r0, r10
+	ldr	r1, [r6, #32]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L926
+	ldr	r3, [r6, #84]
+	add	r3, r3, #1
+	str	r3, [r6, #84]
+.L926:
+	mov	r1, r10
+	mov	r0, r4
+	mov	r2, #6
+	bl	__remove_dirty_segment
+	b	.L928
+.L951:
+	ldr	r3, [r2, #12]
+	ldr	r1, [r3, #48]
+	cmp	fp, r1
+	beq	.L919
+	ldr	r1, [r3, #112]
+	cmp	fp, r1
+	beq	.L919
+	ldr	r1, [r3, #176]
+	cmp	fp, r1
+	beq	.L919
+	ldr	r1, [r3, #240]
+	cmp	fp, r1
+	beq	.L919
+	ldr	r1, [r3, #304]
+	cmp	fp, r1
+	beq	.L919
+	ldr	r3, [r3, #368]
+	cmp	fp, r3
+	beq	.L919
+	ldr	r6, [r2, #8]
+	mov	r0, fp
+	ldr	r1, [r6, #32]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L919
+	ldr	r3, [r6, #84]
+	add	r3, r3, #1
+	str	r3, [r6, #84]
+.L919:
+	mov	r1, fp
+	mov	r2, #6
+	mov	r0, r4
+	bl	__remove_dirty_segment
+	b	.L921
+.L922:
+	bl	__remove_dirty_segment
+	b	.L921
+.L929:
+	bl	__remove_dirty_segment
+	b	.L928
+	.fnend
+	.size	refresh_sit_entry, .-refresh_sit_entry
+	.align	2
+	.global	invalidate_blocks
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	invalidate_blocks, %function
+invalidate_blocks:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	sub	r2, r1, #1
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	cmn	r2, #3
+	mov	r6, r1
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r9, [r3]
+	bhi	.L968
+	ldr	r1, [r3, #4]
+	add	r9, r9, #40
+	mov	r10, #1
+	ldr	r3, [r3, #16]
+	mov	r0, r9
+	ldr	r2, [r4, #692]
+	ldr	fp, [r1]
+	sub	r3, r6, r3
+	rsb	r3, fp, r3, lsr r2
+	str	r3, [sp, #20]
+	bl	mutex_lock
+	ldr	r3, [r4, #28]
+	ldr	r1, [r4, #692]
+	ldr	r0, [r3, #4]
+	ldr	r2, [r3, #16]
+	ldr	r8, [r0]
+	sub	r6, r6, r2
+	rsb	r8, r8, r6, lsr r1
+	rsbs	r1, r8, #0
+	and	r0, r8, #31
+	and	r1, r1, #31
+	add	r2, r8, #31
+	rsbpl	r0, r1, #0
+	cmp	r8, #0
+	movge	r2, r8
+	add	r5, r8, r8, lsl r10
+	asr	r2, r2, #5
+	lsl	r10, r10, r0
+	lsl	fp, r2, #2
+	lsl	r1, r5, #3
+.L966:
+	ldr	r0, [r3]
+	ldr	r3, [r4, #696]
+	ldr	r5, [r0, #60]
+	sub	r0, r3, #1
+	and	r6, r6, r0
+	ldrh	r7, [r5, r1]
+	add	r5, r5, r1
+	lsr	r7, r7, #6
+	subs	r7, r7, #1
+	bmi	.L956
+	cmp	r3, r7
+	bcc	.L956
+.L957:
+	ldrh	r3, [r5]
+	bfi	r3, r7, #6, #10
+	strh	r3, [r5]	@ movhi
+	ldr	r3, [r4, #28]
+	ldr	r7, [r3]
+	ldr	r1, [r7, #72]
+	ldr	r3, [r7, #76]
+	str	r3, [sp, #12]
+	str	r1, [sp, #16]
+	bl	get_seconds
+	mvn	r3, r6
+	ldr	ip, [r7, #80]
+	ldr	lr, [r7, #84]
+	and	r3, r3, #7
+	mov	r7, #1
+	ldr	r1, [sp, #16]
+	lsl	r7, r7, r3
+	ldr	r3, [sp, #12]
+	subs	r2, r1, ip
+	mvn	ip, r7
+	sbc	r3, r3, lr
+	strd	r2, [sp]
+	ldrd	r2, [sp]
+	adds	r2, r2, r0
+	adc	r3, r3, r0, asr #31
+	mov	r0, r2
+	mov	r1, r3
+	sxtb	r3, ip
+	strd	r0, [r5, #16]
+	ldr	ip, [r4, #28]
+	ldr	ip, [ip]
+	strd	r0, [ip, #96]
+	ldr	r0, [r5, #4]
+	ldrb	r1, [r0, r6, lsr #3]	@ zero_extendqisi2
+	tst	r1, r7
+	and	r1, r1, r3
+	strb	r1, [r0, r6, lsr #3]
+	beq	.L969
+.L958:
+	ldr	r1, [r4]
+	ldr	r0, [r1, #208]
+	ldr	r0, [r0, #88]
+	ldr	r0, [r0, #500]
+	ldr	r0, [r0, #556]
+	tst	r0, #16384
+	bne	.L959
+	ldr	r1, [r1, #616]
+	ldr	r1, [r1, #8]
+	ldr	r1, [r1, #2180]	@ unaligned
+	tst	r1, #2
+	bne	.L959
+.L960:
+	ldr	r3, [r5, #8]
+	ldrb	r3, [r3, r6, lsr #3]	@ zero_extendqisi2
+	tst	r3, r7
+	bne	.L961
+	ldrh	r3, [r5, #2]
+	ubfx	r1, r3, #0, #10
+	sub	r1, r1, #1
+	bfi	r3, r1, #0, #10
+	strh	r3, [r5, #2]	@ movhi
+.L961:
+	ldr	r3, [r4, #28]
+	ldr	r1, [r3]
+	ldr	r0, [r1, #28]
+	ldr	r3, [r0, fp]
+	tst	r3, r10
+	orr	r10, r3, r10
+	str	r10, [r0, fp]
+	bne	.L962
+	ldr	r3, [r1, #32]
+	add	r3, r3, #1
+	str	r3, [r1, #32]
+.L962:
+	ldr	r3, [r4, #28]
+	ldr	r2, [r3]
+	ldr	r3, [r2, #12]
+	sub	r3, r3, #1
+	str	r3, [r2, #12]
+	ldr	r3, [r4, #700]
+	cmp	r3, #1
+	bls	.L963
+	ldr	r2, [r4, #28]
+	udiv	r8, r8, r3
+	ldr	r3, [r2]
+	ldr	r2, [r3, #64]
+	ldr	r3, [r2, r8, lsl #2]
+	sub	r3, r3, #1
+	str	r3, [r2, r8, lsl #2]
+.L963:
+	ldr	r1, [sp, #20]
+	mov	r0, r4
+	bl	locate_dirty_segment
+	mov	r0, r9
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	mutex_unlock
+.L968:
+	cmp	r1, #0
+	beq	.L970
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L959:
+	ldr	r1, [r5, #12]
+	ldrb	r0, [r1, r6, lsr #3]	@ zero_extendqisi2
+	and	r3, r3, r0
+	tst	r0, r7
+	strb	r3, [r1, r6, lsr #3]
+	beq	.L960
+	ldr	r3, [r4, #744]
+	add	r3, r3, #1
+	str	r3, [r4, #744]
+	b	.L960
+.L970:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1658
+	movt	r0, #:upper16:.LC0
+	add	r9, r9, #40
+	bl	warn_slowpath_null
+	add	r1, r4, #16
+	mov	r0, #2
+	bl	_set_bit
+	mov	r0, r9
+	mov	fp, r6
+	bl	mutex_lock
+	ldr	r3, [r4, #28]
+	mov	r10, r6
+	mvn	r2, #0
+	mov	r8, r2
+	mvn	r1, #23
+	str	r2, [sp, #20]
+	ldr	r6, [r3, #16]
+	rsb	r6, r6, #0
+	b	.L966
+.L956:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1587
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r4, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L957
+.L969:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #1624
+	str	r3, [sp]
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r4, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r3, [sp]
+	b	.L958
+	.fnend
+	.size	invalidate_blocks, .-invalidate_blocks
+	.align	2
+	.global	is_checkpointed_data
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	is_checkpointed_data, %function
+is_checkpointed_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	sub	r3, r1, #1
+	strd	r4, [sp, #-16]!
+	.save {r4, r5, r6, lr}
+	cmn	r3, #3
+	str	r6, [sp, #8]
+	str	lr, [sp, #12]
+	movhi	r4, #1
+	bhi	.L972
+	ldr	r3, [r0, #28]
+	mov	r4, r0
+	mov	r5, r1
+	ldr	r6, [r3]
+	add	r6, r6, #40
+	mov	r0, r6
+	bl	mutex_lock
+	ldr	r2, [r4, #28]
+	mov	r0, r6
+	mov	ip, #1
+	ldr	r6, [r4, #692]
+	ldr	r3, [r4, #696]
+	ldr	lr, [r2]
+	ldr	r4, [r2, #4]
+	ldr	r1, [r2, #16]
+	sub	r3, r3, #1
+	ldr	lr, [lr, #60]
+	ldr	r2, [r4]
+	sub	r1, r5, r1
+	and	r3, r3, r1
+	rsb	r1, r2, r1, lsr r6
+	mvn	r2, r3
+	and	r2, r2, #7
+	add	r1, r1, r1, lsl ip
+	add	r1, lr, r1, lsl #3
+	ldr	r1, [r1, #8]
+	ldrb	r3, [r1, r3, lsr #3]	@ zero_extendqisi2
+	ands	r3, r3, ip, lsl r2
+	movne	r4, ip
+	moveq	r4, #0
+	bl	mutex_unlock
+.L972:
+	mov	r0, r4
+	ldrd	r4, [sp]
+	ldr	r6, [sp, #8]
+	add	sp, sp, #12
+	ldr	pc, [sp], #4
+	.fnend
+	.size	is_checkpointed_data, .-is_checkpointed_data
+	.align	2
+	.global	npages_for_summary_flush
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	npages_for_summary_flush, %function
+npages_for_summary_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, [r0, #368]
+	cmp	r1, #0
+	ldrb	r3, [r2, #176]	@ zero_extendqisi2
+	bne	.L976
+	cmp	r3, #1
+	ldrb	r1, [r2, #177]	@ zero_extendqisi2
+	ldrne	r3, [r0, #28]
+	ldreq	r3, [r0, #696]
+	ldrb	r2, [r2, #178]	@ zero_extendqisi2
+	ldrne	r3, [r3, #12]
+	ldrhne	r3, [r3, #52]
+	cmp	r1, #1
+	ldrne	r1, [r0, #28]
+	ldreq	r1, [r0, #696]
+	ldrne	r1, [r1, #12]
+	ldrhne	r1, [r1, #116]
+	cmp	r2, #1
+	add	r3, r3, r1
+	beq	.L993
+	ldr	r2, [r0, #28]
+	ldr	r2, [r2, #12]
+	ldrh	r2, [r2, #180]
+	add	r3, r2, r3
+	cmp	r3, #440
+	bge	.L994
+.L991:
+	mov	r0, #1
+	bx	lr
+.L993:
+	ldr	r2, [r0, #696]
+	add	r3, r3, r2
+.L983:
+	cmp	r3, #440
+	blt	.L991
+.L994:
+	sub	r3, r3, #436
+	sub	r3, r3, #3
+	cmp	r3, #584
+	movle	r0, #2
+	movgt	r0, #3
+	bx	lr
+.L976:
+	ldrb	r1, [r2, #177]	@ zero_extendqisi2
+	cmp	r3, #1
+	ldrhne	r3, [r2, #116]	@ unaligned
+	ldreq	r3, [r0, #696]
+	cmp	r1, #1
+	ldrhne	r1, [r2, #118]	@ unaligned
+	ldreq	r1, [r0, #696]
+	add	r3, r3, r1
+	ldrb	r1, [r2, #178]	@ zero_extendqisi2
+	cmp	r1, #1
+	beq	.L993
+	ldrh	r2, [r2, #120]	@ unaligned
+	add	r3, r2, r3
+	b	.L983
+	.fnend
+	.size	npages_for_summary_flush, .-npages_for_summary_flush
+	.align	2
+	.global	get_sum_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	get_sum_page, %function
+get_sum_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, [r0, #28]
+	ldr	r3, [r3, #24]
+	add	r1, r1, r3
+	b	get_meta_page
+	.fnend
+	.size	get_sum_page, .-get_sum_page
+	.align	2
+	.global	update_meta_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	update_meta_page, %function
+update_meta_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-16]!
+	.save {r4, r5, r6, lr}
+	mov	r5, r1
+	mov	r1, r2
+	str	r6, [sp, #8]
+	str	lr, [sp, #12]
+	bl	grab_meta_page
+	mov	r4, r0
+	bl	page_address
+	cmp	r5, #0
+	beq	.L997
+	mov	r1, r5
+	mov	r2, #4096
+	bl	memcpy
+	mov	r0, r4
+	bl	set_page_dirty
+	cmp	r4, #0
+	beq	.L996
+.L1003:
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L1002
+.L1000:
+	mov	r0, r4
+	bl	unlock_page
+	ldr	r6, [sp, #8]
+	mov	r0, r4
+	ldrd	r4, [sp]
+	ldr	lr, [sp, #12]
+	add	sp, sp, #16
+	b	put_page
+.L997:
+	mov	r1, #4096
+	bl	__memzero
+	mov	r0, r4
+	bl	set_page_dirty
+	cmp	r4, #0
+	bne	.L1003
+.L996:
+	ldrd	r4, [sp]
+	ldr	r6, [sp, #8]
+	add	sp, sp, #12
+	ldr	pc, [sp], #4
+.L1002:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1000
+	.fnend
+	.size	update_meta_page, .-update_meta_page
+	.align	2
+	.global	allocate_new_segments
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	allocate_new_segments, %function
+allocate_new_segments:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-24]!
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, #0
+	strd	r6, [sp, #8]
+	mov	r6, r0
+	str	r8, [sp, #16]
+	str	lr, [sp, #20]
+.L1012:
+	ldr	ip, [r6, #28]
+	mov	r2, #1
+	mov	r1, r4
+	mov	r0, r6
+	ldr	r3, [ip, #12]
+	ldr	ip, [ip]
+	add	r3, r3, r4, lsl #6
+	ldr	ip, [ip]
+	ldr	r5, [r3, #48]
+	ldr	r3, [ip]
+	blx	r3
+	cmn	r5, #1
+	beq	.L1005
+	ldr	r2, [r6, #28]
+	ldr	r3, [r2, #12]
+	ldr	r1, [r3, #48]
+	cmp	r5, r1
+	beq	.L1005
+	ldr	r1, [r3, #112]
+	cmp	r5, r1
+	beq	.L1005
+	ldr	r1, [r3, #176]
+	cmp	r5, r1
+	beq	.L1005
+	ldr	r1, [r3, #240]
+	cmp	r5, r1
+	beq	.L1005
+	ldr	r1, [r3, #304]
+	cmp	r5, r1
+	beq	.L1005
+	ldr	r3, [r3, #368]
+	cmp	r5, r3
+	beq	.L1005
+	ldr	r7, [r2, #8]
+	add	r7, r7, #36
+	mov	r0, r7
+	bl	mutex_lock
+	ldr	r2, [r6, #28]
+	add	r3, r5, r5, lsl #1
+	lsl	r3, r3, #3
+	ldr	r1, [r2]
+	ldr	r1, [r1, #60]
+	ldrh	r3, [r1, r3]
+	lsrs	r3, r3, #6
+	beq	.L1018
+	ldr	r2, [r6, #696]
+	mov	r1, r5
+	mov	r0, r6
+	cmp	r3, r2
+	mov	r2, #6
+	bcs	.L1011
+	bl	__locate_dirty_segment
+.L1010:
+	mov	r0, r7
+	bl	mutex_unlock
+.L1005:
+	add	r4, r4, #1
+	cmp	r4, #3
+	bne	.L1012
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldr	r8, [sp, #16]
+	add	sp, sp, #20
+	ldr	pc, [sp], #4
+.L1011:
+	bl	__remove_dirty_segment
+	b	.L1010
+.L1018:
+	ldr	r3, [r2, #12]
+	ldr	r1, [r3, #48]
+	cmp	r5, r1
+	beq	.L1008
+	ldr	r1, [r3, #112]
+	cmp	r5, r1
+	beq	.L1008
+	ldr	r1, [r3, #176]
+	cmp	r5, r1
+	beq	.L1008
+	ldr	r1, [r3, #240]
+	cmp	r5, r1
+	beq	.L1008
+	ldr	r1, [r3, #304]
+	cmp	r5, r1
+	beq	.L1008
+	ldr	r3, [r3, #368]
+	cmp	r5, r3
+	beq	.L1008
+	ldr	r8, [r2, #8]
+	mov	r0, r5
+	ldr	r1, [r8, #32]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L1008
+	ldr	r3, [r8, #84]
+	add	r3, r3, #1
+	str	r3, [r8, #84]
+.L1008:
+	mov	r1, r5
+	mov	r2, #6
+	mov	r0, r6
+	bl	__remove_dirty_segment
+	b	.L1010
+	.fnend
+	.size	allocate_new_segments, .-allocate_new_segments
+	.align	2
+	.global	exist_trim_candidates
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	exist_trim_candidates, %function
+exist_trim_candidates:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	strd	r6, [sp, #8]
+	mov	r7, r1
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #12
+	sub	sp, sp, #12
+	ldrd	r0, [r1, #8]
+	strd	r0, [sp]
+	ldr	r0, [r3]
+	add	r0, r0, #40
+	bl	mutex_lock
+	ldrd	r0, [r7, #8]
+	ldrd	r8, [r7, #16]
+	cmp	r1, r9
+	cmpeq	r0, r8
+	bhi	.L1020
+.L1027:
+	ldr	lr, [r5, #28]
+	add	r3, r0, r0, lsl #1
+	ldr	r6, [r5, #696]
+	lsl	r3, r3, #3
+	ldr	ip, [lr]
+	ldr	r2, [ip, #60]
+	ldrh	r10, [r2, r3]
+	add	r3, r2, r3
+	cmp	r6, r10, lsr #6
+	beq	.L1021
+	ldr	r2, [r5]
+	ldr	r4, [r2, #208]
+	ldr	r4, [r4, #88]
+	ldr	r4, [r4, #500]
+	ldr	r4, [r4, #556]
+	tst	r4, #16384
+	bne	.L1022
+	ldr	r2, [r2, #616]
+	ldr	r2, [r2, #8]
+	ldr	r2, [r2, #2180]	@ unaligned
+	tst	r2, #2
+	beq	.L1021
+.L1022:
+	ldr	r2, [r7]
+	ldr	r4, [ip, #24]
+	ldr	ip, [r3, #8]
+	ands	r2, r2, #16
+	bne	.L1046
+	ldr	fp, [r5, #864]
+	tst	fp, #4
+	beq	.L1021
+	bic	r10, r10, #63
+	cmp	r10, #0
+	beq	.L1021
+	ldr	lr, [lr, #80]
+	add	lr, lr, #4096
+	ldr	r10, [lr, #52]
+	ldr	lr, [lr, #56]
+	cmp	r10, lr
+	bcs	.L1021
+	ldr	r3, [r3, #4]
+	ldr	r1, [ip]
+	ldr	r0, [r3]
+	bic	r1, r1, r0
+	str	r1, [r4]
+	ldr	r0, [r3, #4]
+	ldr	r1, [ip, #4]
+	bic	r1, r1, r0
+	str	r1, [r4, #4]
+	ldr	r0, [r3, #8]
+	ldr	r1, [ip, #8]
+	bic	r1, r1, r0
+	str	r1, [r4, #8]
+	ldr	r0, [r3, #12]
+	ldr	r1, [ip, #12]
+	bic	r1, r1, r0
+	str	r1, [r4, #12]
+	ldr	r0, [r3, #16]
+	ldr	r1, [ip, #16]
+	bic	r1, r1, r0
+	str	r1, [r4, #16]
+	ldr	r0, [r3, #20]
+	ldr	r1, [ip, #20]
+	bic	r1, r1, r0
+	str	r1, [r4, #20]
+	ldr	r0, [r3, #24]
+	ldr	r1, [ip, #24]
+	bic	r1, r1, r0
+	str	r1, [r4, #24]
+	ldr	r0, [r3, #28]
+	ldr	r1, [ip, #28]
+	bic	r1, r1, r0
+	str	r1, [r4, #28]
+	ldr	r0, [r3, #32]
+	ldr	r1, [ip, #32]
+	bic	r1, r1, r0
+	str	r1, [r4, #32]
+	ldr	r0, [r3, #36]
+	ldr	r1, [ip, #36]
+	bic	r1, r1, r0
+	str	r1, [r4, #36]
+	ldr	r0, [r3, #40]
+	ldr	r1, [ip, #40]
+	bic	r1, r1, r0
+	str	r1, [r4, #40]
+	ldr	r0, [r3, #44]
+	ldr	r1, [ip, #44]
+	bic	r1, r1, r0
+	str	r1, [r4, #44]
+	ldr	r0, [r3, #48]
+	ldr	r1, [ip, #48]
+	bic	r1, r1, r0
+	str	r1, [r4, #48]
+	ldr	r0, [r3, #52]
+	ldr	r1, [ip, #52]
+	bic	r1, r1, r0
+	str	r1, [r4, #52]
+	ldr	r0, [r3, #56]
+	ldr	r1, [ip, #56]
+	bic	r1, r1, r0
+	str	r1, [r4, #56]
+	ldr	r1, [r3, #60]
+	ldr	r3, [ip, #60]
+	bic	r3, r3, r1
+	str	r3, [r4, #60]
+	ldr	r8, [r5, #28]
+	ldr	r3, [r8, #80]
+	add	r3, r3, #4096
+	ldr	r1, [r3, #52]
+	ldr	r3, [r3, #56]
+	cmp	r3, r1
+	bcc	.L1024
+	mov	r1, r6
+	mov	r0, r4
+	bl	__find_rev_next_bit
+	cmp	r6, r0
+	bls	.L1024
+	add	r2, r0, #1
+	mov	r1, r6
+	mov	r0, r4
+	mov	r4, #1
+	bl	__find_rev_next_zero_bit
+	b	.L1025
+.L1024:
+	ldrd	r0, [r7, #8]
+	ldrd	r8, [r7, #16]
+.L1021:
+	adds	r0, r0, #1
+	adc	r1, r1, #0
+	cmp	r1, r9
+	cmpeq	r0, r8
+	strd	r0, [r7, #8]
+	bls	.L1027
+.L1020:
+	ldr	r8, [r5, #28]
+	mov	r4, #0
+.L1025:
+	ldr	r0, [r8]
+	add	r0, r0, #40
+	bl	mutex_unlock
+	ldrd	r2, [sp]
+	mov	r0, r4
+	strd	r2, [r7, #8]
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1046:
+	ldr	r3, [r3, #12]
+	mvn	r0, #0
+	ldr	r1, [ip]
+	ldr	r2, [r3]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4]
+	ldr	r2, [r3, #4]
+	ldr	r1, [ip, #4]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #4]
+	ldr	r1, [r3, #8]
+	ldr	r2, [ip, #8]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #8]
+	ldr	r1, [r3, #12]
+	ldr	r2, [ip, #12]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #12]
+	ldr	r1, [r3, #16]
+	ldr	r2, [ip, #16]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #16]
+	ldr	r1, [r3, #20]
+	ldr	r2, [ip, #20]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #20]
+	ldr	r1, [r3, #24]
+	ldr	r2, [ip, #24]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #24]
+	ldr	r1, [r3, #28]
+	ldr	r2, [ip, #28]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #28]
+	ldr	r1, [r3, #32]
+	ldr	r2, [ip, #32]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #32]
+	ldr	r1, [r3, #36]
+	ldr	r2, [ip, #36]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #36]
+	ldr	r2, [ip, #40]
+	ldr	r1, [r3, #40]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #40]
+	ldr	r1, [r3, #44]
+	ldr	r2, [ip, #44]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #44]
+	ldr	r1, [r3, #48]
+	ldr	r2, [ip, #48]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #48]
+	ldr	r1, [r3, #52]
+	ldr	r2, [ip, #52]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #52]
+	ldr	r1, [r3, #56]
+	ldr	r2, [ip, #56]
+	orr	r2, r2, r1
+	mvn	r2, r2
+	str	r2, [r4, #56]
+	ldr	r3, [r3, #60]
+	ldr	r1, [ip, #60]
+	orr	r3, r1, r3
+	mvn	r3, r3
+	str	r3, [r4, #60]
+.L1031:
+	add	r2, r0, #1
+	mov	r1, r6
+	mov	r0, r4
+	bl	__find_rev_next_bit
+	mov	r8, r0
+	mov	r1, r6
+	cmp	r6, r8
+	mov	r0, r4
+	add	r2, r8, #1
+	bls	.L1024
+	bl	__find_rev_next_zero_bit
+	cmp	r8, #0
+	cmpne	r6, r0
+	sub	r3, r0, r8
+	mov	r9, #0
+	beq	.L1033
+	ldrd	r10, [r7, #24]
+	cmp	r9, fp
+	cmpeq	r3, r10
+	bcc	.L1031
+.L1033:
+	mov	r4, #1
+	ldr	r8, [r5, #28]
+	b	.L1025
+	.fnend
+	.size	exist_trim_candidates, .-exist_trim_candidates
+	.align	2
+	.global	f2fs_trim_fs
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_trim_fs, %function
+f2fs_trim_fs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	lr, [r1]
+	.pad #44
+	sub	sp, sp, #44
+	ldr	ip, [r0, #28]
+	ldrd	r10, [r1, #8]
+	ldr	r5, [r1, #4]
+	lsr	r2, lr, #12
+	ldr	lr, [r0, #692]
+	ldr	r8, [ip, #16]
+	lsr	r4, r10, #12
+	ldr	r9, [ip, #28]
+	orr	r2, r2, r5, lsl #20
+	orr	r4, r4, fp, lsl #20
+	lsr	r3, r5, #12
+	lsr	r5, fp, #12
+	adds	r4, r4, r2
+	adc	r5, r5, r3
+	add	r8, r8, r9, lsl lr
+	subs	r6, r4, #1
+	mov	r9, #0
+	sbc	r7, r5, #0
+	cmp	r9, r3
+	cmpeq	r8, r2
+	bls	.L1064
+	ldr	r8, [r0, #676]
+	mov	r9, #0
+	cmp	fp, r9
+	cmpeq	r10, r8
+	bcc	.L1064
+	mov	r4, r0
+	mov	r5, r1
+	mov	r0, #0
+	mov	r1, #0
+	strd	r0, [sp, #32]
+	ldr	r0, [ip, #20]
+	mov	r1, #0
+	cmp	r1, r7
+	cmpeq	r0, r6
+	bcc	.L1049
+.L1056:
+	mov	r2, #0
+	mov	r3, r2
+	mov	r9, r2
+.L1050:
+	strd	r2, [r5, #8]
+.L1047:
+	mov	r0, r9
+	add	sp, sp, #44
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1049:
+	ldr	r8, [r4, #16]
+	ubfx	r8, r8, #2, #1
+	cmp	r8, #0
+	bne	.L1072
+	cmp	r1, r3
+	ldr	r1, [ip, #16]
+	cmpeq	r0, r2
+	movcs	r0, r8
+	bcs	.L1052
+	orrs	r0, r2, r3
+	mvneq	r0, #0
+	beq	.L1052
+	ldr	r8, [ip, #4]
+	subs	r10, r2, r1
+	rsb	r9, lr, #32
+	sbc	fp, r3, #0
+	lsr	r0, r10, lr
+	orr	r0, r0, fp, lsl r9
+	ldr	r2, [r8]
+	sub	r8, lr, #32
+	orr	r0, r0, fp, lsr r8
+	sub	r0, r0, r2
+.L1052:
+	ldr	r2, [ip, #28]
+	mov	r3, #0
+	cmp	r3, r7
+	add	r2, r1, r2, lsl lr
+	cmpeq	r2, r6
+	bls	.L1073
+	ldr	r2, [ip, #4]
+	subs	r8, r6, r1
+	rsb	r3, lr, #32
+	sbc	r9, r7, #0
+	lsr	r6, r8, lr
+	orr	r6, r6, r9, lsl r3
+	ldr	r3, [r2]
+	sub	r2, lr, #32
+	orr	r6, r6, r9, lsr r2
+	sub	r6, r6, r3
+.L1054:
+	ldr	r1, [r5, #16]
+	mov	r3, #16
+	ldr	r7, [r5, #20]
+	str	r3, [sp]
+	lsr	r1, r1, #12
+	lsr	r3, r7, #12
+	orr	r2, r1, r7, lsl #20
+	orrs	r1, r2, r3
+	moveq	r2, #1
+	moveq	r3, #0
+	cmp	r0, r6
+	strd	r2, [sp, #24]
+	bhi	.L1056
+	ldr	r2, [r4, #744]
+	mov	r8, #0
+	str	r0, [sp, #8]
+	str	r8, [sp, #12]
+	cmp	r2, r8
+	beq	.L1056
+	add	r7, r4, #868
+	b	.L1057
+.L1061:
+	bl	schedule
+	ldr	r0, [sp, #16]
+	add	r0, r0, #1
+	cmp	r6, r0
+	bcc	.L1071
+	ldr	r2, [r4, #744]
+	str	r0, [sp, #8]
+	str	r9, [sp, #12]
+	cmp	r2, #0
+	beq	.L1071
+	ldr	ip, [r4, #28]
+	ldr	lr, [r4, #692]
+.L1057:
+	ldr	r3, [ip, #48]
+	mov	ip, r6
+	ldr	r1, [r4, #700]
+	mul	r3, r3, r1
+	add	r0, r3, r0
+	cmp	r2, r3, lsl lr
+	sub	r3, r0, #1
+	bcc	.L1060
+	udiv	r2, r0, r1
+	mls	r0, r1, r2, r0
+	sub	r0, r3, r0
+	cmp	r0, r6
+	movcc	ip, r0
+	movcs	ip, r6
+.L1060:
+	mov	r0, r7
+	str	ip, [sp, #16]
+	str	r8, [sp, #20]
+	bl	mutex_lock
+	mov	r1, sp
+	mov	r0, r4
+	bl	write_checkpoint
+	mov	r9, r0
+	mov	r0, r7
+	bl	mutex_unlock
+	cmp	r9, #0
+	beq	.L1061
+.L1071:
+	ldr	r1, [sp, #32]
+	ldr	r3, [sp, #36]
+	lsl	r2, r1, #12
+	lsl	r3, r3, #12
+	orr	r3, r3, r1, lsr #20
+	b	.L1050
+.L1073:
+	ldr	r6, [ip, #32]
+	sub	r6, r6, #1
+	b	.L1054
+.L1072:
+	movw	r2, #:lower16:.LC11
+	movw	r1, #:lower16:.LC12
+	ldr	r0, [r4]
+	movt	r2, #:upper16:.LC11
+	movt	r1, #:upper16:.LC12
+	bl	f2fs_msg
+	ldr	r1, [sp, #32]
+	mov	r9, #0
+	ldr	r3, [sp, #36]
+	lsl	r2, r1, #12
+	lsl	r3, r3, #12
+	orr	r3, r3, r1, lsr #20
+	b	.L1050
+.L1064:
+	mvn	r9, #21
+	b	.L1047
+	.fnend
+	.size	f2fs_trim_fs, .-f2fs_trim_fs
+	.align	2
+	.global	allocate_data_block
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	allocate_data_block, %function
+allocate_data_block:
+	.fnstart
+	@ args = 8, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	mov	r9, r3
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	.pad #12
+	sub	sp, sp, #12
+	ldr	fp, [sp, #48]
+	stm	sp, {r1, r2}
+	ldr	r1, [r0, #28]
+	ldr	r7, [sp, #52]
+	ldr	r10, [r1]
+	ldr	r5, [r1, #12]
+	lsl	r6, r7, #6
+	add	r8, r10, #40
+	add	r5, r5, r6
+	mov	r0, r5
+	bl	mutex_lock
+	mov	r0, r8
+	bl	mutex_lock
+	ldr	r1, [r4, #28]
+	mov	r0, r4
+	ldrh	r3, [r5, #52]
+	ldr	ip, [r5, #48]
+	ldr	lr, [r4, #692]
+	ldr	r2, [r1, #4]
+	ldr	r1, [r1, #16]
+	ldr	r2, [r2]
+	add	r3, r3, r1
+	add	r2, r2, ip
+	add	r3, r3, r2, lsl lr
+	mov	r1, r3
+	str	r3, [r9]
+	bl	f2fs_wait_discard_bio
+	ldr	r3, [r4, #28]
+	ldr	r1, [fp]	@ unaligned
+	ldr	r2, [r3, #12]
+	add	r2, r2, r6
+	ldrh	r3, [r2, #52]
+	ldr	r2, [r2, #20]
+	rsb	r3, r3, r3, lsl #3
+	add	r0, r2, r3
+	str	r1, [r2, r3]	@ unaligned
+	ldrb	r3, [fp, #6]	@ zero_extendqisi2
+	ldrh	r2, [fp, #4]	@ unaligned
+	strh	r2, [r0, #4]	@ unaligned
+	strb	r3, [r0, #6]
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	cmp	r3, #1
+	beq	.L1087
+	ldrh	r2, [r5, #52]
+	add	r2, r2, #1
+	strh	r2, [r5, #52]	@ movhi
+.L1076:
+	add	r3, r4, r3, lsl #2
+	ldr	r2, [r3, #920]
+	add	r2, r2, #1
+	str	r2, [r3, #920]
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #696]
+	ldr	r3, [r3, #12]
+	add	r6, r3, r6
+	ldrh	r3, [r6, #52]
+	cmp	r3, r2
+	bcc	.L1077
+	ldr	r3, [r10]
+	mov	r2, #0
+	mov	r1, r7
+	mov	r0, r4
+	ldr	r3, [r3]
+	blx	r3
+.L1077:
+	mov	r0, r4
+	ldr	r2, [r9]
+	ldr	r1, [sp, #4]
+	bl	refresh_sit_entry
+	mov	r0, r8
+	bl	mutex_unlock
+	ldr	r3, [sp]
+	cmp	r3, #0
+	cmpne	r7, #2
+	bgt	.L1088
+.L1078:
+	mov	r0, r5
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	mutex_unlock
+.L1088:
+	mov	r0, r3
+	ldr	r3, [r3, #4]
+	ldr	r2, [r4, #28]
+	ldr	r1, [r4, #692]
+	ldr	ip, [r5, #48]
+	ldr	r6, [r3]
+	ldr	r3, [r2, #4]
+	ldr	lr, [r2, #16]
+	ldrh	r4, [r5, #52]
+	ldr	r2, [r6, #28]
+	ldr	r3, [r3]
+	add	r4, r4, lr
+	ldr	r2, [r2, #616]
+	add	r3, r3, ip
+	add	r4, r4, r3, lsl r1
+	ldr	r6, [r2, #368]
+	bl	page_address
+	ldr	r1, [r6, #132]	@ unaligned
+	ldr	r2, [r6]	@ unaligned
+	ldr	r3, [r6, #4]	@ unaligned
+	tst	r1, #64
+	beq	.L1079
+	ldr	r1, [r6, #164]	@ unaligned
+	ldr	r1, [r6, r1]
+	orr	r3, r1, r3
+.L1079:
+	str	r2, [r0, #4084]	@ unaligned
+	str	r3, [r0, #4088]	@ unaligned
+	str	r4, [r0, #4092]	@ unaligned
+	b	.L1078
+.L1087:
+	ldr	r3, [r4, #28]
+	ldr	ip, [r5, #48]
+	ldrh	r2, [r5, #52]
+	ldr	r3, [r3]
+	add	r1, ip, ip, lsl #1
+	add	r2, r2, #1
+	ldr	ip, [r3, #60]
+	ldr	r3, [r3, #24]
+	add	ip, ip, r1, lsl #3
+	mov	r0, r3
+	ldmib	ip, {r1, ip}
+	ldr	fp, [ip]
+	ldr	lr, [r1]
+	orr	lr, lr, fp
+	str	lr, [r3]
+	ldr	fp, [r1, #4]
+	ldr	lr, [ip, #4]
+	orr	lr, lr, fp
+	str	lr, [r3, #4]
+	ldr	fp, [r1, #8]
+	ldr	lr, [ip, #8]
+	orr	lr, lr, fp
+	str	lr, [r3, #8]
+	ldr	fp, [r1, #12]
+	ldr	lr, [ip, #12]
+	orr	lr, lr, fp
+	str	lr, [r3, #12]
+	ldr	fp, [r1, #16]
+	ldr	lr, [ip, #16]
+	orr	lr, lr, fp
+	str	lr, [r3, #16]
+	ldr	fp, [r1, #20]
+	ldr	lr, [ip, #20]
+	orr	lr, lr, fp
+	str	lr, [r3, #20]
+	ldr	fp, [r1, #24]
+	ldr	lr, [ip, #24]
+	orr	lr, lr, fp
+	str	lr, [r3, #24]
+	ldr	fp, [r1, #28]
+	ldr	lr, [ip, #28]
+	orr	lr, lr, fp
+	str	lr, [r3, #28]
+	ldr	lr, [ip, #32]
+	ldr	fp, [r1, #32]
+	orr	lr, lr, fp
+	str	lr, [r3, #32]
+	ldr	fp, [r1, #36]
+	ldr	lr, [ip, #36]
+	orr	lr, lr, fp
+	str	lr, [r3, #36]
+	ldr	fp, [r1, #40]
+	ldr	lr, [ip, #40]
+	orr	lr, lr, fp
+	str	lr, [r3, #40]
+	ldr	fp, [r1, #44]
+	ldr	lr, [ip, #44]
+	orr	lr, lr, fp
+	str	lr, [r3, #44]
+	ldr	fp, [r1, #48]
+	ldr	lr, [ip, #48]
+	orr	lr, lr, fp
+	str	lr, [r3, #48]
+	ldr	fp, [r1, #52]
+	ldr	lr, [ip, #52]
+	orr	lr, lr, fp
+	str	lr, [r3, #52]
+	ldr	fp, [r1, #56]
+	ldr	lr, [ip, #56]
+	orr	lr, lr, fp
+	str	lr, [r3, #56]
+	ldr	ip, [ip, #60]
+	ldr	r1, [r1, #60]
+	orr	r1, ip, r1
+	str	r1, [r3, #60]
+	ldr	r1, [r4, #696]
+	bl	__find_rev_next_zero_bit
+	strh	r0, [r5, #52]	@ movhi
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	b	.L1076
+	.fnend
+	.size	allocate_data_block, .-allocate_data_block
+	.align	2
+	.global	write_meta_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	write_meta_page, %function
+write_meta_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-12]!
+	.save {r4, r5, lr}
+	ldr	r3, [r1, #8]
+	mov	r4, #0
+	str	lr, [sp, #8]
+	ldr	r2, [r0, #28]
+	.pad #44
+	sub	sp, sp, #44
+	mov	r5, #0
+	mov	lr, #2
+	mov	ip, #1
+	str	r1, [sp, #28]
+	str	r3, [sp, #24]
+	stmib	sp, {r0, lr}
+	mov	r0, #624
+	strd	r4, [sp, #32]
+	ldr	r2, [r2, #20]
+	str	ip, [sp, #12]
+	str	r3, [sp, #20]
+	str	r0, [sp, #16]
+	mov	r0, r1
+	cmp	r3, r2
+	movcs	r3, #592
+	strcs	r3, [sp, #16]
+	bl	test_set_page_writeback
+	add	r0, sp, #4
+	bl	f2fs_submit_page_mbio
+	add	sp, sp, #44
+	@ sp needed
+	ldrd	r4, [sp]
+	add	sp, sp, #8
+	ldr	pc, [sp], #4
+	.fnend
+	.size	write_meta_page, .-write_meta_page
+	.align	2
+	.global	write_node_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	write_node_page, %function
+write_node_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	mov	r6, r1
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, [r1, #4]
+	ldr	r5, [r1, #24]
+	str	r0, [sp, #8]
+	ldr	r3, [r5, #4]
+	ldr	r3, [r3]
+	ldr	r2, [r3, #28]
+	ldr	r2, [r2, #616]
+	ldr	r2, [r2, #728]
+	cmp	r2, #2
+	str	r2, [sp, #4]
+	beq	.L1094
+	cmp	r2, #4
+	bne	.L1147
+	cmp	r4, #0
+	bne	.L1098
+	ldrh	r3, [r3]
+	and	r3, r3, #61440
+	cmp	r3, #16384
+	moveq	r3, r4
+	movne	r3, #2
+	moveq	r7, r4
+	movne	r7, #128
+	str	r3, [sp, #4]
+.L1096:
+	mov	r3, #0
+	str	r3, [sp, #12]
+.L1118:
+	add	r3, r4, r4, lsl #2
+	ldr	r0, [r6]
+	lsl	r3, r3, #2
+	add	r3, r3, #320
+	add	r0, r0, r3
+	bl	mutex_lock
+.L1109:
+	ldr	fp, [r6, #20]
+	b	.L1116
+.L1113:
+	mov	r0, r5
+	bl	mutex_unlock
+	mov	r0, r6
+	bl	f2fs_submit_page_mbio
+	cmn	r0, #11
+	bne	.L1115
+	ldr	fp, [r6, #16]
+	str	fp, [r6, #20]
+.L1116:
+	ldr	r4, [r6]
+	ldr	r3, [r6, #24]
+	str	r3, [sp]
+	ldr	r3, [r4, #28]
+	ldr	r9, [r3]
+	ldr	r5, [r3, #12]
+	add	r8, r9, #40
+	add	r5, r5, r7
+	mov	r0, r5
+	bl	mutex_lock
+	mov	r0, r8
+	bl	mutex_lock
+	ldr	r3, [r4, #28]
+	mov	r0, r4
+	ldrh	r1, [r5, #52]
+	ldr	ip, [r5, #48]
+	ldr	lr, [r4, #692]
+	ldr	r2, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r2, [r2]
+	add	r3, r1, r3
+	add	r2, r2, ip
+	add	lr, r3, r2, lsl lr
+	mov	r1, lr
+	str	lr, [r6, #16]
+	bl	f2fs_wait_discard_bio
+	ldr	r3, [r4, #28]
+	mov	r1, #0	@ movhi
+	ldr	ip, [sp, #8]
+	ldr	r2, [r3, #12]
+	add	r2, r2, r7
+	ldrh	r3, [r2, #52]
+	ldr	r0, [r2, #20]
+	rsb	r3, r3, r3, lsl #3
+	add	r2, r0, r3
+	str	ip, [r0, r3]	@ unaligned
+	mov	r3, #0
+	strb	r3, [r2, #4]
+	strh	r1, [r2, #5]	@ unaligned
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	cmp	r3, #1
+	beq	.L1148
+	ldrh	r2, [r5, #52]
+	add	r2, r2, #1
+	strh	r2, [r5, #52]	@ movhi
+.L1111:
+	add	r3, r4, r3, lsl #2
+	ldr	r2, [r3, #920]
+	add	r2, r2, #1
+	str	r2, [r3, #920]
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #696]
+	ldr	r3, [r3, #12]
+	add	r3, r3, r7
+	ldrh	r3, [r3, #52]
+	cmp	r3, r2
+	bcc	.L1112
+	ldr	r3, [r9]
+	mov	r2, #0
+	mov	r0, r4
+	ldr	r1, [sp, #4]
+	ldr	r3, [r3]
+	blx	r3
+.L1112:
+	ldr	r2, [r6, #16]
+	mov	r1, fp
+	mov	r0, r4
+	bl	refresh_sit_entry
+	mov	r0, r8
+	bl	mutex_unlock
+	ldr	r2, [sp]
+	ldr	r3, [sp, #12]
+	cmp	r2, #0
+	moveq	r3, #0
+	cmp	r3, #0
+	beq	.L1113
+	ldr	r3, [r2, #4]
+	mov	r0, r2
+	ldr	r2, [r4, #28]
+	ldr	r1, [r4, #692]
+	ldr	ip, [r5, #48]
+	ldr	r8, [r3]
+	ldr	r3, [r2, #4]
+	ldr	lr, [r2, #16]
+	ldrh	r4, [r5, #52]
+	ldr	r2, [r8, #28]
+	ldr	r3, [r3]
+	add	r4, r4, lr
+	ldr	r2, [r2, #616]
+	add	r3, r3, ip
+	add	r4, r4, r3, lsl r1
+	ldr	r8, [r2, #368]
+	bl	page_address
+	ldr	r1, [r8, #132]	@ unaligned
+	ldr	r2, [r8]	@ unaligned
+	ldr	r3, [r8, #4]	@ unaligned
+	tst	r1, #64
+	beq	.L1114
+	ldr	r1, [r8, #164]	@ unaligned
+	ldr	r1, [r8, r1]
+	orr	r3, r1, r3
+.L1114:
+	str	r2, [r0, #4084]	@ unaligned
+	str	r3, [r0, #4088]	@ unaligned
+	str	r4, [r0, #4092]	@ unaligned
+	b	.L1113
+.L1147:
+	cmp	r2, #6
+	bne	.L1149
+.L1103:
+	cmp	r4, #0
+	bne	.L1104
+	ldr	r3, [r5]
+	ldr	r4, [r6, #4]
+	ubfx	r3, r3, #8, #1
+	cmp	r3, #0
+	bne	.L1121
+	ldr	r2, [r5, #4]
+	ldr	r1, [r2]
+	ldrb	r2, [r1, #340]	@ zero_extendqisi2
+	ands	r2, r2, #1
+	bne	.L1122
+	ldr	r3, [r1, #356]
+	str	r2, [sp, #12]
+	mvn	r3, r3, lsr #24
+	and	r3, r3, #1
+	lsl	r7, r3, #6
+	str	r3, [sp, #4]
+.L1097:
+	cmp	r4, #1
+	bhi	.L1109
+	b	.L1118
+.L1148:
+	ldr	r3, [r4, #28]
+	ldr	ip, [r5, #48]
+	ldrh	r2, [r5, #52]
+	ldr	r3, [r3]
+	add	r1, ip, ip, lsl #1
+	add	r2, r2, #1
+	ldr	ip, [r3, #60]
+	ldr	r3, [r3, #24]
+	add	ip, ip, r1, lsl #3
+	mov	r0, r3
+	ldmib	ip, {r1, ip}
+	ldr	r10, [r1]
+	ldr	lr, [ip]
+	orr	lr, lr, r10
+	str	lr, [r3]
+	ldr	r10, [r1, #4]
+	ldr	lr, [ip, #4]
+	orr	lr, lr, r10
+	str	lr, [r3, #4]
+	ldr	r10, [r1, #8]
+	ldr	lr, [ip, #8]
+	orr	lr, lr, r10
+	str	lr, [r3, #8]
+	ldr	r10, [r1, #12]
+	ldr	lr, [ip, #12]
+	orr	lr, lr, r10
+	str	lr, [r3, #12]
+	ldr	r10, [r1, #16]
+	ldr	lr, [ip, #16]
+	orr	lr, lr, r10
+	str	lr, [r3, #16]
+	ldr	r10, [r1, #20]
+	ldr	lr, [ip, #20]
+	orr	lr, lr, r10
+	str	lr, [r3, #20]
+	ldr	r10, [r1, #24]
+	ldr	lr, [ip, #24]
+	orr	lr, lr, r10
+	str	lr, [r3, #24]
+	ldr	r10, [r1, #28]
+	ldr	lr, [ip, #28]
+	orr	lr, lr, r10
+	str	lr, [r3, #28]
+	ldr	lr, [ip, #32]
+	ldr	r10, [r1, #32]
+	orr	lr, lr, r10
+	str	lr, [r3, #32]
+	ldr	r10, [r1, #36]
+	ldr	lr, [ip, #36]
+	orr	lr, lr, r10
+	str	lr, [r3, #36]
+	ldr	r10, [r1, #40]
+	ldr	lr, [ip, #40]
+	orr	lr, lr, r10
+	str	lr, [r3, #40]
+	ldr	r10, [r1, #44]
+	ldr	lr, [ip, #44]
+	orr	lr, lr, r10
+	str	lr, [r3, #44]
+	ldr	r10, [r1, #48]
+	ldr	lr, [ip, #48]
+	orr	lr, lr, r10
+	str	lr, [r3, #48]
+	ldr	r10, [r1, #52]
+	ldr	lr, [ip, #52]
+	orr	lr, lr, r10
+	str	lr, [r3, #52]
+	ldr	r10, [r1, #56]
+	ldr	lr, [ip, #56]
+	orr	lr, lr, r10
+	str	lr, [r3, #56]
+	ldr	ip, [ip, #60]
+	ldr	r1, [r1, #60]
+	orr	r1, ip, r1
+	str	r1, [r3, #60]
+	ldr	r1, [r4, #696]
+	bl	__find_rev_next_zero_bit
+	strh	r0, [r5, #52]	@ movhi
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	b	.L1111
+.L1115:
+	ldr	r3, [r6, #4]
+	cmp	r3, #1
+	bls	.L1150
+	add	sp, sp, #20
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1094:
+	cmp	r4, #0
+	moveq	r7, r4
+	streq	r4, [sp, #4]
+	beq	.L1096
+	mov	r3, #1
+	mov	r7, #192
+	str	r3, [sp, #12]
+	mov	r3, #3
+	str	r3, [sp, #4]
+	b	.L1097
+.L1150:
+	add	r3, r3, r3, lsl #2
+	ldr	r0, [r6]
+	lsl	r3, r3, #2
+	add	r3, r3, #320
+	add	r0, r0, r3
+	add	sp, sp, #20
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	mutex_unlock
+.L1121:
+	mov	r3, #0
+	mov	r7, #128
+	str	r3, [sp, #12]
+	mov	r3, #2
+	str	r3, [sp, #4]
+	b	.L1097
+.L1104:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	lsr	r3, r3, #3
+	cmn	r3, #-536870911
+	beq	.L1105
+	movw	r2, #1022
+	movw	r1, #2041
+	cmp	r3, r2
+	cmpne	r3, #3
+	moveq	r2, #1
+	movne	r2, #0
+	cmp	r3, r1
+	orreq	r2, r2, #1
+	cmp	r2, #0
+	bne	.L1107
+	cmp	r3, r1
+	bls	.L1105
+	sub	r3, r3, #2032
+	movw	r1, #12863
+	sub	r3, r3, #10
+	movt	r1, 8232
+	asr	r2, r3, #31
+	movw	r0, #1019
+	smull	ip, r1, r1, r3
+	rsb	r2, r2, r1, asr #7
+	mls	r3, r0, r2, r3
+	cmp	r3, #0
+	beq	.L1107
+.L1105:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	ldr	r4, [r6, #4]
+	tst	r3, #1
+	mov	r3, #1
+	movne	r7, #256
+	moveq	r7, #192
+	str	r3, [sp, #12]
+	movne	r3, #4
+	moveq	r3, #3
+	str	r3, [sp, #4]
+	b	.L1097
+.L1098:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	lsr	r3, r3, #3
+	cmn	r3, #-536870911
+	beq	.L1099
+	movw	r2, #1022
+	movw	r1, #2041
+	cmp	r3, r2
+	cmpne	r3, #3
+	moveq	r2, #1
+	movne	r2, #0
+	cmp	r3, r1
+	orreq	r2, r2, #1
+	cmp	r2, #0
+	bne	.L1107
+	cmp	r3, r1
+	bls	.L1099
+	sub	r3, r3, #2032
+	movw	r1, #12863
+	sub	r3, r3, #10
+	movt	r1, 8232
+	asr	r2, r3, #31
+	movw	r0, #1019
+	smull	ip, r1, r1, r3
+	rsb	r2, r2, r1, asr #7
+	mls	r3, r0, r2, r3
+	cmp	r3, #0
+	beq	.L1107
+.L1099:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	ldr	r4, [r6, #4]
+	tst	r3, #1
+	mov	r3, #1
+	movne	r7, #256
+	str	r3, [sp, #12]
+	bne	.L1097
+.L1146:
+	mov	r3, #5
+	mov	r7, #320
+	str	r3, [sp, #4]
+	b	.L1097
+.L1107:
+	mov	r3, #1
+	ldr	r4, [r6, #4]
+	str	r3, [sp, #12]
+	b	.L1146
+.L1122:
+	str	r3, [sp, #12]
+	mov	r3, #2
+	mov	r7, #128
+	str	r3, [sp, #4]
+	b	.L1097
+.L1149:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #2237
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	ldr	r3, [r5, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1103
+	.fnend
+	.size	write_node_page, .-write_node_page
+	.align	2
+	.global	write_data_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	write_data_page, %function
+write_data_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	mov	r6, r1
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #24]
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r4, [r1]
+	str	r0, [sp, #28]
+	cmp	r3, #0
+	beq	.L1208
+.L1152:
+	mov	r0, r4
+	ldr	r4, [sp, #28]
+	add	r2, sp, #32
+	ldr	r1, [r4, #12]
+	bl	get_node_info
+	mov	r3, r4
+	ldr	r5, [r6, #24]
+	ldrh	r3, [r3, #16]
+	ldr	r2, [r4, #12]
+	ldr	r4, [r6, #4]
+	str	r3, [sp, #20]
+	ldr	r3, [r5, #4]
+	str	r2, [sp, #12]
+	ldrb	r2, [sp, #44]	@ zero_extendqisi2
+	ldr	r3, [r3]
+	str	r2, [sp, #16]
+	ldr	r2, [r3, #28]
+	ldr	r2, [r2, #616]
+	ldr	r2, [r2, #728]
+	cmp	r2, #2
+	str	r2, [sp, #8]
+	beq	.L1154
+	cmp	r2, #4
+	bne	.L1209
+	cmp	r4, #0
+	bne	.L1158
+	ldrh	r3, [r3]
+	and	r3, r3, #61440
+	cmp	r3, #16384
+	moveq	r3, r4
+	movne	r3, #2
+	moveq	r7, r4
+	movne	r7, #128
+	str	r3, [sp, #8]
+.L1156:
+	mov	r3, #0
+	str	r3, [sp, #24]
+.L1178:
+	add	r3, r4, r4, lsl #2
+	ldr	r0, [r6]
+	lsl	r3, r3, #2
+	add	r3, r3, #320
+	add	r0, r0, r3
+	bl	mutex_lock
+.L1169:
+	ldr	fp, [r6, #20]
+	b	.L1176
+.L1173:
+	mov	r0, r5
+	bl	mutex_unlock
+	mov	r0, r6
+	bl	f2fs_submit_page_mbio
+	cmn	r0, #11
+	bne	.L1175
+	ldr	fp, [r6, #16]
+	str	fp, [r6, #20]
+.L1176:
+	ldr	r4, [r6]
+	ldr	r3, [r6, #24]
+	str	r3, [sp, #4]
+	ldr	r3, [r4, #28]
+	ldr	r9, [r3]
+	ldr	r5, [r3, #12]
+	add	r8, r9, #40
+	add	r5, r5, r7
+	mov	r0, r5
+	bl	mutex_lock
+	mov	r0, r8
+	bl	mutex_lock
+	ldr	r3, [r4, #28]
+	mov	r0, r4
+	ldrh	r1, [r5, #52]
+	ldr	ip, [r5, #48]
+	ldr	lr, [r4, #692]
+	ldr	r2, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r2, [r2]
+	add	r3, r1, r3
+	add	r2, r2, ip
+	add	lr, r3, r2, lsl lr
+	mov	r1, lr
+	str	lr, [r6, #16]
+	bl	f2fs_wait_discard_bio
+	ldr	r3, [r4, #28]
+	ldr	r0, [sp, #12]
+	ldr	r2, [r3, #12]
+	add	r2, r2, r7
+	ldrh	r3, [r2, #52]
+	ldr	r1, [r2, #20]
+	rsb	r3, r3, r3, lsl #3
+	add	r2, r1, r3
+	str	r0, [r1, r3]	@ unaligned
+	ldr	r3, [sp, #16]
+	strb	r3, [r2, #4]
+	ldr	r3, [sp, #20]
+	strh	r3, [r2, #5]	@ unaligned
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	cmp	r3, #1
+	beq	.L1210
+	ldrh	r2, [r5, #52]
+	add	r2, r2, #1
+	strh	r2, [r5, #52]	@ movhi
+.L1171:
+	add	r3, r4, r3, lsl #2
+	ldr	r2, [r3, #920]
+	add	r2, r2, #1
+	str	r2, [r3, #920]
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #696]
+	ldr	r3, [r3, #12]
+	add	r3, r3, r7
+	ldrh	r3, [r3, #52]
+	cmp	r3, r2
+	bcc	.L1172
+	ldr	r3, [r9]
+	mov	r2, #0
+	mov	r0, r4
+	ldr	r1, [sp, #8]
+	ldr	r3, [r3]
+	blx	r3
+.L1172:
+	ldr	r2, [r6, #16]
+	mov	r1, fp
+	mov	r0, r4
+	bl	refresh_sit_entry
+	mov	r0, r8
+	bl	mutex_unlock
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #24]
+	cmp	r2, #0
+	moveq	r3, #0
+	cmp	r3, #0
+	beq	.L1173
+	ldr	r3, [r2, #4]
+	mov	r0, r2
+	ldr	r2, [r4, #28]
+	ldrh	lr, [r5, #52]
+	ldr	r8, [r5, #48]
+	ldr	ip, [r3]
+	ldr	r3, [r2, #4]
+	ldr	r2, [r2, #16]
+	ldr	r1, [r4, #692]
+	ldr	ip, [ip, #28]
+	ldr	r3, [r3]
+	add	r2, lr, r2
+	ldr	ip, [ip, #616]
+	add	r8, r3, r8
+	add	r8, r2, r8, lsl r1
+	ldr	r4, [ip, #368]
+	bl	page_address
+	ldr	r1, [r4, #132]	@ unaligned
+	ldr	r2, [r4]	@ unaligned
+	ldr	r3, [r4, #4]	@ unaligned
+	tst	r1, #64
+	beq	.L1174
+	ldr	r1, [r4, #164]	@ unaligned
+	ldr	r1, [r4, r1]
+	orr	r3, r1, r3
+.L1174:
+	str	r2, [r0, #4084]	@ unaligned
+	str	r3, [r0, #4088]	@ unaligned
+	str	r8, [r0, #4092]	@ unaligned
+	b	.L1173
+.L1209:
+	cmp	r2, #6
+	bne	.L1211
+.L1163:
+	cmp	r4, #0
+	bne	.L1164
+	ldr	r3, [r5]
+	ldr	r4, [r6, #4]
+	ubfx	r3, r3, #8, #1
+	cmp	r3, #0
+	bne	.L1181
+	ldr	r2, [r5, #4]
+	ldr	r1, [r2]
+	ldrb	r2, [r1, #340]	@ zero_extendqisi2
+	ands	r2, r2, #1
+	bne	.L1182
+	ldr	r3, [r1, #356]
+	str	r2, [sp, #24]
+	mvn	r3, r3, lsr #24
+	and	r3, r3, #1
+	lsl	r7, r3, #6
+	str	r3, [sp, #8]
+.L1157:
+	cmp	r4, #1
+	bhi	.L1169
+	b	.L1178
+.L1210:
+	ldr	r3, [r4, #28]
+	ldr	ip, [r5, #48]
+	ldrh	r2, [r5, #52]
+	ldr	r3, [r3]
+	add	r1, ip, ip, lsl #1
+	add	r2, r2, #1
+	ldr	ip, [r3, #60]
+	ldr	r3, [r3, #24]
+	add	ip, ip, r1, lsl #3
+	mov	r0, r3
+	ldmib	ip, {r1, ip}
+	ldr	r10, [r1]
+	ldr	lr, [ip]
+	orr	lr, lr, r10
+	str	lr, [r3]
+	ldr	r10, [r1, #4]
+	ldr	lr, [ip, #4]
+	orr	lr, lr, r10
+	str	lr, [r3, #4]
+	ldr	r10, [r1, #8]
+	ldr	lr, [ip, #8]
+	orr	lr, lr, r10
+	str	lr, [r3, #8]
+	ldr	r10, [r1, #12]
+	ldr	lr, [ip, #12]
+	orr	lr, lr, r10
+	str	lr, [r3, #12]
+	ldr	r10, [r1, #16]
+	ldr	lr, [ip, #16]
+	orr	lr, lr, r10
+	str	lr, [r3, #16]
+	ldr	r10, [r1, #20]
+	ldr	lr, [ip, #20]
+	orr	lr, lr, r10
+	str	lr, [r3, #20]
+	ldr	r10, [r1, #24]
+	ldr	lr, [ip, #24]
+	orr	lr, lr, r10
+	str	lr, [r3, #24]
+	ldr	r10, [r1, #28]
+	ldr	lr, [ip, #28]
+	orr	lr, lr, r10
+	str	lr, [r3, #28]
+	ldr	lr, [ip, #32]
+	ldr	r10, [r1, #32]
+	orr	lr, lr, r10
+	str	lr, [r3, #32]
+	ldr	r10, [r1, #36]
+	ldr	lr, [ip, #36]
+	orr	lr, lr, r10
+	str	lr, [r3, #36]
+	ldr	r10, [r1, #40]
+	ldr	lr, [ip, #40]
+	orr	lr, lr, r10
+	str	lr, [r3, #40]
+	ldr	r10, [r1, #44]
+	ldr	lr, [ip, #44]
+	orr	lr, lr, r10
+	str	lr, [r3, #44]
+	ldr	r10, [r1, #48]
+	ldr	lr, [ip, #48]
+	orr	lr, lr, r10
+	str	lr, [r3, #48]
+	ldr	r10, [r1, #52]
+	ldr	lr, [ip, #52]
+	orr	lr, lr, r10
+	str	lr, [r3, #52]
+	ldr	r10, [r1, #56]
+	ldr	lr, [ip, #56]
+	orr	lr, lr, r10
+	str	lr, [r3, #56]
+	ldr	ip, [ip, #60]
+	ldr	r1, [r1, #60]
+	orr	r1, ip, r1
+	str	r1, [r3, #60]
+	ldr	r1, [r4, #696]
+	bl	__find_rev_next_zero_bit
+	strh	r0, [r5, #52]	@ movhi
+	ldrb	r3, [r5, #44]	@ zero_extendqisi2
+	b	.L1171
+.L1175:
+	ldr	r3, [r6, #4]
+	cmp	r3, #1
+	bls	.L1212
+.L1177:
+	ldr	r1, [r6, #16]
+	ldr	r0, [sp, #28]
+	bl	f2fs_update_data_blkaddr
+	add	sp, sp, #52
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1154:
+	cmp	r4, #0
+	moveq	r7, r4
+	streq	r4, [sp, #8]
+	beq	.L1156
+	mov	r3, #1
+	mov	r7, #192
+	str	r3, [sp, #24]
+	mov	r3, #3
+	str	r3, [sp, #8]
+	b	.L1157
+.L1212:
+	add	r3, r3, r3, lsl #2
+	ldr	r0, [r6]
+	lsl	r3, r3, #2
+	add	r3, r3, #320
+	add	r0, r0, r3
+	bl	mutex_unlock
+	b	.L1177
+.L1181:
+	mov	r3, #0
+	mov	r7, #128
+	str	r3, [sp, #24]
+	mov	r3, #2
+	str	r3, [sp, #8]
+	b	.L1157
+.L1164:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	lsr	r3, r3, #3
+	cmn	r3, #-536870911
+	beq	.L1165
+	movw	r2, #1022
+	movw	r1, #2041
+	cmp	r3, r2
+	cmpne	r3, #3
+	moveq	r2, #1
+	movne	r2, #0
+	cmp	r3, r1
+	orreq	r2, r2, #1
+	cmp	r2, #0
+	bne	.L1167
+	cmp	r3, r1
+	bls	.L1165
+	sub	r3, r3, #2032
+	movw	r1, #12863
+	sub	r3, r3, #10
+	movt	r1, 8232
+	asr	r2, r3, #31
+	movw	r0, #1019
+	smull	ip, r1, r1, r3
+	rsb	r2, r2, r1, asr #7
+	mls	r3, r0, r2, r3
+	cmp	r3, #0
+	beq	.L1167
+.L1165:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	ldr	r4, [r6, #4]
+	tst	r3, #1
+	mov	r3, #1
+	movne	r7, #256
+	moveq	r7, #192
+	str	r3, [sp, #24]
+	movne	r3, #4
+	moveq	r3, #3
+	str	r3, [sp, #8]
+	b	.L1157
+.L1158:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	lsr	r3, r3, #3
+	cmn	r3, #-536870911
+	beq	.L1159
+	movw	r2, #1022
+	movw	r1, #2041
+	cmp	r3, r2
+	cmpne	r3, #3
+	moveq	r2, #1
+	movne	r2, #0
+	cmp	r3, r1
+	orreq	r2, r2, #1
+	cmp	r2, #0
+	bne	.L1167
+	cmp	r3, r1
+	bls	.L1159
+	sub	r3, r3, #2032
+	movw	r1, #12863
+	sub	r3, r3, #10
+	movt	r1, 8232
+	asr	r2, r3, #31
+	movw	r0, #1019
+	smull	ip, r1, r1, r3
+	rsb	r2, r2, r1, asr #7
+	mls	r3, r0, r2, r3
+	cmp	r3, #0
+	beq	.L1167
+.L1159:
+	mov	r0, r5
+	bl	page_address
+	ldr	r3, [r0, #4080]	@ unaligned
+	ldr	r4, [r6, #4]
+	tst	r3, #1
+	mov	r3, #1
+	movne	r7, #256
+	str	r3, [sp, #24]
+	bne	.L1157
+.L1207:
+	mov	r3, #5
+	mov	r7, #320
+	str	r3, [sp, #8]
+	b	.L1157
+.L1208:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #2338
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, r4, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L1152
+.L1167:
+	mov	r3, #1
+	ldr	r4, [r6, #4]
+	str	r3, [sp, #24]
+	b	.L1207
+.L1182:
+	str	r3, [sp, #24]
+	mov	r3, #2
+	mov	r7, #128
+	str	r3, [sp, #8]
+	b	.L1157
+.L1211:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #2237
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	ldr	r3, [r5, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1163
+	.fnend
+	.size	write_data_page, .-write_data_page
+	.align	2
+	.global	rewrite_data_page
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	rewrite_data_page, %function
+rewrite_data_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, [r0]
+	ldr	ip, [r0, #20]
+	add	r2, r3, #928
+	str	ip, [r0, #16]
+	.syntax divided
+@ 44 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_add
+1:	ldrex	r1, [r2]
+	add	r1, r1, #1
+	strex	ip, r1, [r2]
+	teq	ip, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	b	f2fs_submit_page_bio
+	.fnend
+	.size	rewrite_data_page, .-rewrite_data_page
+	.align	2
+	.global	__f2fs_replace_block
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	__f2fs_replace_block, %function
+__f2fs_replace_block:
+	.fnstart
+	@ args = 8, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	mov	r7, r3
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	mov	r10, r2
+	sub	fp, r3, #1
+	str	lr, [sp, #32]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r0, [r0, #28]
+	ldrb	r2, [sp, #68]	@ zero_extendqisi2
+	cmn	fp, #3
+	mov	r3, r1
+	ldrb	r8, [sp, #64]	@ zero_extendqisi2
+	mvnhi	r1, #0
+	ldr	r6, [r0]
+	str	r2, [sp, #4]
+	mvnhi	r2, #23
+	bhi	.L1215
+	ldr	r1, [r0, #4]
+	ldr	r2, [r0, #16]
+	ldr	ip, [r4, #692]
+	ldr	r1, [r1]
+	sub	r2, r7, r2
+	rsb	r1, r1, r2, lsr ip
+	add	r2, r1, r1, lsl #1
+	lsl	r2, r2, #3
+.L1215:
+	ldr	ip, [r6, #60]
+	cmp	r8, #0
+	ldr	r5, [r0, #12]
+	ldrb	r0, [ip, r2]	@ zero_extendqisi2
+	and	r0, r0, #63
+	str	r0, [sp]
+	bne	.L1216
+	ldrh	r2, [ip, r2]
+	bic	r2, r2, #63
+	cmp	r2, #0
+	lslne	r2, r0, #6
+	beq	.L1254
+.L1218:
+	add	r5, r5, r2
+	add	r6, r6, #40
+	str	r2, [sp, #8]
+	mov	r0, r5
+	str	r1, [sp, #12]
+	str	r3, [sp, #16]
+	bl	mutex_lock
+	mov	r0, r6
+	bl	mutex_lock
+	ldr	r9, [r5, #48]
+	ldr	r1, [sp, #12]
+	ldrh	r3, [r5, #52]
+	ldr	r2, [sp, #8]
+	cmp	r1, r9
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #16]
+	beq	.L1230
+	str	r1, [r5, #60]
+	mov	r0, r4
+	ldr	r1, [sp]
+	str	r3, [sp, #12]
+	bl	change_curseg.constprop.11
+	ldrd	r2, [sp, #8]
+.L1230:
+	ldr	r1, [r4, #28]
+	eor	r0, r8, #1
+	ldr	ip, [sp, #4]
+	ldr	r1, [r1, #16]
+	orrs	r0, r0, ip
+	ldr	r0, [r4, #696]
+	sub	r1, r7, r1
+	sub	r0, r0, #1
+	and	r1, r1, r0
+	strh	r1, [r5, #52]	@ movhi
+	ldr	r1, [r4, #28]
+	ldr	r0, [r3]	@ unaligned
+	ldr	r1, [r1, #12]
+	add	r1, r1, r2
+	ldrh	r2, [r1, #52]
+	ldr	ip, [r1, #20]
+	rsb	r2, r2, r2, lsl #3
+	add	r1, ip, r2
+	str	r0, [ip, r2]	@ unaligned
+	ldrh	r2, [r3, #4]	@ unaligned
+	ldrb	r3, [r3, #6]	@ zero_extendqisi2
+	strh	r2, [r1, #4]	@ unaligned
+	strb	r3, [r1, #6]
+	bne	.L1255
+.L1231:
+	sub	r3, r10, #1
+	cmn	r3, #3
+	mvnhi	r1, #0
+	bhi	.L1232
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #692]
+	ldr	r1, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r1, [r1]
+	sub	r3, r10, r3
+	rsb	r1, r1, r3, lsr r2
+	cmn	r1, #1
+	bne	.L1256
+.L1232:
+	mov	r0, r4
+	bl	locate_dirty_segment
+	cmn	fp, #3
+	mvnhi	r1, #0
+	bhi	.L1234
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #692]
+	ldr	r1, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r1, [r1]
+	sub	r7, r7, r3
+	rsb	r1, r1, r7, lsr r2
+.L1234:
+	mov	r0, r4
+	bl	locate_dirty_segment
+	mov	r1, r9
+	mov	r0, r4
+	bl	locate_dirty_segment
+	cmp	r8, #0
+	beq	.L1235
+	ldr	r3, [r5, #48]
+	cmp	r3, r9
+	bne	.L1257
+.L1236:
+	ldr	r3, [sp, #20]
+	strh	r3, [r5, #52]	@ movhi
+.L1235:
+	mov	r0, r6
+	bl	mutex_unlock
+	mov	r0, r5
+	add	sp, sp, #28
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	mutex_unlock
+.L1216:
+	ldr	r2, [r5, #48]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #112]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #176]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #240]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #304]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #368]
+	cmp	r2, r1
+	movne	r0, #1
+	movne	r2, #64
+	strne	r0, [sp]
+	bne	.L1218
+.L1253:
+	lsl	r2, r0, #6
+	b	.L1218
+.L1257:
+	mov	r0, r4
+	ldr	r1, [sp]
+	str	r9, [r5, #60]
+	bl	change_curseg.constprop.11
+	b	.L1236
+.L1254:
+	ldr	r2, [r5, #48]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #112]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #176]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #240]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #304]
+	cmp	r2, r1
+	beq	.L1253
+	ldr	r2, [r5, #368]
+	cmp	r2, r1
+	beq	.L1253
+	cmp	r10, #0
+	moveq	r0, #2
+	movne	r0, #1
+	moveq	r2, #128
+	movne	r2, #64
+	str	r0, [sp]
+	b	.L1218
+.L1256:
+	mov	r1, r10
+	mvn	r2, #0
+	mov	r0, r4
+	bl	update_sit_entry
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #692]
+	ldr	r1, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r1, [r1]
+	sub	r10, r10, r3
+	rsb	r1, r1, r10, lsr r2
+	b	.L1232
+.L1255:
+	mov	r2, #1
+	mov	r1, r7
+	mov	r0, r4
+	bl	update_sit_entry
+	b	.L1231
+	.fnend
+	.size	__f2fs_replace_block, .-__f2fs_replace_block
+	.align	2
+	.global	commit_inmem_pages
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	commit_inmem_pages, %function
+commit_inmem_pages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 120
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	add	r2, r0, #356
+	mov	r1, #1
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	mov	r8, r0
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #132
+	sub	sp, sp, #132
+	add	fp, sp, #68
+	str	r2, [sp, #40]
+	str	fp, [sp, #68]
+	ldr	r0, [r3, #616]
+	str	fp, [sp, #72]
+	add	r3, r0, #404
+	mov	r4, r3
+	str	r3, [sp, #32]
+	bl	f2fs_balance_fs
+	mov	r0, r4
+	bl	down_read
+	ldr	r3, [r8, #356]
+	tst	r3, #65536
+	beq	.L1340
+.L1259:
+	add	r3, r8, #432
+	mov	r10, r8
+	mov	r0, r3
+	str	r3, [sp, #28]
+	bl	mutex_lock
+	ldr	ip, [r8, #28]
+	mov	r2, #0
+	mov	r3, #0
+	ldr	r5, [r10, #424]!
+	mov	r0, #1
+	mov	r1, #80
+	ldr	ip, [ip, #616]
+	cmp	r10, r5
+	mov	r6, r5
+	str	ip, [sp, #36]
+	str	ip, [sp, #92]
+	strd	r2, [sp, #96]
+	str	r0, [sp, #100]
+	strd	r2, [sp, #104]
+	str	r1, [sp, #104]
+	strd	r2, [sp, #112]
+	strd	r2, [sp, #120]
+	ldr	r7, [r5]
+	beq	.L1299
+	movw	r3, #:lower16:__tracepoint_f2fs_commit_inmem_page
+	mov	r2, #61440
+	movt	r3, #:upper16:__tracepoint_f2fs_commit_inmem_page
+	mov	r1, #53248
+	movt	r2, 65535
+	movt	r1, 65535
+	str	r3, [sp, #16]
+	mvn	r3, #0
+	str	r3, [sp, #12]
+	str	r2, [sp, #20]
+	str	r1, [sp, #24]
+	b	.L1276
+.L1262:
+	mov	r0, r4
+	bl	unlock_page
+	ldrd	r2, [r5]
+	cmp	r7, r10
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	ldr	r3, [sp, #72]
+	str	r6, [sp, #72]
+	str	fp, [r5]
+	str	r3, [r5, #4]
+	mov	r5, r7
+	str	r6, [r3]
+	mov	r6, r7
+	ldr	r7, [r7]
+	beq	.L1341
+.L1276:
+	ldr	r4, [r5, #8]
+	mov	r0, #0
+	mov	r1, r4
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L1342
+.L1261:
+	ldr	r2, [r4, #4]
+	ldr	r3, [r8, #32]
+	cmp	r2, r3
+	bne	.L1262
+	ldr	r3, [sp, #16]
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bne	.L1343
+.L1264:
+	mov	r0, r4
+	bl	set_page_dirty
+	ldr	r3, [r4]
+	tst	r3, #8192
+	bne	.L1344
+.L1269:
+	mov	r0, r4
+	bl	clear_page_dirty_for_io
+	cmp	r0, #0
+	beq	.L1271
+	ldrh	r2, [r8]
+	ldr	r3, [sp, #20]
+	ldr	r1, [sp, #24]
+	and	r3, r2, r3
+	and	r2, r2, r1
+	cmp	r3, #16384
+	cmpne	r2, #32768
+	bne	.L1272
+	add	r2, r8, #376
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r1, [r2]
+	sub	r1, r1, #1
+	strex	r0, r1, [r2]
+	teq	r0, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	ldr	r1, [r8, #28]
+	cmp	r3, #16384
+	movne	r2, #760
+	moveq	r2, #756
+	ldr	r3, [r1, #616]
+	add	r3, r3, r2
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r2, [r3]
+	sub	r2, r2, #1
+	strex	r1, r2, [r3]
+	teq	r1, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+.L1272:
+	mov	r0, r8
+	bl	remove_dirty_inode
+.L1271:
+	mov	r9, #0
+	add	r0, sp, #92
+	str	r9, [sp, #112]
+	str	r4, [sp, #116]
+	str	r9, [sp, #120]
+	strb	r9, [sp, #125]
+	bl	do_write_data_page
+	cmp	r0, #0
+	bne	.L1345
+	ldr	r3, [sp, #112]
+	str	r3, [r5, #12]
+	ldr	r3, [r4, #8]
+	str	r3, [sp, #12]
+	b	.L1262
+.L1344:
+	ldmib	r4, {r1, r3}
+	mov	ip, #0
+	mov	lr, #1
+	mov	r2, ip
+	ldr	r1, [r1]
+	ldr	r0, [r1, #28]
+	ldr	r0, [r0, #616]
+	stm	sp, {ip, lr}
+	bl	f2fs_submit_merged_bio_cond
+	ldr	r3, [r4]
+	tst	r3, #8192
+	beq	.L1269
+	mov	r1, #13
+	mov	r0, r4
+	bl	wait_on_page_bit
+	b	.L1269
+.L1342:
+	mov	r0, r4
+	bl	__lock_page
+	b	.L1261
+.L1341:
+	ldr	r3, [sp, #12]
+	cmn	r3, #1
+	beq	.L1299
+	mov	ip, #1
+	mov	r2, #0
+	ldr	r0, [sp, #36]
+	mov	r1, r8
+	stm	sp, {r2, ip}
+	bl	f2fs_submit_merged_bio_cond
+.L1299:
+	mov	r2, #0
+	mov	r1, fp
+	mov	r0, r8
+	str	r2, [sp, #12]
+	bl	__revoke_inmem_pages.constprop.10
+.L1278:
+	ldr	r0, [sp, #28]
+	bl	mutex_unlock
+	ldr	r3, [r8, #356]
+	tst	r3, #65536
+	beq	.L1296
+	mov	r0, #16
+	ldr	r1, [sp, #40]
+	bl	_clear_bit
+.L1296:
+	ldr	r0, [sp, #32]
+	bl	up_read
+	ldr	r0, [sp, #12]
+	add	sp, sp, #132
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1343:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	add	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [sp, #16]
+	ldr	r9, [r3, #16]
+	cmp	r9, #0
+	beq	.L1265
+.L1266:
+	ldr	r3, [r9]
+	mov	r2, #5
+	mov	r1, r4
+	ldr	r0, [r9, #4]
+	blx	r3
+	ldr	r3, [r9, #8]!
+	cmp	r3, #0
+	bne	.L1266
+.L1265:
+	mov	r3, sp
+	bic	r3, r3, #8128
+	bic	r3, r3, #63
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	beq	.L1264
+	bl	preempt_schedule
+	b	.L1264
+.L1340:
+	add	r1, r8, #356
+	mov	r0, #16
+	bl	_set_bit
+	b	.L1259
+.L1345:
+	str	r0, [sp, #52]
+	mov	r0, r4
+	bl	unlock_page
+	ldr	r3, [sp, #12]
+	cmn	r3, #1
+	bne	.L1346
+.L1275:
+	ldr	r3, [r8, #28]
+	ldr	r5, [sp, #68]
+	ldr	r3, [r3, #616]
+	cmp	r5, fp
+	ldr	r6, [r5]
+	str	r3, [sp, #24]
+	beq	.L1298
+	movw	r3, #:lower16:.LANCHOR0
+	mov	r2, #57344
+	str	r10, [sp, #44]
+	movw	r1, #:lower16:.LC4
+	mov	r7, #0
+	ldr	r10, [sp, #16]
+	movt	r3, #:upper16:.LANCHOR0
+	movt	r2, 65535
+	movt	r1, #:upper16:.LC4
+	str	r7, [sp, #12]
+	str	r3, [sp, #20]
+	str	r2, [sp, #36]
+	str	r1, [sp, #48]
+	b	.L1294
+.L1351:
+	mvn	r3, #10
+	str	r3, [sp, #12]
+.L1286:
+	mov	r1, r4
+	mov	r0, #3
+	bl	_clear_bit
+	mov	r1, r4
+	mov	r0, #11
+	str	r7, [r4, #28]
+	bl	_clear_bit
+	cmp	r4, #0
+	beq	.L1292
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L1347
+.L1293:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	bl	put_page
+.L1292:
+	ldrd	r2, [r5]
+	mov	lr, #256
+	mov	ip, #512
+	ldr	r0, [sp, #20]
+	mov	r1, r5
+	str	r3, [r2, #4]
+	ldr	r0, [r0, #12]
+	str	r2, [r3]
+	str	lr, [r5]
+	str	ip, [r5, #4]
+	bl	kmem_cache_free
+	ldr	r3, [r8, #28]
+	ldr	r3, [r3, #616]
+	add	r2, r3, #772
+	.syntax divided
+@ 83 "/home/pascua14/Desktop/s5-kernel/arch/arm/include/asm/atomic.h" 1
+	@ atomic_sub
+1:	ldrex	r1, [r2]
+	sub	r1, r1, #1
+	strex	r0, r1, [r2]
+	teq	r0, #0
+	bne	1b
+@ 0 "" 2
+	.arm
+	.syntax unified
+	cmp	r6, fp
+	mov	r5, r6
+	ldr	r6, [r6]
+	beq	.L1348
+.L1294:
+	ldr	r4, [r5, #8]
+	mov	r0, #0
+	mov	r1, r4
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L1349
+.L1279:
+	ldr	r3, [r10, #4]
+	cmp	r3, #0
+	bne	.L1350
+.L1281:
+	mov	r1, #28
+	add	r0, sp, #92
+	bl	__memzero
+	str	r8, [sp, #92]
+	mov	r2, #1
+	add	r0, sp, #92
+	str	r7, [sp, #96]
+	str	r7, [sp, #100]
+	str	r7, [sp, #104]
+	ldr	r1, [r4, #8]
+	bl	get_dnode_of_data
+	cmp	r0, #0
+	bne	.L1351
+	add	r2, sp, #76
+	ldr	r0, [sp, #24]
+	ldr	r1, [sp, #104]
+	bl	get_node_info
+	ldrb	lr, [sp, #88]	@ zero_extendqisi2
+	mov	r3, #1
+	add	r1, sp, #61
+	ldr	r9, [r5, #12]
+	ldr	r0, [sp, #24]
+	str	r3, [sp]
+	ldr	ip, [sp, #108]
+	str	r3, [sp, #4]
+	strb	lr, [sp, #65]
+	ldr	lr, [sp, #104]
+	mov	r3, r9
+	ldr	r2, [sp, #116]
+	str	lr, [sp, #61]	@ unaligned
+	strh	ip, [sp, #66]	@ unaligned
+	bl	__f2fs_replace_block
+	add	r0, sp, #92
+	mov	r1, r9
+	bl	f2fs_update_data_blkaddr
+	ldr	r9, [sp, #100]
+	cmp	r9, #0
+	beq	.L1287
+	ldr	r3, [r9]
+	tst	r3, #1
+	beq	.L1352
+.L1288:
+	mov	r0, r9
+	bl	unlock_page
+	mov	r0, r9
+	bl	put_page
+	ldr	r0, [sp, #96]
+	cmp	r0, #0
+	beq	.L1286
+	ldr	r3, [sp, #100]
+	cmp	r0, r3
+	beq	.L1286
+	bl	put_page
+	b	.L1286
+.L1348:
+	ldr	r3, [sp, #12]
+	ldr	r10, [sp, #44]
+	cmp	r3, #0
+	beq	.L1298
+	mov	r1, r10
+	mov	r2, #1
+	mov	r0, r8
+	bl	__revoke_inmem_pages.constprop.10
+	b	.L1278
+.L1298:
+	ldr	r3, [sp, #52]
+	mov	r1, r10
+	mov	r2, #1
+	mov	r0, r8
+	str	r3, [sp, #12]
+	bl	__revoke_inmem_pages.constprop.10
+	b	.L1278
+.L1350:
+	ldr	r2, [sp, #36]
+	mov	r3, sp
+	and	r2, r3, r2
+	ldr	r3, [r2, #4]
+	add	r3, r3, #1
+	str	r3, [r2, #4]
+	ldr	r9, [r10, #16]
+	cmp	r9, #0
+	beq	.L1282
+.L1283:
+	ldr	r3, [r9]
+	mov	r2, #8
+	mov	r1, r4
+	ldr	r0, [r9, #4]
+	blx	r3
+	ldr	r3, [r9, #8]!
+	cmp	r3, #0
+	bne	.L1283
+.L1282:
+	ldr	r2, [sp, #36]
+	mov	r3, sp
+	and	r3, r3, r2
+	ldr	r2, [r3, #4]
+	sub	r2, r2, #1
+	str	r2, [r3, #4]
+	ldr	r3, [r3]
+	tst	r3, #2
+	beq	.L1281
+	bl	preempt_schedule
+	b	.L1281
+.L1349:
+	mov	r0, r4
+	bl	__lock_page
+	b	.L1279
+.L1287:
+	ldr	r0, [sp, #96]
+	cmp	r0, #0
+	beq	.L1286
+	bl	put_page
+	b	.L1286
+.L1347:
+	movw	r1, #1716
+	ldr	r0, [sp, #48]
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1293
+.L1352:
+	movw	r1, #1716
+	ldr	r0, [sp, #48]
+	bl	warn_slowpath_null
+	ldr	r3, [r9, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1288
+.L1346:
+	mov	r1, #1
+	mov	r2, r9
+	ldr	r3, [sp, #12]
+	ldr	r0, [sp, #36]
+	str	r9, [sp]
+	str	r1, [sp, #4]
+	mov	r1, r8
+	bl	f2fs_submit_merged_bio_cond
+	b	.L1275
+	.fnend
+	.size	commit_inmem_pages, .-commit_inmem_pages
+	.align	2
+	.global	f2fs_replace_block
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_replace_block, %function
+f2fs_replace_block:
+	.fnstart
+	@ args = 12, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	strd	r6, [sp, #8]
+	mov	r7, r3
+	strd	r8, [sp, #16]
+	mov	r8, r1
+	strd	r10, [sp, #24]
+	mov	fp, r2
+	str	lr, [sp, #32]
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r0, [r0, #28]
+	ldrb	r3, [sp, #80]	@ zero_extendqisi2
+	ldrb	r9, [sp, #84]	@ zero_extendqisi2
+	ldr	r6, [r0]
+	str	r3, [sp, #20]
+	sub	r3, r7, #1
+	cmn	r3, #3
+	str	r3, [sp, #16]
+	ldr	r3, [r1, #12]
+	mvnhi	r2, #23
+	str	r3, [sp, #8]
+	ldrh	r3, [r1, #16]
+	str	r3, [sp, #12]
+	ldrb	r3, [sp, #88]	@ zero_extendqisi2
+	str	r3, [sp, #24]
+	mvnhi	r3, #0
+	bhi	.L1354
+	ldr	r3, [r0, #4]
+	ldr	r2, [r0, #16]
+	ldr	r1, [r4, #692]
+	ldr	r3, [r3]
+	sub	r2, r7, r2
+	rsb	r3, r3, r2, lsr r1
+	add	r2, r3, r3, lsl #1
+	lsl	r2, r2, #3
+.L1354:
+	ldr	r1, [r6, #60]
+	cmp	r9, #0
+	ldr	r5, [r0, #12]
+	ldrb	r0, [r1, r2]	@ zero_extendqisi2
+	and	r0, r0, #63
+	str	r0, [sp, #4]
+	bne	.L1355
+	ldrh	r2, [r1, r2]
+	bic	r2, r2, #63
+	cmp	r2, #0
+	lslne	r2, r0, #6
+	beq	.L1393
+.L1357:
+	add	r5, r5, r2
+	add	r6, r6, #40
+	strd	r2, [sp, #28]
+	mov	r0, r5
+	bl	mutex_lock
+	mov	r0, r6
+	bl	mutex_lock
+	ldrh	r3, [r5, #52]
+	ldr	r10, [r5, #48]
+	ldr	r2, [sp, #28]
+	str	r3, [sp, #36]
+	ldr	r3, [sp, #32]
+	cmp	r3, r10
+	beq	.L1369
+	mov	r0, r4
+	ldr	r1, [sp, #4]
+	str	r3, [r5, #60]
+	bl	change_curseg.constprop.11
+	ldr	r2, [sp, #28]
+.L1369:
+	ldr	r3, [r4, #28]
+	eor	r0, r9, #1
+	ldr	r1, [sp, #24]
+	ldr	r3, [r3, #16]
+	orrs	r1, r1, r0
+	ldr	r1, [r4, #696]
+	ldr	r0, [sp, #8]
+	sub	r3, r7, r3
+	sub	r1, r1, #1
+	and	r3, r3, r1
+	strh	r3, [r5, #52]	@ movhi
+	ldr	r3, [r4, #28]
+	ldr	r3, [r3, #12]
+	add	r2, r3, r2
+	ldrh	r3, [r2, #52]
+	ldr	r1, [r2, #20]
+	rsb	r3, r3, r3, lsl #3
+	add	r2, r1, r3
+	str	r0, [r1, r3]	@ unaligned
+	ldr	r3, [sp, #20]
+	strb	r3, [r2, #4]
+	ldr	r3, [sp, #12]
+	strh	r3, [r2, #5]	@ unaligned
+	bne	.L1394
+.L1370:
+	sub	r3, fp, #1
+	cmn	r3, #3
+	mvnhi	r1, #0
+	bhi	.L1371
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #692]
+	ldr	r1, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r1, [r1]
+	sub	r3, fp, r3
+	rsb	r1, r1, r3, lsr r2
+	cmn	r1, #1
+	bne	.L1395
+.L1371:
+	mov	r0, r4
+	bl	locate_dirty_segment
+	ldr	r3, [sp, #16]
+	cmn	r3, #3
+	mvnhi	r1, #0
+	bhi	.L1373
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #692]
+	ldr	r1, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r1, [r1]
+	sub	r3, r7, r3
+	rsb	r1, r1, r3, lsr r2
+.L1373:
+	mov	r0, r4
+	bl	locate_dirty_segment
+	mov	r1, r10
+	mov	r0, r4
+	bl	locate_dirty_segment
+	cmp	r9, #0
+	beq	.L1374
+	ldr	r3, [r5, #48]
+	cmp	r10, r3
+	bne	.L1396
+.L1375:
+	ldr	r3, [sp, #36]
+	strh	r3, [r5, #52]	@ movhi
+.L1374:
+	mov	r0, r6
+	bl	mutex_unlock
+	mov	r0, r5
+	bl	mutex_unlock
+	mov	r1, r7
+	mov	r0, r8
+	add	sp, sp, #44
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	f2fs_update_data_blkaddr
+.L1355:
+	ldr	r2, [r5, #48]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #112]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #176]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #240]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #304]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #368]
+	cmp	r3, r2
+	movne	r1, #1
+	movne	r2, #64
+	strne	r1, [sp, #4]
+	bne	.L1357
+.L1392:
+	lsl	r2, r0, #6
+	b	.L1357
+.L1396:
+	mov	r0, r4
+	ldr	r1, [sp, #4]
+	str	r10, [r5, #60]
+	bl	change_curseg.constprop.11
+	b	.L1375
+.L1393:
+	ldr	r2, [r5, #48]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #112]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #176]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #240]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #304]
+	cmp	r3, r2
+	beq	.L1392
+	ldr	r2, [r5, #368]
+	cmp	r3, r2
+	beq	.L1392
+	cmp	fp, #0
+	moveq	r1, #2
+	movne	r1, #1
+	moveq	r2, #128
+	movne	r2, #64
+	str	r1, [sp, #4]
+	b	.L1357
+.L1395:
+	mvn	r2, #0
+	mov	r1, fp
+	mov	r0, r4
+	bl	update_sit_entry
+	ldr	r3, [r4, #28]
+	ldr	r2, [r4, #692]
+	ldr	r1, [r3, #4]
+	ldr	r3, [r3, #16]
+	ldr	r1, [r1]
+	sub	r3, fp, r3
+	rsb	r1, r1, r3, lsr r2
+	b	.L1371
+.L1394:
+	mov	r2, #1
+	mov	r1, r7
+	mov	r0, r4
+	bl	update_sit_entry
+	b	.L1370
+	.fnend
+	.size	f2fs_replace_block, .-f2fs_replace_block
+	.align	2
+	.global	f2fs_wait_on_page_writeback
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_wait_on_page_writeback, %function
+f2fs_wait_on_page_writeback:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, [r0]
+	tst	r3, #8192
+	bxeq	lr
+	strd	r4, [sp, #-12]!
+	.save {r4, r5, lr}
+	mov	ip, r1
+	mov	r4, r0
+	str	lr, [sp, #8]
+	ldmib	r0, {r1, r3}
+	.pad #12
+	sub	sp, sp, #12
+	mov	lr, #1
+	mov	r2, #0
+	ldr	r1, [r1]
+	ldr	r0, [r1, #28]
+	ldr	r0, [r0, #616]
+	stm	sp, {ip, lr}
+	bl	f2fs_submit_merged_bio_cond
+	ldr	r3, [r4]
+	tst	r3, #8192
+	bne	.L1411
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	add	sp, sp, #8
+	ldr	pc, [sp], #4
+.L1411:
+	mov	r0, r4
+	mov	r1, #13
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldr	lr, [sp, #8]
+	add	sp, sp, #12
+	b	wait_on_page_bit
+	.fnend
+	.size	f2fs_wait_on_page_writeback, .-f2fs_wait_on_page_writeback
+	.align	2
+	.global	f2fs_wait_on_encrypted_page_writeback
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	f2fs_wait_on_encrypted_page_writeback, %function
+f2fs_wait_on_encrypted_page_writeback:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	sub	r3, r1, #1
+	cmn	r3, #3
+	bxhi	lr
+	.save {r4, lr}
+	str	r4, [sp, #-8]!
+	str	lr, [sp, #4]
+	ldr	r3, [r0, #380]
+	.pad #8
+	sub	sp, sp, #8
+	ldr	r0, [r3, #32]
+	bl	find_lock_page
+	subs	r4, r0, #0
+	beq	.L1412
+	ldr	r3, [r4]
+	tst	r3, #8192
+	bne	.L1430
+.L1417:
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L1431
+.L1419:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	add	sp, sp, #8
+	@ sp needed
+	ldr	r4, [sp]
+	ldr	lr, [sp, #4]
+	add	sp, sp, #8
+	b	put_page
+.L1412:
+	add	sp, sp, #8
+	@ sp needed
+	ldr	r4, [sp]
+	add	sp, sp, #4
+	ldr	pc, [sp], #4
+.L1430:
+	ldmib	r4, {r1, r3}
+	mov	ip, #0
+	mov	lr, #1
+	mov	r2, ip
+	ldr	r1, [r1]
+	ldr	r0, [r1, #28]
+	ldr	r0, [r0, #616]
+	stm	sp, {ip, lr}
+	bl	f2fs_submit_merged_bio_cond
+	ldr	r3, [r4]
+	tst	r3, #8192
+	beq	.L1417
+	mov	r1, #13
+	mov	r0, r4
+	bl	wait_on_page_bit
+	b	.L1417
+.L1431:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1419
+	.fnend
+	.size	f2fs_wait_on_encrypted_page_writeback, .-f2fs_wait_on_encrypted_page_writeback
+	.align	2
+	.global	write_data_summaries
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	write_data_summaries, %function
+write_data_summaries:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	mov	r9, r0
+	strd	r10, [sp, #24]
+	mov	fp, r1
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #368]
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r6, [r3, #132]	@ unaligned
+	ands	r6, r6, #4
+	bne	.L1460
+	movw	r3, #:lower16:.LC4
+	movt	r3, #:upper16:.LC4
+	str	r3, [sp, #4]
+.L1433:
+	ldr	r3, [r9, #28]
+	mov	r1, fp
+	mov	r0, r9
+	add	fp, fp, #1
+	ldr	r5, [r3, #12]
+	bl	grab_meta_page
+	mov	r7, r0
+	add	r5, r5, r6
+	add	r6, r6, #64
+	ldr	r4, [r5, #20]
+	add	r10, r5, #24
+	bl	page_address
+	mov	r8, r0
+	mov	r0, r5
+	bl	mutex_lock
+	mov	r0, r10
+	bl	down_read
+	movw	r2, #507
+	ldr	r1, [r5, #40]
+	add	r0, r8, #3584
+	bl	memcpy
+	mov	r0, r10
+	bl	up_read
+	mov	r1, r4
+	mov	r2, #3584
+	mov	r0, r8
+	bl	memcpy
+	ldr	r3, [r4, #4091]	@ unaligned
+	mov	r0, r5
+	str	r3, [r8, #4091]	@ unaligned
+	ldrb	r3, [r4, #4095]	@ zero_extendqisi2
+	strb	r3, [r8, #4095]
+	bl	mutex_unlock
+	mov	r0, r7
+	bl	set_page_dirty
+	cmp	r7, #0
+	beq	.L1444
+	ldr	r3, [r7]
+	tst	r3, #1
+	beq	.L1462
+.L1445:
+	mov	r0, r7
+	bl	unlock_page
+	mov	r0, r7
+	bl	put_page
+.L1444:
+	cmp	r6, #192
+	bne	.L1433
+.L1432:
+	add	sp, sp, #20
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1460:
+	bl	grab_meta_page
+	mov	r4, r0
+	movw	r6, #507
+	bl	page_address
+	ldr	r3, [r9, #28]
+	movw	r1, #:lower16:.LC4
+	add	r2, fp, #1
+	movt	r1, #:upper16:.LC4
+	mov	r5, r0
+	str	r2, [sp, #4]
+	mov	r2, r6
+	mov	r8, #0
+	str	r1, [sp, #12]
+	ldr	r3, [r3, #12]
+	ldr	r1, [r3, #40]
+	bl	memcpy
+	ldr	r3, [r9, #28]
+	mov	r2, r6
+	add	r0, r5, r6
+	ldr	r3, [r3, #12]
+	ldr	r1, [r3, #168]
+	bl	memcpy
+	movw	r1, #1014
+.L1441:
+	ldr	r2, [r9, #28]
+	ldr	r3, [r9, #368]
+	ldr	fp, [r2, #12]
+	add	r3, r3, r8
+	ldrb	r3, [r3, #176]	@ zero_extendqisi2
+	add	fp, fp, r8, lsl #6
+	cmp	r3, #1
+	ldreq	r10, [r9, #696]
+	ldrhne	r10, [fp, #52]
+	uxtheq	r10, r10
+	cmp	r10, #0
+	beq	.L1436
+	mov	r6, #0
+	str	r8, [sp, #8]
+	b	.L1440
+.L1437:
+	ldr	lr, [fp, #20]
+	movw	r8, #4091
+	cmp	ip, r8
+	add	r3, lr, r3
+	ldr	ip, [r3]	@ unaligned
+	str	ip, [r5, r1]	@ unaligned
+	ldrh	r1, [r3, #4]	@ unaligned
+	ldrb	r3, [r3, #6]	@ zero_extendqisi2
+	strh	r1, [r2, #4]	@ unaligned
+	movls	r1, r7
+	strb	r3, [r2, #6]
+	bls	.L1438
+	bl	set_page_dirty
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L1463
+.L1439:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	mov	r4, #0
+	bl	put_page
+	mov	r1, r7
+.L1438:
+	add	r6, r6, #1
+	cmp	r6, r10
+	beq	.L1464
+.L1440:
+	cmp	r4, #0
+	rsb	r3, r6, r6, lsl #3
+	mov	r0, r4
+	add	ip, r1, #14
+	add	r2, r5, r1
+	add	r7, r1, #7
+	bne	.L1437
+	ldr	r7, [sp, #4]
+	mov	r0, r9
+	mov	r1, r7
+	bl	grab_meta_page
+	mov	r4, r0
+	bl	page_address
+	ldr	r2, [fp, #20]
+	rsb	r3, r6, r6, lsl #3
+	add	r6, r6, #1
+	add	r1, r7, #1
+	cmp	r6, r10
+	mov	r5, r0
+	str	r1, [sp, #4]
+	mov	r1, #7
+	add	r3, r2, r3
+	ldr	r2, [r3]	@ unaligned
+	str	r2, [r0]	@ unaligned
+	ldrh	r2, [r3, #4]	@ unaligned
+	ldrb	r3, [r3, #6]	@ zero_extendqisi2
+	strh	r2, [r0, #4]	@ unaligned
+	strb	r3, [r0, #6]
+	bne	.L1440
+.L1464:
+	ldr	r8, [sp, #8]
+.L1436:
+	add	r8, r8, #1
+	cmp	r8, #3
+	bne	.L1441
+	cmp	r4, #0
+	beq	.L1432
+	mov	r0, r4
+	bl	set_page_dirty
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L1465
+.L1443:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	add	sp, sp, #20
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	put_page
+.L1463:
+	movw	r1, #1716
+	ldr	r0, [sp, #12]
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1439
+.L1462:
+	movw	r1, #1716
+	ldr	r0, [sp, #4]
+	bl	warn_slowpath_null
+	ldr	r3, [r7, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1445
+.L1465:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1443
+	.fnend
+	.size	write_data_summaries, .-write_data_summaries
+	.align	2
+	.global	write_node_summaries
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	write_node_summaries, %function
+write_node_summaries:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	r3, #:lower16:.LC4
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movt	r3, #:upper16:.LC4
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	mov	r9, r1
+	mov	r8, #192
+	strd	r10, [sp, #24]
+	mov	fp, r0
+	str	lr, [sp, #32]
+	.pad #12
+	sub	sp, sp, #12
+	str	r3, [sp, #4]
+.L1469:
+	ldr	r3, [fp, #28]
+	mov	r1, r9
+	mov	r0, fp
+	add	r9, r9, #1
+	ldr	r5, [r3, #12]
+	bl	grab_meta_page
+	mov	r6, r0
+	add	r5, r5, r8
+	add	r8, r8, #64
+	ldr	r4, [r5, #20]
+	add	r10, r5, #24
+	bl	page_address
+	mov	r7, r0
+	mov	r0, r5
+	bl	mutex_lock
+	mov	r0, r10
+	bl	down_read
+	movw	r2, #507
+	ldr	r1, [r5, #40]
+	add	r0, r7, #3584
+	bl	memcpy
+	mov	r0, r10
+	bl	up_read
+	mov	r1, r4
+	mov	r2, #3584
+	mov	r0, r7
+	bl	memcpy
+	ldr	r3, [r4, #4091]	@ unaligned
+	mov	r0, r5
+	str	r3, [r7, #4091]	@ unaligned
+	ldrb	r3, [r4, #4095]	@ zero_extendqisi2
+	strb	r3, [r7, #4095]
+	bl	mutex_unlock
+	mov	r0, r6
+	bl	set_page_dirty
+	cmp	r6, #0
+	beq	.L1467
+	ldr	r3, [r6]
+	tst	r3, #1
+	beq	.L1475
+.L1468:
+	mov	r0, r6
+	bl	unlock_page
+	mov	r0, r6
+	bl	put_page
+.L1467:
+	cmp	r8, #384
+	bne	.L1469
+	add	sp, sp, #12
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1475:
+	movw	r1, #1716
+	ldr	r0, [sp, #4]
+	bl	warn_slowpath_null
+	ldr	r3, [r6, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1468
+	.fnend
+	.size	write_node_summaries, .-write_node_summaries
+	.align	2
+	.global	lookup_journal_in_cursum
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	lookup_journal_in_cursum, %function
+lookup_journal_in_cursum:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #0
+	.save {r4, lr}
+	str	r4, [sp, #-8]!
+	mov	ip, r0
+	str	lr, [sp, #4]
+	bne	.L1477
+	ldrh	r0, [r0]	@ unaligned
+	cmp	r0, #0
+	beq	.L1478
+	ldr	lr, [ip, #2]	@ unaligned
+	cmp	r2, lr
+	beq	.L1488
+	mov	r4, #13
+	b	.L1480
+.L1481:
+	ldr	lr, [lr, #2]	@ unaligned
+	cmp	lr, r2
+	beq	.L1485
+.L1480:
+	add	r1, r1, #1
+	cmp	r1, r0
+	mla	lr, r4, r1, ip
+	bne	.L1481
+.L1478:
+	cmp	r3, #0
+	cmpne	r0, #38
+	beq	.L1493
+.L1516:
+	add	r3, r0, #1
+	strh	r3, [ip]	@ unaligned
+.L1476:
+	ldr	r4, [sp]
+	add	sp, sp, #4
+	ldr	pc, [sp], #4
+.L1477:
+	cmp	r1, #1
+	bne	.L1493
+	ldrh	r0, [r0]	@ unaligned
+	cmp	r0, #0
+	beq	.L1482
+	ldr	lr, [ip, #2]	@ unaligned
+	cmp	r2, lr
+	beq	.L1488
+	cmp	r0, #1
+	beq	.L1482
+	ldr	lr, [ip, #80]	@ unaligned
+	cmp	r2, lr
+	beq	.L1485
+	cmp	r0, #2
+	beq	.L1482
+	ldr	r1, [ip, #158]	@ unaligned
+	cmp	r2, r1
+	beq	.L1490
+	cmp	r0, #3
+	beq	.L1482
+	ldr	r1, [ip, #236]	@ unaligned
+	cmp	r2, r1
+	beq	.L1491
+	cmp	r0, #4
+	beq	.L1482
+	ldr	r1, [ip, #314]	@ unaligned
+	cmp	r2, r1
+	beq	.L1492
+	cmp	r0, #5
+	beq	.L1482
+	ldr	r1, [ip, #392]	@ unaligned
+	cmp	r2, r1
+	moveq	r0, #5
+	beq	.L1476
+.L1482:
+	cmp	r0, #6
+	cmpne	r3, #0
+	bne	.L1516
+.L1493:
+	mvn	r0, #0
+	b	.L1476
+.L1485:
+	ldr	r4, [sp]
+	add	sp, sp, #4
+	mov	r0, r1
+	ldr	pc, [sp], #4
+.L1488:
+	mov	r0, #0
+	b	.L1476
+.L1490:
+	mov	r0, #2
+	b	.L1476
+.L1491:
+	mov	r0, #3
+	b	.L1476
+.L1492:
+	mov	r0, #4
+	b	.L1476
+	.fnend
+	.size	lookup_journal_in_cursum, .-lookup_journal_in_cursum
+	.align	2
+	.global	flush_sit_entries
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	flush_sit_entries, %function
+flush_sit_entries:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	mov	r8, r1
+	strd	r10, [sp, #24]
+	mov	fp, r0
+	str	lr, [sp, #32]
+	ldr	r3, [r0, #28]
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r9, [r3]
+	str	r3, [sp, #68]
+	ldr	r3, [r3, #12]
+	add	r2, r9, #40
+	ldr	r7, [r9, #28]
+	str	r3, [sp, #56]
+	ldr	r3, [r3, #168]
+	mov	r0, r2
+	str	r3, [sp, #44]
+	str	r2, [sp, #60]
+	bl	mutex_lock
+	ldr	r3, [r9, #32]
+	cmp	r3, #0
+	bne	.L1640
+.L1519:
+	ldr	r3, [r8]
+	tst	r3, #16
+	beq	.L1561
+	ldrd	r4, [r8, #8]
+	ldrd	r2, [r8, #16]
+	cmp	r3, r5
+	cmpeq	r2, r4
+	bcc	.L1562
+.L1563:
+	mov	r2, #0
+	mov	r1, r8
+	mov	r0, fp
+	bl	add_discard_addrs
+	ldr	r1, [r8, #8]
+	ldr	r0, [r8, #12]
+	ldrd	r2, [r8, #16]
+	adds	r6, r1, #1
+	adc	r7, r0, #0
+	cmp	r7, r3
+	cmpeq	r6, r2
+	strd	r6, [r8, #8]
+	bls	.L1563
+.L1562:
+	strd	r4, [r8, #8]
+.L1561:
+	ldr	r0, [sp, #60]
+	bl	mutex_unlock
+	ldr	r3, [fp, #28]
+	ldr	r7, [r3, #8]
+	add	r8, r7, #36
+	mov	r0, r8
+	bl	mutex_lock
+	ldr	r3, [fp, #28]
+	ldr	r0, [r7, #32]
+	ldr	r1, [r3, #32]
+	bl	_find_first_bit_le
+	ldr	r3, [fp, #28]
+	mov	r5, r0
+	ldr	r2, [r3, #32]
+	cmp	r2, r0
+	bhi	.L1568
+	b	.L1564
+.L1566:
+	mov	r0, r9
+	bl	_raw_spin_unlock
+	ldr	r3, [fp, #28]
+	add	r2, r5, #1
+	ldr	r0, [r7, #32]
+	ldr	r1, [r3, #32]
+	bl	_find_next_bit_le
+	ldr	r3, [fp, #28]
+	mov	r5, r0
+	ldr	r2, [r3, #32]
+	cmp	r0, r2
+	bcs	.L1564
+.L1568:
+	ldr	r4, [r3, #4]
+	ldr	r6, [fp, #700]
+	add	r9, r4, #12
+	mov	r0, r9
+	bl	_raw_spin_lock
+	mov	r0, r5
+	ldr	r1, [r4, #16]
+	bl	_test_and_clear_bit
+	cmp	r0, #0
+	beq	.L1566
+	udiv	r10, r5, r6
+	ldr	r3, [r4, #4]
+	ldr	r0, [r4, #16]
+	add	r3, r3, #1
+	str	r3, [r4, #4]
+	ldr	r1, [fp, #700]
+	mul	r6, r10, r6
+	mov	r2, r6
+	add	r1, r6, r1
+	bl	_find_next_bit_le
+	ldr	r3, [fp, #700]
+	add	r6, r6, r3
+	cmp	r0, r6
+	bcc	.L1566
+	mov	r0, r10
+	ldr	r1, [r4, #20]
+	bl	_test_and_clear_bit
+	cmp	r0, #0
+	beq	.L1566
+	ldr	r3, [r4, #8]
+	add	r3, r3, #1
+	str	r3, [r4, #8]
+	b	.L1566
+.L1564:
+	mov	r0, r8
+	add	sp, sp, #92
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	mutex_unlock
+.L1640:
+	ldr	r3, [fp, #28]
+	ldr	r2, [r3]
+	add	r5, r3, #52
+	ldr	r1, [r3, #32]
+	ldr	r4, [r2, #28]
+	mov	r0, r4
+	bl	_find_first_bit_le
+	ldr	r3, [fp, #28]
+	mov	r6, r0
+	ldr	r2, [r3, #32]
+	cmp	r2, r0
+	bls	.L1520
+.L1521:
+	mov	r0, r6
+	mov	r1, r5
+	bl	add_sit_entry
+	ldr	r3, [fp, #28]
+	add	r2, r6, #1
+	mov	r0, r4
+	ldr	r1, [r3, #32]
+	bl	_find_next_bit_le
+	ldr	r3, [fp, #28]
+	mov	r6, r0
+	ldr	r2, [r3, #32]
+	cmp	r0, r2
+	bcc	.L1521
+.L1520:
+	ldr	r2, [sp, #44]
+	ldr	r1, [r9, #32]
+	ldrh	r2, [r2]	@ unaligned
+	rsb	r2, r2, #6
+	cmp	r1, r2
+	bhi	.L1641
+.L1522:
+	ldr	r3, [sp, #68]
+	ldr	r6, [r3, #52]
+	add	r3, r3, #52
+	str	r3, [sp, #48]
+	cmp	r6, r3
+	ldr	r3, [r6]
+	str	r3, [sp, #40]
+	beq	.L1532
+	movw	r3, #:lower16:.LANCHOR0
+	movw	r2, #:lower16:.LC4
+	str	fp, [sp, #4]
+	movt	r3, #:upper16:.LANCHOR0
+	movw	r1, #:lower16:.LC0
+	str	r8, [sp, #16]
+	movw	r0, #4767
+	movt	r2, #:upper16:.LC4
+	movt	r1, #:upper16:.LC0
+	movt	r0, 10724
+	str	r3, [sp, #52]
+	mov	fp, r9
+	mov	r3, #1
+	mov	r8, r7
+	str	r3, [sp, #8]
+	str	r0, [sp, #64]
+	str	r1, [sp, #80]
+	str	r2, [sp, #84]
+.L1531:
+	ldr	r3, [sp, #4]
+	ldr	r5, [r6, #8]
+	ldr	r3, [r3, #28]
+	add	r1, r5, #55
+	ldr	r2, [r3, #32]
+	cmp	r1, r2
+	movcs	r4, r2
+	ldr	r2, [sp, #8]
+	movcc	r4, r1
+	str	r4, [sp, #20]
+	cmp	r2, #0
+	beq	.L1533
+	ldr	r2, [sp, #44]
+	ldr	r1, [r6, #12]
+	ldrh	r2, [r2]	@ unaligned
+	rsb	r2, r2, #6
+	cmp	r1, r2
+	bhi	.L1533
+	ldr	r3, [sp, #56]
+	add	r7, r3, #152
+	mov	r0, r7
+	bl	down_write
+	mov	r2, r5
+	mov	r1, r4
+	mov	r0, r8
+	mov	r5, r4
+	bl	_find_next_bit_le
+	cmp	r5, r0
+	mov	r3, r5
+	movls	r3, #1
+	mov	r4, r0
+	strls	r3, [sp, #8]
+	bls	.L1535
+	mov	r3, #0
+	mov	r2, #1
+	str	r2, [sp, #8]
+	str	r3, [sp, #24]
+	str	r3, [sp, #28]
+.L1534:
+	ldr	r10, [sp, #44]
+	mov	r9, r6
+.L1553:
+	ldr	r3, [sp, #4]
+	add	r7, r4, r4, lsl #1
+	ldr	r2, [sp, #16]
+	lsl	r6, r7, #3
+	ldr	r3, [r3, #28]
+	ldr	r2, [r2]
+	ldr	r1, [r3]
+	ands	r3, r2, #16
+	ldr	r5, [r1, #60]
+	add	r2, r5, r6
+	str	r2, [sp, #12]
+	beq	.L1642
+.L1544:
+	ldr	r3, [sp, #8]
+	cmp	r3, #0
+	beq	.L1545
+	ldrh	r1, [r10]	@ unaligned
+	cmp	r1, #0
+	beq	.L1546
+	ldr	r3, [r10, #2]	@ unaligned
+	cmp	r4, r3
+	beq	.L1579
+	cmp	r1, #1
+	beq	.L1546
+	ldr	r3, [r10, #80]	@ unaligned
+	cmp	r3, r4
+	beq	.L1580
+	cmp	r1, #2
+	beq	.L1546
+	ldr	r3, [r10, #158]	@ unaligned
+	cmp	r4, r3
+	beq	.L1581
+	cmp	r1, #3
+	beq	.L1546
+	ldr	r3, [r10, #236]	@ unaligned
+	cmp	r4, r3
+	beq	.L1582
+	cmp	r1, #4
+	beq	.L1546
+	ldr	r3, [r10, #314]	@ unaligned
+	cmp	r4, r3
+	beq	.L1583
+	cmp	r1, #5
+	beq	.L1546
+	ldr	r3, [r10, #392]	@ unaligned
+	cmp	r4, r3
+	beq	.L1584
+	movw	r1, #2923
+	ldr	r0, [sp, #80]
+	bl	warn_slowpath_null
+	ldr	r3, [sp, #4]
+	mov	r0, #2
+	add	r1, r3, #16
+	bl	_set_bit
+	mvn	r3, #69
+	mvn	r1, #0
+.L1547:
+	mov	ip, #78
+	add	r3, r10, r3
+	str	fp, [sp, #32]
+	mov	r0, r3
+	str	r8, [sp, #36]
+	mla	ip, ip, r1, r10
+	str	r4, [ip, #2]	@ unaligned
+	ldrb	lr, [r5, r7, lsl #3]	@ zero_extendqisi2
+	ldrh	r2, [r5, r6]
+	and	lr, lr, #63
+	ubfx	r2, r2, #6, #10
+	orr	r2, r2, lr, lsl #10
+	strh	r2, [ip, #6]	@ unaligned
+	add	r2, r5, r6
+	ldr	r2, [r2, #4]
+	add	ip, r2, #64
+.L1548:
+	ldr	fp, [r2]	@ unaligned
+	add	r2, r2, #16
+	add	r0, r0, #16
+	ldr	r8, [r2, #-12]	@ unaligned
+	ldr	r7, [r2, #-8]	@ unaligned
+	ldr	lr, [r2, #-4]	@ unaligned
+	cmp	r2, ip
+	str	fp, [r0, #-16]	@ unaligned
+	str	r8, [r0, #-12]	@ unaligned
+	str	r7, [r0, #-8]	@ unaligned
+	str	lr, [r0, #-4]	@ unaligned
+	bne	.L1548
+	ldr	r2, [sp, #12]
+	add	r0, r3, #64
+	ldr	r8, [sp, #36]
+	ldr	r2, [r2, #8]
+.L1549:
+	ldr	fp, [r3]	@ unaligned
+	add	r3, r3, #16
+	add	r2, r2, #16
+	ldr	r7, [r3, #-12]	@ unaligned
+	ldr	lr, [r3, #-8]	@ unaligned
+	ldr	ip, [r3, #-4]	@ unaligned
+	cmp	r3, r0
+	str	fp, [r2, #-16]	@ unaligned
+	str	r7, [r2, #-12]	@ unaligned
+	str	lr, [r2, #-8]	@ unaligned
+	str	ip, [r2, #-4]	@ unaligned
+	bne	.L1549
+	ldr	lr, [sp, #12]
+	mov	r0, #78
+	ldrh	r3, [r5, r6]
+	mla	r1, r0, r1, r10
+	ldr	fp, [sp, #32]
+	ldrh	r2, [lr, #2]
+	ldr	ip, [lr, #16]
+	lsr	r3, r3, #6
+	ldr	r0, [lr, #20]
+	bfi	r2, r3, #0, #10
+	strh	r2, [lr, #2]	@ movhi
+	str	ip, [r1, #72]	@ unaligned
+	str	r0, [r1, #76]	@ unaligned
+.L1550:
+	cmp	r4, #0
+	add	r3, r4, #31
+	ldr	r5, [sp, #20]
+	movge	r3, r4
+	rsbs	r2, r4, #0
+	asr	r3, r3, #5
+	and	r2, r2, #31
+	and	lr, r4, #31
+	ldr	ip, [r8, r3, lsl #2]
+	rsbpl	lr, r2, #0
+	add	r2, r4, #1
+	mov	r4, #1
+	mov	r0, r8
+	mov	r1, r5
+	bic	ip, ip, r4, lsl lr
+	str	ip, [r8, r3, lsl #2]
+	ldr	r3, [fp, #32]
+	sub	r3, r3, #1
+	str	r3, [fp, #32]
+	ldr	r3, [r9, #12]
+	sub	r3, r3, #1
+	str	r3, [r9, #12]
+	bl	_find_next_bit_le
+	cmp	r5, r0
+	mov	r4, r0
+	bhi	.L1553
+	ldr	r3, [sp, #8]
+	mov	r6, r9
+	cmp	r3, #0
+	bne	.L1643
+.L1543:
+	ldr	r3, [sp, #24]
+	cmp	r3, #0
+	beq	.L1554
+	ldr	r3, [r3]
+	tst	r3, #1
+	beq	.L1644
+.L1555:
+	ldr	r4, [sp, #24]
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	bl	put_page
+.L1554:
+	ldr	r3, [r6, #12]
+	cmp	r3, #0
+	bne	.L1645
+.L1556:
+	ldrd	r2, [r6]
+	mov	lr, #256
+	mov	ip, #512
+	ldr	r0, [sp, #52]
+	mov	r1, r6
+	str	r3, [r2, #4]
+	ldr	r0, [r0, #4]
+	str	r2, [r3]
+	str	lr, [r6]
+	str	ip, [r6, #4]
+	bl	kmem_cache_free
+	ldr	r3, [sp, #40]
+	ldr	r2, [sp, #48]
+	cmp	r3, r2
+	ldr	r3, [r3]
+	beq	.L1639
+.L1557:
+	ldr	r6, [sp, #40]
+	str	r3, [sp, #40]
+	b	.L1531
+.L1545:
+	ldr	r1, [fp, #36]
+	mov	r3, #74
+	str	fp, [sp, #32]
+	ldrb	ip, [r5, r7, lsl #3]	@ zero_extendqisi2
+	str	r8, [sp, #36]
+	ldrh	r2, [r5, r6]
+	udiv	r0, r4, r1
+	and	ip, ip, #63
+	ubfx	r2, r2, #6, #10
+	orr	r2, r2, ip, lsl #10
+	mls	r0, r1, r0, r4
+	ldr	r1, [sp, #28]
+	mul	r3, r3, r0
+	strh	r2, [r1, r3]	@ unaligned
+	add	r2, r5, r6
+	add	r3, r3, #2
+	ldr	r2, [r2, #4]
+	add	r3, r1, r3
+	mov	r1, r3
+	add	ip, r2, #64
+.L1551:
+	ldr	fp, [r2]	@ unaligned
+	add	r2, r2, #16
+	add	r1, r1, #16
+	ldr	r8, [r2, #-12]	@ unaligned
+	ldr	r7, [r2, #-8]	@ unaligned
+	ldr	lr, [r2, #-4]	@ unaligned
+	cmp	r2, ip
+	str	fp, [r1, #-16]	@ unaligned
+	str	r8, [r1, #-12]	@ unaligned
+	str	r7, [r1, #-8]	@ unaligned
+	str	lr, [r1, #-4]	@ unaligned
+	bne	.L1551
+	ldr	r2, [sp, #12]
+	add	r1, r3, #64
+	ldr	r8, [sp, #36]
+	ldr	r2, [r2, #8]
+.L1552:
+	ldr	fp, [r3]	@ unaligned
+	add	r3, r3, #16
+	add	r2, r2, #16
+	ldr	r7, [r3, #-12]	@ unaligned
+	ldr	lr, [r3, #-8]	@ unaligned
+	ldr	ip, [r3, #-4]	@ unaligned
+	cmp	r3, r1
+	str	fp, [r2, #-16]	@ unaligned
+	str	r7, [r2, #-12]	@ unaligned
+	str	lr, [r2, #-8]	@ unaligned
+	str	ip, [r2, #-4]	@ unaligned
+	bne	.L1552
+	ldr	lr, [sp, #12]
+	mov	r1, #74
+	ldrh	r3, [r5, r6]
+	ldr	ip, [sp, #28]
+	ldr	fp, [sp, #32]
+	ldrh	r2, [lr, #2]
+	lsr	r3, r3, #6
+	mla	r0, r1, r0, ip
+	ldr	ip, [lr, #16]
+	ldr	r1, [lr, #20]
+	bfi	r2, r3, #0, #10
+	strh	r2, [lr, #2]	@ movhi
+	str	ip, [r0, #66]	@ unaligned
+	str	r1, [r0, #70]	@ unaligned
+	b	.L1550
+.L1546:
+	mov	r3, #78
+	add	r2, r1, #1
+	mul	r3, r3, r1
+	strh	r2, [r10]	@ unaligned
+	add	r3, r3, #8
+	b	.L1547
+.L1642:
+	ldr	r0, [sp, #16]
+	mov	r2, r3
+	mov	r1, r0
+	str	r4, [r0, #8]
+	str	r3, [r0, #12]
+	ldr	r0, [sp, #4]
+	bl	add_discard_addrs
+	b	.L1544
+.L1533:
+	ldr	r2, [sp, #64]
+	ldr	r0, [r3]
+	umull	r2, r4, r2, r5
+	ldr	r2, [r3, #28]
+	ldr	r3, [r0, #4]
+	str	r0, [sp, #8]
+	sub	r1, r5, r4
+	sub	r2, r2, #1
+	add	r4, r4, r1, lsr #1
+	cmp	r5, r2
+	movls	r2, r0
+	lsr	r4, r4, #5
+	movls	ip, r2
+	add	r7, r4, r3
+	bhi	.L1646
+.L1536:
+	ldr	r0, [ip, #16]
+	mvn	r10, r4
+	mov	r1, #1
+	and	r10, r10, #7
+	ldr	r2, [r2, #8]
+	lsl	r10, r1, r10
+	ldrb	r1, [r0, r4, lsr #3]	@ zero_extendqisi2
+	ldr	r0, [sp, #4]
+	tst	r1, r10
+	ldrne	r1, [ip, #8]
+	addne	r7, r7, r1
+	sub	r9, r7, r3
+	mov	r1, r7
+	cmp	r9, r2
+	addcc	r9, r9, r2
+	subcs	r9, r9, r2
+	add	r9, r9, r3
+	bl	get_meta_page
+	mov	r7, r0
+	mov	r1, r9
+	ldr	r0, [sp, #4]
+	bl	grab_meta_page
+	ldr	r3, [r7]
+	str	r0, [sp, #24]
+	tst	r3, #16
+	bne	.L1647
+.L1540:
+	mov	r0, r7
+	bl	page_address
+	mov	r9, r0
+	ldr	r0, [sp, #24]
+	bl	page_address
+	mov	r1, r9
+	mov	r2, #4096
+	bl	memcpy
+	ldr	r0, [sp, #24]
+	bl	set_page_dirty
+	cmp	r7, #0
+	beq	.L1541
+	ldr	r3, [r7]
+	tst	r3, #1
+	beq	.L1648
+.L1542:
+	mov	r0, r7
+	bl	unlock_page
+	mov	r0, r7
+	bl	put_page
+.L1541:
+	ldr	r3, [sp, #8]
+	ldr	r0, [sp, #24]
+	ldr	r2, [r3, #16]
+	ldrb	r3, [r2, r4, lsr #3]	@ zero_extendqisi2
+	eor	r10, r10, r3
+	strb	r10, [r2, r4, lsr #3]
+	bl	page_address
+	mov	r2, r5
+	ldr	r5, [sp, #20]
+	str	r0, [sp, #28]
+	mov	r0, r8
+	mov	r1, r5
+	bl	_find_next_bit_le
+	cmp	r5, r0
+	mov	r3, #0
+	mov	r4, r0
+	str	r3, [sp, #8]
+	bhi	.L1534
+	b	.L1543
+.L1643:
+	ldr	r3, [sp, #56]
+	add	r7, r3, #152
+.L1535:
+	mov	r0, r7
+	bl	up_write
+	ldr	r3, [r6, #12]
+	cmp	r3, #0
+	beq	.L1556
+.L1645:
+	mov	r1, #2944
+	ldr	r0, [sp, #80]
+	bl	warn_slowpath_null
+	ldr	r3, [sp, #4]
+	mov	r0, #2
+	add	r1, r3, #16
+	bl	_set_bit
+	ldr	r0, [sp, #52]
+	mov	lr, #256
+	mov	ip, #512
+	ldrd	r2, [r6]
+	mov	r1, r6
+	ldr	r0, [r0, #4]
+	str	r3, [r2, #4]
+	str	r2, [r3]
+	str	lr, [r6]
+	str	ip, [r6, #4]
+	bl	kmem_cache_free
+	ldr	r3, [sp, #40]
+	ldr	r2, [sp, #48]
+	cmp	r2, r3
+	ldr	r3, [r3]
+	bne	.L1557
+.L1639:
+	mov	r9, fp
+	ldr	fp, [sp, #4]
+	ldr	r3, [sp, #68]
+	ldr	r8, [sp, #16]
+	ldr	r6, [r3, #52]
+.L1532:
+	ldr	r3, [sp, #48]
+	cmp	r3, r6
+	bne	.L1649
+.L1559:
+	ldr	r3, [r9, #32]
+	cmp	r3, #0
+	beq	.L1519
+	movw	r0, #:lower16:.LC0
+	movw	r1, #2949
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, fp, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L1519
+.L1579:
+	mov	r3, #8
+	mov	r1, #0
+	b	.L1547
+.L1580:
+	mov	r3, #86
+	mov	r1, #1
+	b	.L1547
+.L1581:
+	mov	r3, #164
+	mov	r1, #2
+	b	.L1547
+.L1582:
+	mov	r3, #242
+	mov	r1, #3
+	b	.L1547
+.L1583:
+	mov	r3, #320
+	mov	r1, #4
+	b	.L1547
+.L1584:
+	movw	r3, #398
+	mov	r1, #5
+	b	.L1547
+.L1647:
+	movw	r1, #2753
+	ldr	r0, [sp, #80]
+	bl	warn_slowpath_null
+	ldr	r3, [sp, #4]
+	mov	r0, #2
+	add	r1, r3, #16
+	bl	_set_bit
+	b	.L1540
+.L1646:
+	movw	r0, #:lower16:.LC13
+	movw	r1, #625
+	movt	r0, #:upper16:.LC13
+	bl	warn_slowpath_null
+	ldr	r9, [sp, #4]
+	mov	r0, #2
+	add	r1, r9, #16
+	bl	_set_bit
+	ldr	r3, [r9, #28]
+	ldr	ip, [sp, #8]
+	ldr	r2, [r3]
+	ldr	r3, [r2, #4]
+	b	.L1536
+.L1641:
+	ldr	r5, [r3, #12]
+	ldr	r4, [r5, #168]
+	add	r5, r5, #152
+	mov	r0, r5
+	bl	down_write
+	ldrh	r3, [r4]	@ unaligned
+	cmp	r3, #0
+	moveq	r2, r3
+	beq	.L1523
+	ldr	r3, [fp, #28]
+	mov	r1, #1
+	ldr	r0, [r4, #2]	@ unaligned
+	ldr	ip, [r3]
+	rsbs	lr, r0, #0
+	and	r2, r0, #31
+	and	lr, lr, #31
+	add	r3, r0, #31
+	rsbpl	r2, lr, #0
+	cmp	r0, #0
+	ldr	lr, [ip, #28]
+	movge	r3, r0
+	lsl	r1, r1, r2
+	asr	r3, r3, #5
+	ldr	r2, [lr, r3, lsl #2]
+	tst	r2, r1
+	orr	r2, r2, r1
+	str	r2, [lr, r3, lsl #2]
+	bne	.L1524
+	ldr	r3, [ip, #32]
+	add	r3, r3, #1
+	str	r3, [ip, #32]
+	ldr	r1, [fp, #28]
+	add	r1, r1, #52
+	bl	add_sit_entry
+.L1524:
+	ldrh	r3, [r4]	@ unaligned
+	cmp	r3, #1
+	movls	r2, #1
+	bls	.L1525
+	ldr	r3, [fp, #28]
+	mov	r1, #1
+	ldr	r0, [r4, #80]	@ unaligned
+	ldr	ip, [r3]
+	rsbs	lr, r0, #0
+	and	r2, r0, #31
+	and	lr, lr, #31
+	add	r3, r0, #31
+	rsbpl	r2, lr, #0
+	cmp	r0, #0
+	ldr	lr, [ip, #28]
+	movge	r3, r0
+	lsl	r1, r1, r2
+	asr	r3, r3, #5
+	ldr	r2, [lr, r3, lsl #2]
+	tst	r2, r1
+	orr	r2, r2, r1
+	str	r2, [lr, r3, lsl #2]
+	beq	.L1650
+.L1526:
+	ldrh	r3, [r4]	@ unaligned
+	cmp	r3, #2
+	movls	r2, #2
+	bls	.L1525
+	ldr	r3, [fp, #28]
+	mov	r6, #1
+	ldr	r0, [r4, #158]	@ unaligned
+	ldr	ip, [r3]
+	rsbs	r1, r0, #0
+	and	r2, r0, #31
+	and	r1, r1, #31
+	add	r3, r0, #31
+	rsbpl	r2, r1, #0
+	cmp	r0, #0
+	ldr	lr, [ip, #28]
+	movge	r3, r0
+	lsl	r2, r6, r2
+	asr	r3, r3, #5
+	ldr	r1, [lr, r3, lsl #2]
+	tst	r1, r2
+	orr	r2, r1, r2
+	str	r2, [lr, r3, lsl #2]
+	beq	.L1651
+.L1527:
+	ldrh	r3, [r4]	@ unaligned
+	cmp	r3, #3
+	movls	r2, #3
+	bls	.L1525
+	ldr	r3, [fp, #28]
+	mov	r6, #1
+	ldr	r0, [r4, #236]	@ unaligned
+	ldr	ip, [r3]
+	rsbs	r1, r0, #0
+	and	r2, r0, #31
+	and	r1, r1, #31
+	add	r3, r0, #31
+	rsbpl	r2, r1, #0
+	cmp	r0, #0
+	ldr	lr, [ip, #28]
+	movge	r3, r0
+	lsl	r2, r6, r2
+	asr	r3, r3, #5
+	ldr	r1, [lr, r3, lsl #2]
+	tst	r1, r2
+	orr	r2, r1, r2
+	str	r2, [lr, r3, lsl #2]
+	beq	.L1652
+.L1528:
+	ldrh	r3, [r4]	@ unaligned
+	cmp	r3, #4
+	movls	r2, #4
+	bls	.L1525
+	ldr	r3, [fp, #28]
+	mov	r6, #1
+	ldr	r0, [r4, #314]	@ unaligned
+	ldr	ip, [r3]
+	rsbs	r1, r0, #0
+	and	r2, r0, #31
+	and	r1, r1, #31
+	add	r3, r0, #31
+	rsbpl	r2, r1, #0
+	cmp	r0, #0
+	ldr	lr, [ip, #28]
+	movge	r3, r0
+	lsl	r2, r6, r2
+	asr	r3, r3, #5
+	ldr	r1, [lr, r3, lsl #2]
+	tst	r1, r2
+	orr	r2, r1, r2
+	str	r2, [lr, r3, lsl #2]
+	beq	.L1653
+.L1529:
+	ldrh	r3, [r4]	@ unaligned
+	cmp	r3, #5
+	movls	r2, #5
+	bls	.L1525
+	ldr	r3, [fp, #28]
+	mov	lr, #1
+	ldr	r0, [r4, #392]	@ unaligned
+	ldr	r1, [r3]
+	rsbs	ip, r0, #0
+	and	r3, r0, #31
+	and	ip, ip, #31
+	add	r2, r0, #31
+	rsbpl	r3, ip, #0
+	cmp	r0, #0
+	ldr	ip, [r1, #28]
+	movge	r2, r0
+	lsl	r3, lr, r3
+	asr	r2, r2, #5
+	ldr	lr, [ip, r2, lsl #2]
+	tst	r3, lr
+	orr	r3, r3, lr
+	str	r3, [ip, r2, lsl #2]
+	bne	.L1530
+	ldr	r3, [r1, #32]
+	add	r3, r3, #1
+	str	r3, [r1, #32]
+	ldr	r1, [fp, #28]
+	add	r1, r1, #52
+	bl	add_sit_entry
+.L1530:
+	ldrh	r3, [r4]	@ unaligned
+	mov	r2, #6
+.L1525:
+	rsb	r2, r2, #0
+	uxth	r2, r2
+.L1523:
+	add	r3, r3, r2
+	mov	r0, r5
+	strh	r3, [r4]	@ unaligned
+	bl	up_write
+	b	.L1522
+.L1648:
+	movw	r1, #1716
+	ldr	r0, [sp, #84]
+	bl	warn_slowpath_null
+	ldr	r3, [r7, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1542
+.L1644:
+	movw	r1, #1716
+	ldr	r0, [sp, #84]
+	bl	warn_slowpath_null
+	ldr	r3, [sp, #24]
+	mov	r0, #2
+	ldr	r3, [r3, #4]
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1555
+.L1652:
+	ldr	r3, [ip, #32]
+	add	r3, r3, r6
+	str	r3, [ip, #32]
+	ldr	r1, [fp, #28]
+	add	r1, r1, #52
+	bl	add_sit_entry
+	b	.L1528
+.L1653:
+	ldr	r3, [ip, #32]
+	add	r3, r3, r6
+	str	r3, [ip, #32]
+	ldr	r1, [fp, #28]
+	add	r1, r1, #52
+	bl	add_sit_entry
+	b	.L1529
+.L1649:
+	movw	r0, #:lower16:.LC0
+	movw	r1, #2948
+	movt	r0, #:upper16:.LC0
+	bl	warn_slowpath_null
+	add	r1, fp, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L1559
+.L1650:
+	ldr	r3, [ip, #32]
+	add	r3, r3, #1
+	str	r3, [ip, #32]
+	ldr	r1, [fp, #28]
+	add	r1, r1, #52
+	bl	add_sit_entry
+	b	.L1526
+.L1651:
+	ldr	r3, [ip, #32]
+	add	r3, r3, r6
+	str	r3, [ip, #32]
+	ldr	r1, [fp, #28]
+	add	r1, r1, #52
+	bl	add_sit_entry
+	b	.L1527
+	.fnend
+	.size	flush_sit_entries, .-flush_sit_entries
+	.align	2
+	.global	build_segment_manager
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	build_segment_manager, %function
+build_segment_manager:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 144
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	strd	r10, [sp, #24]
+	movw	r10, #:lower16:kmalloc_caches
+	mov	fp, r0
+	movt	r10, #:upper16:kmalloc_caches
+	strd	r8, [sp, #16]
+	movw	r9, #:lower16:__stack_chk_guard
+	str	lr, [sp, #32]
+	ldr	r3, [r10, #28]
+	movt	r9, #:upper16:__stack_chk_guard
+	ldr	r2, [r9]
+	.pad #156
+	sub	sp, sp, #156
+	ldr	r4, [r0, #8]
+	ldr	r5, [r0, #368]
+	cmp	r3, #0
+	str	r2, [sp, #148]
+	beq	.L1808
+	mov	r0, r3
+	mov	r2, #84
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	cmp	r0, #0
+	beq	.L1663
+.L1655:
+	str	r0, [fp, #28]
+	ldr	r3, [r4, #72]	@ unaligned
+	movw	r1, #34079
+	movt	r1, 20971
+	mov	ip, #2048
+	str	r3, [r0, #16]
+	ldr	r3, [r4, #92]	@ unaligned
+	str	r3, [r0, #20]
+	ldr	r3, [r4, #48]	@ unaligned
+	str	r3, [r0, #28]
+	ldr	r3, [r5, #24]	@ unaligned
+	str	r3, [r0, #36]
+	ldr	r3, [r5, #28]	@ unaligned
+	str	r3, [r0, #40]
+	ldr	r2, [r4, #68]	@ unaligned
+	add	r3, r2, r2, lsl #2
+	str	r2, [r0, #32]
+	ldr	r2, [r4, #88]	@ unaligned
+	umull	r1, r3, r1, r3
+	mov	r1, #8
+	str	r2, [r0, #24]
+	mov	r2, #16
+	lsr	r3, r3, #5
+	cmp	r3, #4096
+	movhi	r3, #4096
+	str	r3, [r0, #44]
+	ldr	r3, [fp, #864]
+	str	ip, [r0, #48]
+	str	r1, [r0, #68]
+	str	r2, [r0, #72]
+	tst	r3, #262144
+	moveq	r3, #16
+	streq	r3, [r0, #60]
+	mov	r3, #70
+	str	r3, [r0, #64]
+	add	r3, r0, #52
+	str	r3, [r0, #52]
+	str	r3, [r0, #56]
+	ldr	r3, [fp]
+	ldr	r2, [r3, #52]
+	tst	r2, #1
+	bne	.L1660
+	mov	r0, fp
+	bl	create_flush_cmd_control
+	subs	r4, r0, #0
+	bne	.L1654
+	ldr	r3, [fp]
+.L1660:
+	ldr	r2, [fp, #28]
+	ldr	r3, [r3, #208]
+	ldr	r5, [r2, #80]
+	ldr	r4, [r3]
+	cmp	r5, #0
+	beq	.L1946
+.L1661:
+	lsr	r2, r4, #20
+	ubfx	r4, r4, #0, #20
+	movw	r3, #:lower16:.LC16
+	movw	r0, #:lower16:issue_discard_thread
+	movt	r3, #:upper16:.LC16
+	stm	sp, {r2, r4}
+	movt	r0, #:upper16:issue_discard_thread
+	mov	r1, fp
+	mvn	r2, #0
+	bl	kthread_create_on_node
+	cmn	r0, #4096
+	mov	r4, r0
+	bhi	.L1665
+	bl	wake_up_process
+	str	r4, [r5]
+.L1784:
+	ldr	r0, [r10, #28]
+	ldr	r7, [fp, #8]
+	cmp	r0, #0
+	beq	.L1810
+	mov	r2, #120
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	subs	r6, r0, #0
+	beq	.L1663
+.L1666:
+	ldr	r3, [fp, #28]
+	movw	r1, #33488
+	str	r6, [r3]
+	ldr	r3, [fp, #28]
+	ldr	r3, [r3, #32]
+	add	r3, r3, r3, lsl #1
+	lsl	r4, r3, #3
+	mov	r0, r4
+	bl	__kmalloc
+	cmp	r0, #0
+	strne	r0, [r6, #60]
+	beq	.L1947
+.L1785:
+	ldr	r3, [fp, #28]
+	movw	r1, #33488
+	ldr	r4, [r3, #32]
+	add	r4, r4, #31
+	lsr	r4, r4, #5
+	lsl	r4, r4, #2
+	mov	r0, r4
+	bl	__kmalloc
+	cmp	r0, #0
+	strne	r0, [r6, #28]
+	beq	.L1948
+.L1669:
+	ldr	r3, [fp, #28]
+	ldr	r3, [r3, #32]
+	cmp	r3, #0
+	beq	.L1678
+	mov	r5, #0
+	ldr	r3, [r6, #60]
+	mov	r8, r5
+	b	.L1674
+.L1930:
+	mov	r2, #64
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+.L1786:
+	str	r0, [r4, #12]
+	ldr	r3, [r6, #60]
+	add	r2, r3, r5
+	ldr	r2, [r2, #12]
+	cmp	r2, #0
+	beq	.L1663
+.L1673:
+	ldr	r2, [fp, #28]
+	add	r8, r8, #1
+	add	r5, r5, #24
+	ldr	r2, [r2, #32]
+	cmp	r8, r2
+	bcs	.L1678
+.L1674:
+	ldr	r0, [r10, #24]
+	add	r4, r3, r5
+	cmp	r0, #0
+	moveq	r0, #16
+	beq	.L1670
+	mov	r2, #64
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+.L1670:
+	str	r0, [r4, #4]
+	ldr	r0, [r10, #24]
+	ldr	r4, [r6, #60]
+	cmp	r0, #0
+	add	r4, r4, r5
+	moveq	r0, #16
+	beq	.L1671
+	mov	r2, #64
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+.L1671:
+	str	r0, [r4, #8]
+	ldr	r3, [r6, #60]
+	add	r4, r3, r5
+	ldr	r2, [r4, #4]
+	cmp	r2, #0
+	beq	.L1663
+	ldr	r2, [r4, #8]
+	cmp	r2, #0
+	beq	.L1663
+	ldr	r2, [fp]
+	ldr	r1, [r2, #208]
+	ldr	r1, [r1, #88]
+	ldr	r1, [r1, #500]
+	ldr	r1, [r1, #556]
+	tst	r1, #16384
+	bne	.L1672
+	ldr	r2, [r2, #616]
+	ldr	r2, [r2, #8]
+	ldr	r2, [r2, #2180]	@ unaligned
+	tst	r2, #2
+	beq	.L1673
+.L1672:
+	ldr	r0, [r10, #24]
+	cmp	r0, #0
+	bne	.L1930
+	mov	r0, #16
+	b	.L1786
+.L1946:
+	ldr	r0, [r10, #52]
+	cmp	r0, #0
+	beq	.L1809
+	movw	r2, #4176
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	subs	r5, r0, #0
+	beq	.L1663
+.L1662:
+	add	ip, r5, #4096
+	add	r2, r5, #4
+	add	ip, ip, #12
+	add	r3, r5, #12
+	str	r2, [r5, #4]
+	str	r2, [r5, #8]
+.L1664:
+	str	r3, [r3]
+	str	r3, [r3, #4]
+	add	r3, r3, #8
+	cmp	ip, r3
+	bne	.L1664
+	add	r6, r5, #4096
+	movw	r1, #:lower16:.LC14
+	ldr	r2, .L1976
+	movt	r1, #:upper16:.LC14
+	add	r0, r6, #32
+	str	ip, [r6, #12]
+	str	ip, [r6, #16]
+	bl	__mutex_init
+	mov	r3, #0
+	movw	r1, #:lower16:.LC15
+	movt	r1, #:upper16:.LC15
+	add	r0, r6, #20
+	str	r3, [r6, #52]
+	str	r3, [r6, #64]
+	str	r3, [r6, #68]
+	str	r3, [r6, #72]
+	ldr	r2, [fp, #28]
+	ldr	lr, [fp, #692]
+	ldr	ip, [r2, #32]
+	str	r3, [r6, #60]
+	str	r3, [r6, #76]
+	ldr	r2, .L1976
+	lsl	r3, ip, lr
+	str	r3, [r6, #56]
+	bl	__init_waitqueue_head
+	ldr	r3, [fp, #28]
+	str	r5, [r3, #80]
+	b	.L1661
+.L1967:
+	mov	r2, r0
+	ldr	r1, [sp, #20]
+	mov	r0, fp
+	bl	restore_node_summary
+	cmp	r0, #0
+	beq	.L1727
+	cmp	r9, #0
+	mov	r3, r9
+	mov	r5, r9
+	mov	r4, r0
+	ldr	r9, [sp, #28]
+	beq	.L1654
+	ldr	r3, [r3]
+	tst	r3, #1
+	beq	.L1949
+.L1728:
+	mov	r0, r5
+	bl	unlock_page
+	mov	r0, r5
+	bl	put_page
+.L1654:
+	ldr	r2, [sp, #148]
+	mov	r0, r4
+	ldr	r3, [r9]
+	cmp	r2, r3
+	bne	.L1950
+	add	sp, sp, #156
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L1808:
+	mov	r0, #16
+	b	.L1655
+.L1975:
+	movw	r3, #:lower16:pgprot_kernel
+	mov	r0, r4
+	movt	r3, #:upper16:pgprot_kernel
+	movw	r1, #32976
+	ldr	r2, [r3]
+	orr	r2, r2, #512
+	bl	__vmalloc
+	cmp	r0, #0
+	str	r0, [r5, #88]
+	bne	.L1806
+.L1663:
+	mvn	r4, #11
+	b	.L1654
+.L1809:
+	mov	r5, #16
+	b	.L1662
+.L1810:
+	mov	r6, #16
+	b	.L1666
+.L1678:
+	ldr	r0, [r10, #24]
+	cmp	r0, #0
+	beq	.L1951
+	mov	r2, #64
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	cmp	r0, #0
+	str	r0, [r6, #24]
+	beq	.L1663
+.L1679:
+	ldr	r3, [fp, #700]
+	cmp	r3, #1
+	bls	.L1681
+	ldr	r4, [fp, #708]
+	movw	r1, #33488
+	lsl	r4, r4, #2
+	mov	r0, r4
+	bl	__kmalloc
+	cmp	r0, #0
+	strne	r0, [r6, #64]
+	beq	.L1952
+.L1681:
+	ldr	r3, [fp, #8]
+	mov	r2, #208
+	ldr	r0, [fp, #368]
+	ldr	r4, [r7, #56]	@ unaligned
+	ldr	r3, [r3, #1664]	@ unaligned
+	ldr	r5, [r0, #156]	@ unaligned
+	lsr	r4, r4, #1
+	cmp	r3, #0
+	addne	r0, r0, #4096
+	addeq	r0, r0, #192
+	mov	r1, r5
+	bl	kmemdup
+	cmp	r0, #0
+	str	r0, [r6, #16]
+	beq	.L1663
+	movw	r3, #:lower16:.LANCHOR1
+	mov	r2, #0
+	movt	r3, #:upper16:.LANCHOR1
+	mov	r1, #55
+	str	r3, [r6]
+	ldr	r3, [r7, #80]	@ unaligned
+	str	r3, [r6, #4]
+	ldr	r3, [fp, #692]
+	str	r2, [r6, #12]
+	str	r5, [r6, #20]
+	str	r2, [r6, #32]
+	str	r1, [r6, #36]
+	lsl	r4, r4, r3
+	str	r4, [r6, #8]
+	ldr	r3, [fp, #368]
+	ldr	r2, [r3, #168]	@ unaligned
+	ldr	r3, [r3, #172]	@ unaligned
+	strd	r2, [r6, #72]
+	bl	get_seconds
+	asr	r5, r0, #31
+	mov	r4, r0
+	ldr	r2, .L1976
+	movw	r1, #:lower16:.LC17
+	add	r0, r6, #40
+	movt	r1, #:upper16:.LC17
+	strd	r4, [r6, #80]
+	bl	__mutex_init
+	ldr	r0, [r10, #24]
+	cmp	r0, #0
+	beq	.L1813
+	mov	r2, #24
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	subs	r6, r0, #0
+	beq	.L1663
+.L1686:
+	ldr	r3, [fp, #28]
+	mov	r1, #720
+	str	r6, [r3, #4]
+	ldr	r3, [fp, #28]
+	ldr	r4, [r3, #32]
+	add	r4, r4, #31
+	lsr	r4, r4, #5
+	lsl	r4, r4, #2
+	mov	r0, r4
+	bl	__kmalloc
+	cmp	r0, #0
+	strne	r0, [r6, #16]
+	beq	.L1953
+.L1788:
+	ldr	r5, [fp, #708]
+	mov	r1, #720
+	add	r5, r5, #31
+	lsr	r5, r5, #5
+	lsl	r5, r5, #2
+	mov	r0, r5
+	bl	__kmalloc
+	cmp	r0, #0
+	strne	r0, [r6, #20]
+	beq	.L1954
+.L1789:
+	cmp	r4, #0
+	bne	.L1955
+.L1689:
+	cmp	r5, #0
+	bne	.L1956
+.L1690:
+	ldr	r3, [fp, #28]
+	mov	r2, #0
+	movw	r1, #32976
+	ldr	r0, [fp, #692]
+	ldr	ip, [r3, #16]
+	ldr	r3, [r3, #20]
+	str	r2, [r6, #4]
+	str	r2, [r6, #8]
+	str	r2, [r6, #12]
+	sub	r3, r3, ip
+	lsr	r3, r3, r0
+	mov	r0, #384
+	str	r3, [r6]
+	bl	__kmalloc
+	cmp	r0, #0
+	beq	.L1663
+	ldr	r3, [fp, #28]
+	movw	r6, #:lower16:.LC18
+	movw	r7, #:lower16:.LC19
+	ldr	r5, .L1976
+	mov	r4, r0
+	movt	r6, #:upper16:.LC18
+	movt	r7, #:upper16:.LC19
+	add	r8, r0, #384
+	str	r0, [r3, #12]
+.L1695:
+	mov	r0, r4
+	mov	r2, r5
+	mov	r1, r6
+	bl	__mutex_init
+	ldr	r0, [r10, #48]
+	cmp	r0, #0
+	moveq	r3, #16
+	streq	r3, [r4, #20]
+	beq	.L1692
+	mov	r2, #4096
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	cmp	r0, #0
+	str	r0, [r4, #20]
+	beq	.L1663
+.L1692:
+	add	r0, r4, #24
+	mov	r2, r5
+	mov	r1, r7
+	bl	__init_rwsem
+	ldr	r0, [r10, #36]
+	cmp	r0, #0
+	moveq	r3, #16
+	streq	r3, [r4, #40]
+	beq	.L1694
+	movw	r2, #507
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	cmp	r0, #0
+	str	r0, [r4, #40]
+	beq	.L1663
+.L1694:
+	mvn	r2, #0
+	mov	r3, #0
+	add	r4, r4, #64
+	str	r2, [r4, #-16]
+	strh	r3, [r4, #-12]	@ movhi
+	cmp	r8, r4
+	bne	.L1695
+	ldr	r8, [fp, #368]
+	ldr	r3, [r8, #132]	@ unaligned
+	ands	r0, r3, #4
+	moveq	r2, #6
+	moveq	r7, r0
+	beq	.L1696
+	ldrb	r3, [r8, #176]	@ zero_extendqisi2
+	ldrb	r2, [r8, #177]	@ zero_extendqisi2
+	cmp	r3, #1
+	ldrhne	r3, [r8, #116]	@ unaligned
+	ldreq	r3, [fp, #696]
+	cmp	r2, #1
+	ldrhne	r2, [r8, #118]	@ unaligned
+	ldreq	r2, [fp, #696]
+	add	r3, r3, r2
+	ldrb	r2, [r8, #178]	@ zero_extendqisi2
+	cmp	r2, #1
+	ldreq	r2, [fp, #696]
+	ldrhne	r2, [r8, #120]	@ unaligned
+	add	r3, r2, r3
+	cmp	r3, #440
+	blt	.L1703
+	ldr	r1, [fp, #8]
+	sub	r3, r3, #436
+	ldr	r0, [fp, #372]
+	sub	r3, r3, #3
+	cmp	r3, #584
+	ldr	ip, [r8, #140]	@ unaligned
+	movle	r2, #2
+	movgt	r2, #3
+	ldr	r1, [r1, #76]	@ unaligned
+	cmp	r0, #2
+	mov	r0, #1
+	ldreq	r3, [fp, #696]
+	str	r0, [sp]
+	mov	r0, fp
+	addeq	r1, r1, r3
+	mov	r3, #0
+	add	r1, ip, r1
+	bl	ra_meta_pages
+	ldr	r8, [fp, #368]
+.L1703:
+	ldr	r3, [fp, #8]
+	movw	r1, #:lower16:.LC4
+	mov	r0, fp
+	ldr	r2, [fp, #372]
+	movt	r1, #:upper16:.LC4
+	movw	r5, #507
+	mov	r7, #0
+	ldr	r3, [r3, #76]	@ unaligned
+	cmp	r2, #2
+	ldreq	r2, [fp, #696]
+	addeq	r3, r3, r2
+	ldr	r2, [r8, #140]	@ unaligned
+	str	r1, [sp, #28]
+	add	r3, r2, r3
+	mov	r1, r3
+	add	r3, r3, #1
+	str	r3, [sp, #20]
+	bl	get_meta_page
+	mov	r4, r0
+	bl	page_address
+	ldr	r3, [fp, #28]
+	mov	r6, r0
+	mov	r1, r0
+	mov	r2, r5
+	str	r6, [sp, #24]
+	ldr	r3, [r3, #12]
+	ldr	r0, [r3, #40]
+	bl	memcpy
+	ldr	r3, [fp, #28]
+	add	r1, r6, r5
+	mov	r2, r5
+	movw	r6, #1014
+	ldr	r3, [r3, #12]
+	ldr	r0, [r3, #168]
+	bl	memcpy
+	str	r8, [sp, #8]
+	mov	r8, fp
+	str	r10, [sp, #32]
+	str	r9, [sp, #36]
+.L1714:
+	ldr	lr, [r8, #28]
+	add	r3, r7, #20
+	lsl	r0, r7, #6
+	ldr	r2, [sp, #8]
+	add	r1, r7, #56
+	ldr	fp, [lr, #12]
+	add	r3, r2, r3, lsl #2
+	ldr	ip, [r3, #4]	@ unaligned
+	add	r3, r2, r1, lsl #1
+	mov	r1, #5
+	add	fp, fp, r0
+	ldrh	r3, [r3, #4]	@ unaligned
+	str	ip, [fp, #60]
+	ldr	ip, [r8, #28]
+	uxth	r9, r3
+	str	r3, [sp, #40]
+	mov	r3, #0	@ movhi
+	ldr	r5, [ip, #12]
+	add	r5, r5, r0
+	ldr	r10, [r5, #20]
+	ldr	r0, [r5, #60]
+	str	r0, [r5, #48]
+	ldr	lr, [r8, #700]
+	ldr	ip, [r8, #704]
+	strh	r3, [r5, #52]	@ movhi
+	mvn	r3, #0
+	str	r3, [r5, #60]
+	udiv	lr, r0, lr
+	add	r0, r10, #4080
+	add	r0, r0, #11
+	udiv	ip, lr, ip
+	str	ip, [r5, #56]
+	bl	__memzero
+	mov	r3, #0
+	ldr	r2, [sp, #8]
+	strb	r3, [r10, #4091]
+	ldr	ip, [r8, #28]
+	ldr	r1, [r5, #48]
+	add	r0, r2, r7
+	ldr	r3, [sp, #40]
+	ldr	ip, [ip]
+	add	r1, r1, r1, lsl #1
+	ldr	ip, [ip, #60]
+	ldrb	lr, [ip, r1, lsl #3]	@ zero_extendqisi2
+	bfi	lr, r7, #0, #6
+	strb	lr, [ip, r1, lsl #3]
+	ldrb	r1, [r0, #176]	@ zero_extendqisi2
+	cmp	r1, #1
+	strb	r1, [fp, #44]
+	strh	r3, [fp, #52]	@ movhi
+	ldreq	r9, [r8, #696]
+	uxtheq	r9, r9
+	cmp	r9, #0
+	beq	.L1708
+	str	r7, [sp, #40]
+	ldr	r7, [sp, #20]
+	mov	r5, #0
+	ldr	r0, [sp, #24]
+	movw	r10, #4091
+.L1713:
+	add	r3, r0, r6
+	ldr	ip, [fp, #20]
+	rsb	r1, r5, r5, lsl #3
+	ldr	lr, [r3]	@ unaligned
+	add	r2, r6, #14
+	cmp	r2, r10
+	addls	r6, r6, #7
+	add	r2, ip, r1
+	str	lr, [ip, r1]	@ unaligned
+	ldrh	r1, [r3, #4]	@ unaligned
+	ldrb	r3, [r3, #6]	@ zero_extendqisi2
+	strh	r1, [r2, #4]	@ unaligned
+	strb	r3, [r2, #6]
+	bls	.L1710
+	cmp	r4, #0
+	beq	.L1711
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L1957
+.L1712:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	bl	put_page
+.L1711:
+	mov	r1, r7
+	mov	r0, r8
+	bl	get_meta_page
+	add	r7, r7, #1
+	mov	r6, #0
+	mov	r4, r0
+	bl	page_address
+.L1710:
+	add	r5, r5, #1
+	cmp	r5, r9
+	bne	.L1713
+	str	r7, [sp, #20]
+	ldr	r7, [sp, #40]
+	str	r0, [sp, #24]
+.L1708:
+	add	r7, r7, #1
+	cmp	r7, #3
+	bne	.L1714
+	cmp	r4, #0
+	mov	fp, r8
+	ldr	r10, [sp, #32]
+	ldr	r9, [sp, #36]
+	beq	.L1958
+	ldr	r3, [r4]
+	tst	r3, #1
+	beq	.L1959
+.L1716:
+	mov	r0, r4
+	bl	unlock_page
+	mov	r0, r4
+	bl	put_page
+	ldr	r8, [fp, #368]
+	mov	r2, #3
+	mov	r0, r2
+	ldr	r3, [r8, #132]	@ unaligned
+.L1696:
+	ands	r3, r3, #33
+	beq	.L1718
+	ldr	r3, [fp, #8]
+	ldr	r1, [fp, #372]
+	ldr	ip, [r3, #76]	@ unaligned
+	cmp	r1, #2
+	beq	.L1960
+.L1791:
+	ldr	lr, [r8, #136]	@ unaligned
+	sub	r1, r0, #7
+	mov	r3, #1
+	mov	r0, fp
+	str	r3, [sp]
+	mov	r3, #0
+	add	r1, r1, lr
+	add	r1, r1, ip
+	bl	ra_meta_pages
+	ldr	r8, [fp, #368]
+	ldr	r3, [r8, #132]	@ unaligned
+	and	r3, r3, #33
+.L1718:
+	movw	r2, #:lower16:.LC4
+	lsl	r1, r7, #6
+	movt	r2, #:upper16:.LC4
+	mov	r5, #0
+	str	r1, [sp, #8]
+	str	r9, [sp, #28]
+	str	r2, [sp, #32]
+	mov	r2, r3
+	str	r10, [sp, #36]
+	mov	r10, r8
+	b	.L1732
+.L1964:
+	add	lr, r7, #20
+	add	ip, r7, #56
+	ldr	r1, [fp, #8]
+	add	lr, r10, lr, lsl #2
+	cmp	r2, #0
+	ldr	r0, [fp, #372]
+	add	r2, r10, ip, lsl #1
+	ldr	r3, [lr, #4]	@ unaligned
+	str	r3, [sp, #20]
+	ldrh	r3, [r2, #4]	@ unaligned
+	str	r3, [sp, #24]
+	ldr	r1, [r1, #76]	@ unaligned
+	beq	.L1961
+	cmp	r0, #2
+	beq	.L1962
+.L1795:
+	ldr	r2, [r10, #136]	@ unaligned
+	add	r2, r2, r7
+	sub	r2, r2, #7
+	add	r1, r2, r1
+.L1722:
+	mov	r0, fp
+	bl	get_meta_page
+	mov	r9, r0
+	bl	page_address
+	mov	r6, r0
+.L1727:
+	ldr	r2, [fp, #28]
+	ldr	r3, [sp, #8]
+	ldr	r4, [r2, #12]
+	add	r4, r4, r3
+	add	r8, r4, #24
+	mov	r0, r4
+	bl	mutex_lock
+	mov	r0, r8
+	bl	down_write
+	add	r1, r6, #3584
+	movw	r2, #507
+	ldr	r0, [r4, #40]
+	bl	memcpy
+	mov	r0, r8
+	bl	up_write
+	mov	r1, r6
+	mov	r2, #3584
+	ldr	r0, [r4, #20]
+	bl	memcpy
+	movw	r0, #4091
+	ldr	r2, [r4, #20]
+	mvn	r3, #0
+	add	r6, r6, r0
+	mov	r1, #5
+	ldr	ip, [r6]	@ unaligned
+	str	ip, [r2, #4091]	@ unaligned
+	ldrb	ip, [r6, #4]	@ zero_extendqisi2
+	strb	ip, [r2, #4095]
+	ldr	ip, [sp, #20]
+	str	ip, [r4, #60]
+	ldr	r2, [fp, #28]
+	ldr	r6, [r2, #12]
+	ldr	r2, [sp, #8]
+	add	r6, r6, r2
+	ldr	r8, [r6, #20]
+	ldr	r2, [r6, #60]
+	add	r0, r8, r0
+	str	r2, [r6, #48]
+	ldr	lr, [fp, #700]
+	ldr	ip, [fp, #704]
+	strh	r5, [r6, #52]	@ movhi
+	str	r3, [r6, #60]
+	udiv	r2, r2, lr
+	udiv	ip, r2, ip
+	str	ip, [r6, #56]
+	bl	__memzero
+	cmp	r7, #2
+	add	r3, r10, r7
+	movle	r2, #0
+	movgt	r2, #1
+	mov	r0, r4
+	strb	r2, [r8, #4091]
+	ldr	r2, [r6, #48]
+	ldr	r1, [fp, #28]
+	add	r2, r2, r2, lsl #1
+	ldr	r1, [r1]
+	ldr	r1, [r1, #60]
+	ldrb	ip, [r1, r2, lsl #3]	@ zero_extendqisi2
+	bfi	ip, r7, #0, #6
+	strb	ip, [r1, r2, lsl #3]
+	ldr	r2, [sp, #24]
+	ldrb	r3, [r3, #176]	@ zero_extendqisi2
+	strb	r3, [r4, #44]
+	strh	r2, [r4, #52]	@ movhi
+	bl	mutex_unlock
+	cmp	r9, #0
+	beq	.L1729
+	ldr	r3, [r9]
+	tst	r3, #1
+	beq	.L1963
+.L1730:
+	mov	r0, r9
+	bl	unlock_page
+	mov	r0, r9
+	bl	put_page
+.L1729:
+	ldr	r3, [sp, #8]
+	add	r7, r7, #1
+	cmp	r7, #6
+	add	r3, r3, #64
+	str	r3, [sp, #8]
+	beq	.L1731
+	ldr	r10, [fp, #368]
+	ldr	r2, [r10, #132]	@ unaligned
+	and	r2, r2, #33
+.L1732:
+	cmp	r7, #2
+	ble	.L1964
+	add	r0, r7, #5
+	add	r1, r7, #29
+	add	r0, r10, r0, lsl #2
+	cmp	r2, #0
+	add	r2, r10, r1, lsl #1
+	ldr	r3, [r0, #4]	@ unaligned
+	sub	r0, r7, #3
+	str	r3, [sp, #20]
+	ldrh	r3, [r2, #4]	@ unaligned
+	str	r3, [sp, #24]
+	beq	.L1965
+	ldr	r2, [fp, #8]
+	ldr	r1, [fp, #372]
+	ldr	r2, [r2, #76]	@ unaligned
+	cmp	r1, #2
+	beq	.L1966
+.L1797:
+	ldr	r1, [r10, #136]	@ unaligned
+	sub	r1, r1, #4
+	add	r1, r1, r0
+	add	r1, r1, r2
+.L1725:
+	mov	r0, fp
+	bl	get_meta_page
+	mov	r9, r0
+	bl	page_address
+	ldr	r2, [fp, #368]
+	mov	r6, r0
+	ldr	r2, [r2, #132]	@ unaligned
+	tst	r2, #33
+	beq	.L1967
+	ldr	r2, [fp, #696]
+	cmp	r2, #0
+	movne	r2, r0
+	movne	r1, #0
+	beq	.L1727
+.L1726:
+	strb	r5, [r2, #4]
+	add	r1, r1, #1
+	add	r2, r2, #7
+	strb	r5, [r2, #-2]
+	strb	r5, [r2, #-1]
+	ldr	r3, [fp, #696]
+	cmp	r3, r1
+	bhi	.L1726
+	b	.L1727
+.L1665:
+	mov	r0, r5
+	str	r4, [r5]
+	bl	kfree
+	ldr	r3, [fp, #28]
+	mov	r2, #0
+	cmp	r4, #0
+	str	r2, [r3, #80]
+	bne	.L1654
+	b	.L1784
+.L1951:
+	mov	r3, #16
+	str	r3, [r6, #24]
+	b	.L1679
+.L1813:
+	mov	r6, #16
+	b	.L1686
+.L1961:
+	cmp	r0, #2
+	bne	.L1793
+	ldr	r2, [fp, #696]
+	add	r1, r1, r2
+.L1793:
+	ldr	r2, [r10, #136]	@ unaligned
+	add	r2, r2, r7
+	sub	r2, r2, #4
+	add	r1, r2, r1
+	b	.L1722
+.L1947:
+	movw	r3, #:lower16:pgprot_kernel
+	mov	r0, r4
+	movt	r3, #:upper16:pgprot_kernel
+	movw	r1, #32976
+	ldr	r2, [r3]
+	orr	r2, r2, #512
+	bl	__vmalloc
+	cmp	r0, #0
+	str	r0, [r6, #60]
+	bne	.L1785
+	b	.L1663
+.L1965:
+	ldr	r2, [fp, #28]
+	ldr	r3, [sp, #20]
+	ldr	r1, [r2, #24]
+	add	r1, r3, r1
+	b	.L1725
+.L1948:
+	movw	r3, #:lower16:pgprot_kernel
+	mov	r0, r4
+	movt	r3, #:upper16:pgprot_kernel
+	movw	r1, #32976
+	ldr	r2, [r3]
+	orr	r2, r2, #512
+	bl	__vmalloc
+	cmp	r0, #0
+	str	r0, [r6, #28]
+	bne	.L1669
+	b	.L1663
+.L1956:
+	mov	r2, r5
+	mov	r1, #255
+	bl	memset
+	b	.L1690
+.L1955:
+	mov	r2, r4
+	mov	r1, #255
+	ldr	r0, [r6, #16]
+	bl	memset
+	ldr	r0, [r6, #20]
+	b	.L1689
+.L1966:
+	ldr	r1, [fp, #696]
+	add	r2, r2, r1
+	b	.L1797
+.L1954:
+	movw	r3, #:lower16:pgprot_kernel
+	mov	r1, #208
+	movt	r3, #:upper16:pgprot_kernel
+	mov	r0, r5
+	ldr	r2, [r3]
+	orr	r2, r2, #512
+	bl	__vmalloc
+	cmp	r0, #0
+	str	r0, [r6, #20]
+	bne	.L1789
+	b	.L1663
+.L1953:
+	movw	r3, #:lower16:pgprot_kernel
+	mov	r1, #208
+	movt	r3, #:upper16:pgprot_kernel
+	mov	r0, r4
+	ldr	r2, [r3]
+	orr	r2, r2, #512
+	bl	__vmalloc
+	cmp	r0, #0
+	str	r0, [r6, #16]
+	bne	.L1788
+	b	.L1663
+.L1962:
+	ldr	r2, [fp, #696]
+	add	r1, r1, r2
+	b	.L1795
+.L1977:
+	.align	2
+.L1976:
+	.word	.LANCHOR0+16
+.L1731:
+	ldr	r1, [fp, #28]
+	movw	r2, #:lower16:.LC13
+	movw	r0, #:lower16:.LC4
+	movt	r2, #:upper16:.LC13
+	movt	r0, #:upper16:.LC4
+	ldr	r9, [sp, #28]
+	ldr	r10, [sp, #36]
+	movw	r3, #4767
+	str	r2, [sp, #44]
+	mov	r2, #0
+	movt	r3, 10724
+	str	r0, [sp, #60]
+	ldr	r0, [r1, #12]
+	str	r2, [sp, #36]
+	ldr	r2, [r1, #32]
+	ldr	r1, [r1]
+	add	r2, r2, #54
+	str	r0, [sp, #56]
+	ldr	r0, [r0, #168]
+	str	r9, [sp, #68]
+	mov	r9, r1
+	str	r0, [sp, #40]
+	umull	r0, r3, r3, r2
+	str	r1, [sp, #48]
+	str	r10, [sp, #64]
+	sub	r2, r2, r3
+	add	r3, r3, r2, lsr #1
+	lsr	r3, r3, #5
+	str	r3, [sp, #52]
+.L1747:
+	ldr	r4, [sp, #36]
+	mov	r0, #1
+	mov	r3, #2
+	mov	r2, #256
+	str	r0, [sp]
+	mov	r0, fp
+	mov	r1, r4
+	bl	ra_meta_pages
+	ldr	r3, [r9, #36]
+	add	r2, r4, r0
+	str	r2, [sp, #36]
+	mul	r5, r3, r4
+	mul	r3, r2, r3
+	cmp	r5, r3
+	str	r3, [sp, #24]
+	bcs	.L1733
+	ldr	r2, [fp, #28]
+	ldr	r3, [r2, #32]
+	cmp	r5, r3
+	bcs	.L1733
+	add	r3, sp, #74
+	add	r8, r5, r5, lsl #1
+	str	r3, [sp, #28]
+	add	r3, sp, #76
+	lsl	r8, r8, #3
+	str	r3, [sp, #20]
+	add	r3, sp, #140
+	str	r3, [sp, #8]
+.L1746:
+	movw	r3, #4767
+	ldr	r10, [r2]
+	movt	r3, 10724
+	ldr	r2, [r2, #28]
+	ldr	r4, [r9, #60]
+	umull	r1, r3, r3, r5
+	ldr	r7, [r10, #4]
+	sub	r2, r2, #1
+	cmp	r2, r5
+	add	r4, r4, r8
+	sub	r6, r5, r3
+	add	r3, r3, r6, lsr #1
+	lsr	r6, r3, #5
+	add	r7, r6, r7
+	bcc	.L1968
+.L1734:
+	ldr	r2, [r10, #16]
+	mvn	r3, r6
+	mov	r1, #1
+	and	r3, r3, #7
+	mov	r0, fp
+	ldrb	r2, [r2, r6, lsr #3]	@ zero_extendqisi2
+	ands	r3, r2, r1, lsl r3
+	ldrne	r3, [r10, #8]
+	addne	r7, r7, r3
+	mov	r1, r7
+	bl	get_meta_page
+	mov	r7, r0
+	bl	page_address
+	ldr	r1, [r9, #36]
+	mov	r3, #74
+	mov	r2, r3
+	udiv	r6, r5, r1
+	mls	r6, r1, r6, r5
+	mla	r6, r3, r6, r0
+	ldr	r0, [sp, #28]
+	mov	r1, r6
+	bl	memcpy
+	ldr	r3, [r6, #66]	@ unaligned
+	cmp	r7, #0
+	ldrh	r10, [r6]	@ unaligned
+	ldr	r6, [r6, #70]	@ unaligned
+	str	r3, [sp, #32]
+	beq	.L1736
+	ldr	r2, [r7]
+	tst	r2, #1
+	beq	.L1969
+.L1737:
+	mov	r0, r7
+	bl	unlock_page
+	mov	r0, r7
+	bl	put_page
+.L1736:
+	ldr	r2, [fp, #696]
+	ubfx	r7, r10, #0, #10
+	cmp	r7, r2
+	bhi	.L1738
+	ldr	r2, [fp, #28]
+	ldr	r2, [r2, #28]
+	sub	r2, r2, #1
+	cmp	r2, r5
+	bcc	.L1738
+.L1739:
+	ldrh	r0, [r4]
+	uxth	r7, r7
+	ldrh	ip, [r4, #2]
+	ldr	r1, [r4, #4]
+	ldr	r2, [sp, #20]
+	bfi	r0, r7, #6, #10
+	bfi	ip, r7, #0, #10
+	strh	r0, [r4]	@ movhi
+	strh	ip, [r4, #2]	@ movhi
+.L1740:
+	ldr	r7, [sp, #8]
+	add	r2, r2, #16
+	add	r1, r1, #16
+	ldr	lr, [r2, #-16]	@ unaligned
+	ldr	ip, [r2, #-12]	@ unaligned
+	ldr	r0, [r2, #-8]	@ unaligned
+	ldr	r3, [r2, #-4]	@ unaligned
+	cmp	r2, r7
+	str	lr, [r1, #-16]	@ unaligned
+	str	ip, [r1, #-12]	@ unaligned
+	str	r0, [r1, #-8]	@ unaligned
+	str	r3, [r1, #-4]	@ unaligned
+	bne	.L1740
+	ldr	r1, [r4, #8]
+	ldr	r2, [sp, #20]
+.L1741:
+	ldr	r7, [sp, #8]
+	add	r2, r2, #16
+	add	r1, r1, #16
+	ldr	lr, [r2, #-16]	@ unaligned
+	ldr	ip, [r2, #-12]	@ unaligned
+	ldr	r0, [r2, #-8]	@ unaligned
+	ldr	r3, [r2, #-4]	@ unaligned
+	cmp	r2, r7
+	str	lr, [r1, #-16]	@ unaligned
+	str	ip, [r1, #-12]	@ unaligned
+	str	r0, [r1, #-8]	@ unaligned
+	str	r3, [r1, #-4]	@ unaligned
+	bne	.L1741
+	ldrb	r2, [r4]	@ zero_extendqisi2
+	asr	r3, r10, #10
+	str	r6, [r4, #20]
+	ldr	r1, [sp, #32]
+	bfi	r2, r3, #0, #6
+	strb	r2, [r4]
+	str	r1, [r4, #16]
+	ldr	r3, [fp]
+	ldr	r2, [r3, #208]
+	ldr	r2, [r2, #88]
+	ldr	r2, [r2, #500]
+	ldr	r2, [r2, #556]
+	tst	r2, #16384
+	bne	.L1742
+	ldr	r3, [r3, #616]
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, #2180]	@ unaligned
+	tst	r3, #2
+	beq	.L1743
+.L1742:
+	ldr	r3, [fp, #368]
+	ldr	r0, [r4, #12]
+	ldr	r3, [r3, #132]	@ unaligned
+	tst	r3, #256
+	beq	.L1970
+	mov	r2, #64
+	mov	r1, #255
+	bl	memset
+.L1743:
+	ldr	r3, [fp, #700]
+	cmp	r3, #1
+	bls	.L1745
+	ldr	r2, [fp, #28]
+	udiv	r3, r5, r3
+	ldrh	r0, [r4]
+	ldr	r2, [r2]
+	ldr	r1, [r2, #64]
+	ldr	r2, [r1, r3, lsl #2]
+	add	r2, r2, r0, lsr #6
+	str	r2, [r1, r3, lsl #2]
+.L1745:
+	ldr	r3, [sp, #24]
+	add	r5, r5, #1
+	cmp	r3, r5
+	beq	.L1733
+	ldr	r2, [fp, #28]
+	add	r8, r8, #24
+	ldr	r3, [r2, #32]
+	cmp	r5, r3
+	bcc	.L1746
+.L1733:
+	ldr	r2, [sp, #36]
+	ldr	r3, [sp, #52]
+	cmp	r3, r2
+	bhi	.L1747
+	ldr	r3, [sp, #56]
+	ldr	r10, [sp, #64]
+	ldr	r9, [sp, #68]
+	add	r3, r3, #152
+	mov	r0, r3
+	str	r3, [sp, #64]
+	bl	down_read
+	ldr	r2, [sp, #40]
+	ldrh	r3, [r2]	@ unaligned
+	cmp	r3, #0
+	beq	.L1748
+	movw	r3, #:lower16:.LC13
+	add	r5, r2, #6
+	str	r10, [sp, #52]
+	add	r2, sp, #74
+	movt	r3, #:upper16:.LC13
+	str	r2, [sp, #44]
+	add	r2, sp, #76
+	str	r9, [sp, #56]
+	str	r3, [sp, #68]
+	mov	r3, #0
+	str	r2, [sp, #20]
+	mov	r9, r3
+	add	r2, sp, #140
+	str	r2, [sp, #24]
+.L1749:
+	ldr	r2, [sp, #40]
+	mov	r3, #78
+	mov	r1, r5
+	ldr	r0, [sp, #44]
+	mla	r3, r3, r9, r2
+	ldr	r2, [sp, #48]
+	ldr	r8, [r3, #2]	@ unaligned
+	ldr	r4, [r2, #60]
+	mov	r2, #74
+	bl	memcpy
+	ldrh	r3, [r5]	@ unaligned
+	ldr	r2, [fp, #696]
+	add	r10, r8, r8, lsl #1
+	ldr	r1, [r5, #66]	@ unaligned
+	lsl	r7, r10, #3
+	str	r3, [sp, #28]
+	ubfx	r3, r3, #0, #10
+	cmp	r3, r2
+	ldrh	r2, [r4, r7]
+	add	r6, r4, r7
+	str	r1, [sp, #32]
+	ldr	r1, [r5, #70]	@ unaligned
+	lsr	r2, r2, #6
+	str	r2, [sp, #8]
+	str	r1, [sp, #36]
+	bhi	.L1750
+	ldr	r2, [fp, #28]
+	ldr	r2, [r2, #28]
+	sub	r2, r2, #1
+	cmp	r8, r2
+	bhi	.L1750
+.L1751:
+	ldrh	r2, [r4, r7]
+	uxth	r0, r3
+	str	r4, [sp, #60]
+	ldr	r3, [sp, #20]
+	bfi	r2, r0, #6, #10
+	strh	r2, [r4, r7]	@ movhi
+	ldrh	r1, [r6, #2]
+	ldr	r2, [r6, #4]
+	bfi	r1, r0, #0, #10
+	strh	r1, [r6, #2]	@ movhi
+.L1752:
+	ldr	r4, [sp, #24]
+	add	r3, r3, #16
+	add	r2, r2, #16
+	ldr	lr, [r3, #-16]	@ unaligned
+	ldr	ip, [r3, #-12]	@ unaligned
+	ldr	r0, [r3, #-8]	@ unaligned
+	ldr	r1, [r3, #-4]	@ unaligned
+	cmp	r3, r4
+	str	lr, [r2, #-16]	@ unaligned
+	str	ip, [r2, #-12]	@ unaligned
+	str	r0, [r2, #-8]	@ unaligned
+	str	r1, [r2, #-4]	@ unaligned
+	bne	.L1752
+	ldr	r2, [r6, #8]
+	ldr	r3, [sp, #20]
+	ldr	r4, [sp, #60]
+.L1753:
+	ldr	r1, [r3, #12]	@ unaligned
+	add	r3, r3, #16
+	add	r2, r2, #16
+	ldr	lr, [r3, #-16]	@ unaligned
+	ldr	ip, [r3, #-12]	@ unaligned
+	ldr	r0, [r3, #-8]	@ unaligned
+	str	r1, [sp, #60]
+	ldr	r1, [sp, #24]
+	str	lr, [r2, #-16]	@ unaligned
+	str	ip, [r2, #-12]	@ unaligned
+	str	r0, [r2, #-8]	@ unaligned
+	cmp	r3, r1
+	ldr	r1, [sp, #60]
+	str	r1, [r2, #-4]	@ unaligned
+	bne	.L1753
+	ldr	r3, [sp, #28]
+	ldrb	r2, [r4, r10, lsl #3]	@ zero_extendqisi2
+	asr	r3, r3, #10
+	bfi	r2, r3, #0, #6
+	ldr	r3, [sp, #32]
+	strb	r2, [r4, r10, lsl #3]
+	str	r3, [r6, #16]
+	ldr	r3, [sp, #36]
+	str	r3, [r6, #20]
+	ldr	r3, [fp]
+	ldr	r2, [r3, #208]
+	ldr	r2, [r2, #88]
+	ldr	r2, [r2, #500]
+	ldr	r2, [r2, #556]
+	tst	r2, #16384
+	bne	.L1754
+	ldr	r3, [r3, #616]
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, #2180]	@ unaligned
+	tst	r3, #2
+	beq	.L1755
+.L1754:
+	ldr	r3, [fp, #368]
+	ldr	r0, [r6, #12]
+	ldr	r3, [r3, #132]	@ unaligned
+	tst	r3, #256
+	beq	.L1971
+	mov	r2, #64
+	mov	r1, #255
+	bl	memset
+.L1755:
+	ldr	r3, [fp, #700]
+	cmp	r3, #1
+	bls	.L1757
+	ldr	r2, [fp, #28]
+	udiv	r8, r8, r3
+	add	r9, r9, #1
+	ldrh	r1, [r4, r7]
+	add	r5, r5, #78
+	ldr	r3, [r2]
+	ldr	r2, [r3, #64]
+	ldr	r3, [r2, r8, lsl #2]
+	add	r3, r3, r1, lsr #6
+	ldr	r1, [sp, #8]
+	sub	r3, r3, r1
+	str	r3, [r2, r8, lsl #2]
+	ldr	r3, [sp, #40]
+	ldrh	r3, [r3]	@ unaligned
+	cmp	r9, r3
+	bcc	.L1749
+.L1945:
+	ldr	r10, [sp, #52]
+	ldr	r9, [sp, #56]
+.L1748:
+	ldr	r0, [sp, #64]
+	bl	up_read
+	ldr	r2, [fp, #28]
+	ldr	r3, [r2, #32]
+	cmp	r3, #0
+	beq	.L1759
+	mov	r6, #0
+	mov	r5, r6
+	b	.L1763
+.L1760:
+	ldr	r2, [r3, #12]
+	add	r1, r2, r1, lsr #6
+	str	r1, [r3, #12]
+.L1762:
+	ldr	r2, [fp, #28]
+	add	r5, r5, #1
+	add	r6, r6, #24
+	ldr	r3, [r2, #32]
+	cmp	r5, r3
+	bcs	.L1759
+.L1763:
+	ldr	r3, [r2]
+	ldr	r1, [r3, #60]
+	ldrh	r1, [r1, r6]
+	bic	r0, r1, #63
+	cmp	r0, #0
+	bne	.L1760
+	ldr	r7, [fp, #700]
+	ldr	r4, [r2, #4]
+	udiv	r3, r5, r7
+	add	r8, r4, #12
+	mov	r0, r8
+	mul	r7, r3, r7
+	str	r3, [sp, #8]
+	bl	_raw_spin_lock
+	mov	r0, r5
+	ldr	r1, [r4, #16]
+	bl	_clear_bit
+	ldr	r1, [r4, #4]
+	mov	r2, r7
+	ldr	r0, [r4, #16]
+	add	r1, r1, #1
+	str	r1, [r4, #4]
+	ldr	r1, [fp, #700]
+	add	r1, r7, r1
+	bl	_find_next_bit_le
+	ldr	r2, [fp, #700]
+	ldr	r3, [sp, #8]
+	add	r7, r7, r2
+	cmp	r0, r7
+	bcs	.L1972
+.L1761:
+	mov	r0, r8
+	bl	_raw_spin_unlock
+	b	.L1762
+.L1970:
+	ldr	r3, [r4, #4]
+	add	r2, r3, #64
+.L1744:
+	ldr	r6, [r3]	@ unaligned
+	add	r3, r3, #16
+	add	r0, r0, #16
+	ldr	lr, [r3, #-12]	@ unaligned
+	ldr	ip, [r3, #-8]	@ unaligned
+	ldr	r1, [r3, #-4]	@ unaligned
+	cmp	r3, r2
+	str	r6, [r0, #-16]	@ unaligned
+	str	lr, [r0, #-12]	@ unaligned
+	str	ip, [r0, #-8]	@ unaligned
+	str	r1, [r0, #-4]	@ unaligned
+	bne	.L1744
+	ldr	r1, [fp, #696]
+	ldr	r3, [fp, #744]
+	ldrh	r2, [r4]
+	add	r3, r3, r1
+	sub	r3, r3, r2, lsr #6
+	str	r3, [fp, #744]
+	b	.L1743
+.L1738:
+	movw	r1, #663
+	ldr	r0, [sp, #44]
+	bl	warn_slowpath_null
+	add	r1, fp, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L1739
+.L1968:
+	movw	r1, #625
+	ldr	r0, [sp, #44]
+	bl	warn_slowpath_null
+	add	r1, fp, #16
+	mov	r0, #2
+	bl	_set_bit
+	b	.L1734
+.L1969:
+	movw	r1, #1716
+	ldr	r0, [sp, #60]
+	bl	warn_slowpath_null
+	ldr	r2, [r7, #4]
+	mov	r0, #2
+	ldr	r2, [r2]
+	ldr	r2, [r2, #28]
+	ldr	r1, [r2, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1737
+.L1757:
+	ldr	r3, [sp, #40]
+	add	r9, r9, #1
+	add	r5, r5, #78
+	ldrh	r3, [r3]	@ unaligned
+	cmp	r9, r3
+	bcc	.L1749
+	b	.L1945
+.L1971:
+	ldr	r2, [r6, #4]
+	mov	r3, r0
+	add	r1, r2, #64
+.L1756:
+	ldr	r6, [r2]	@ unaligned
+	add	r2, r2, #16
+	add	r3, r3, #16
+	ldr	lr, [r2, #-12]	@ unaligned
+	ldr	ip, [r2, #-8]	@ unaligned
+	ldr	r0, [r2, #-4]	@ unaligned
+	cmp	r2, r1
+	str	r6, [r3, #-16]	@ unaligned
+	str	lr, [r3, #-12]	@ unaligned
+	str	ip, [r3, #-8]	@ unaligned
+	str	r0, [r3, #-4]	@ unaligned
+	bne	.L1756
+	ldr	r3, [fp, #744]
+	ldr	r1, [sp, #8]
+	ldrh	r2, [r4, r7]
+	add	r3, r1, r3
+	sub	r3, r3, r2, lsr #6
+	str	r3, [fp, #744]
+	b	.L1755
+.L1750:
+	movw	r1, #663
+	ldr	r0, [sp, #68]
+	str	r3, [sp, #60]
+	bl	warn_slowpath_null
+	add	r1, fp, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r3, [sp, #60]
+	b	.L1751
+.L1759:
+	mov	r5, #0
+	b	.L1768
+.L1765:
+	mov	r0, r7
+	add	r5, r5, #64
+	bl	_raw_spin_unlock
+	cmp	r5, #384
+	beq	.L1767
+	ldr	r2, [fp, #28]
+.L1768:
+	ldr	r4, [r2, #4]
+	ldr	r3, [r2, #12]
+	ldr	r6, [fp, #700]
+	add	r7, r4, #12
+	add	r3, r3, r5
+	mov	r0, r7
+	ldr	r8, [r3, #48]
+	bl	_raw_spin_lock
+	ldr	r1, [r4, #16]
+	mov	r0, r8
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L1765
+	ldr	r3, [r4, #4]
+	udiv	r0, r8, r6
+	ldr	r1, [r4, #20]
+	sub	r3, r3, #1
+	str	r3, [r4, #4]
+	bl	_test_and_set_bit
+	cmp	r0, #0
+	bne	.L1765
+	ldr	r3, [r4, #8]
+	sub	r3, r3, #1
+	str	r3, [r4, #8]
+	b	.L1765
+.L1767:
+	ldr	r0, [r10, #28]
+	cmp	r0, #0
+	beq	.L1816
+	mov	r2, #92
+	movw	r1, #32976
+	bl	kmem_cache_alloc_trace
+	subs	r7, r0, #0
+	beq	.L1663
+.L1769:
+	ldr	ip, [fp, #28]
+	add	r6, r7, #36
+	movw	r1, #:lower16:.LC20
+	mov	r0, r6
+	movt	r1, #:upper16:.LC20
+	ldr	r2, .L1976
+	movw	r5, #:lower16:pgprot_kernel
+	movt	r5, #:upper16:pgprot_kernel
+	str	r7, [ip, #8]
+	add	r7, r7, #4
+	bl	__mutex_init
+	ldr	r3, [fp, #28]
+	ldr	r4, [r3, #32]
+	add	r4, r4, #31
+	lsr	r4, r4, #5
+	lsl	r4, r4, #2
+	b	.L1771
+.L1805:
+	add	r7, r7, #4
+	cmp	r6, r7
+	beq	.L1973
+.L1771:
+	movw	r1, #33488
+	mov	r0, r4
+	bl	__kmalloc
+	cmp	r0, #0
+	strne	r0, [r7]
+	bne	.L1805
+	ldr	r2, [r5]
+	movw	r1, #32976
+	mov	r0, r4
+	orr	r2, r2, #512
+	bl	__vmalloc
+	cmp	r0, #0
+	str	r0, [r7]
+	bne	.L1805
+	b	.L1663
+.L1963:
+	movw	r1, #1716
+	ldr	r0, [sp, #32]
+	bl	warn_slowpath_null
+	ldr	r3, [r9, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1730
+.L1957:
+	movw	r1, #1716
+	ldr	r0, [sp, #28]
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1712
+.L1972:
+	mov	r0, r3
+	ldr	r1, [r4, #20]
+	bl	_clear_bit
+	ldr	r3, [r4, #8]
+	add	r3, r3, #1
+	str	r3, [r4, #8]
+	b	.L1761
+.L1973:
+	ldr	r3, [fp, #28]
+	movw	r6, #:lower16:.LC0
+	mov	r2, #0
+	movt	r6, #:upper16:.LC0
+	str	r2, [sp, #8]
+	ldr	r8, [r3, #4]
+	ldr	r5, [r3, #8]
+	ldr	r4, [r3, #32]
+	add	r7, r8, #12
+	add	r5, r5, #36
+.L1772:
+	mov	r0, r7
+	bl	_raw_spin_lock
+	ldr	r2, [sp, #8]
+	mov	r1, r4
+	ldr	r0, [r8, #16]
+	bl	_find_next_bit_le
+	mov	r10, r0
+	mov	r0, r7
+	bl	_raw_spin_unlock
+	ldr	r3, [fp, #28]
+	ldr	r4, [r3, #32]
+	cmp	r10, r4
+	bcs	.L1773
+	ldr	r1, [r3]
+	add	r3, r10, r10, lsl #1
+	add	r2, r10, #1
+	lsl	r3, r3, #3
+	str	r2, [sp, #8]
+	ldr	r2, [fp, #696]
+	ldr	r1, [r1, #60]
+	ldrh	r3, [r1, r3]
+	lsrs	r3, r3, #6
+	moveq	r1, #1
+	movne	r1, #0
+	cmp	r3, r2
+	orreq	r1, r1, #1
+	cmp	r1, #0
+	bne	.L1772
+	cmp	r3, r2
+	bhi	.L1974
+	mov	r0, r5
+	bl	mutex_lock
+	mov	r1, r10
+	mov	r2, #6
+	mov	r0, fp
+	bl	__locate_dirty_segment
+	mov	r0, r5
+	bl	mutex_unlock
+	ldr	r3, [fp, #28]
+	ldr	r4, [r3, #32]
+	b	.L1772
+.L1952:
+	movw	r3, #:lower16:pgprot_kernel
+	mov	r0, r4
+	movt	r3, #:upper16:pgprot_kernel
+	movw	r1, #32976
+	ldr	r2, [r3]
+	orr	r2, r2, #512
+	bl	__vmalloc
+	cmp	r0, #0
+	str	r0, [r6, #64]
+	bne	.L1681
+	b	.L1663
+.L1974:
+	movw	r1, #3240
+	mov	r0, r6
+	bl	warn_slowpath_null
+	add	r1, fp, #16
+	mov	r0, #2
+	bl	_set_bit
+	ldr	r3, [fp, #28]
+	ldr	r4, [r3, #32]
+	b	.L1772
+.L1773:
+	ldr	r4, [fp, #708]
+	movw	r1, #33488
+	ldr	r5, [r3, #8]
+	add	r4, r4, #31
+	lsr	r4, r4, #5
+	lsl	r4, r4, #2
+	mov	r0, r4
+	bl	__kmalloc
+	cmp	r0, #0
+	strne	r0, [r5, #88]
+	beq	.L1975
+.L1806:
+	ldr	r3, [fp, #28]
+	ldr	r6, [r3]
+	add	r0, r6, #40
+	str	r0, [sp, #20]
+	bl	mutex_lock
+	mvn	r2, #0
+	mvn	r3, #-2147483648
+	strd	r2, [r6, #88]
+	ldr	r7, [fp, #28]
+	ldr	r1, [r7, #32]
+	cmp	r1, #0
+	beq	.L1777
+	ldr	r8, [fp, #700]
+	mov	r5, #0
+	strd	r2, [sp, #8]
+.L1778:
+	cmp	r8, #0
+	moveq	r0, #0
+	moveq	r1, r0
+	beq	.L1783
+	ldr	lr, [r7]
+	add	ip, r8, r5
+	add	r3, r5, r5, lsl #1
+	add	r2, ip, ip, lsl #1
+	mov	r0, #0
+	mov	r1, r0
+	ldr	ip, [lr, #60]
+	add	r3, ip, r3, lsl #3
+	add	ip, ip, r2, lsl #3
+.L1779:
+	ldr	r2, [r3, #16]
+	ldr	lr, [r3, #20]
+	add	r3, r3, #24
+	adds	r0, r0, r2
+	adc	r1, r1, lr
+	cmp	ip, r3
+	bne	.L1779
+.L1783:
+	mov	r4, r8
+	.syntax divided
+@ 55 "/home/pascua14/Desktop/s5-kernel/include/linux/math64.h" 1
+	.ifnc r1,r1 ; .err ; .endif
+	.ifnc r2,r2 ; .err ; .endif
+	.ifnc r0,r0 ; .err ; .endif
+	.ifnc r4,r4 ; .err ; .endif
+	bl	__do_div64
+@ 0 "" 2
+	.arm
+	.syntax unified
+	ldrd	r0, [sp, #8]
+	cmp	r3, r1
+	cmpeq	r2, r0
+	bcs	.L1780
+	strd	r2, [r6, #88]
+	ldr	r7, [fp, #28]
+	ldr	r8, [fp, #700]
+	ldr	r1, [r7, #32]
+	add	r5, r5, r8
+	cmp	r1, r5
+	bls	.L1777
+	strd	r2, [sp, #8]
+	b	.L1778
+.L1780:
+	ldr	r3, [r7, #32]
+	add	r5, r5, r8
+	cmp	r5, r3
+	bcc	.L1778
+.L1777:
+	ldr	r5, [r7]
+	mov	r4, #0
+	ldrd	r10, [r5, #72]
+	bl	get_seconds
+	ldr	r1, [r5, #80]
+	ldr	ip, [r5, #84]
+	adds	r2, r10, r0
+	adc	r3, fp, r0, asr #31
+	mov	r10, r2
+	ldr	r0, [sp, #20]
+	mov	fp, r3
+	subs	r3, r10, r1
+	sbc	r2, fp, ip
+	str	r3, [r6, #96]
+	str	r2, [r6, #100]
+	bl	mutex_unlock
+	b	.L1654
+.L1816:
+	mov	r7, #16
+	b	.L1769
+.L1960:
+	ldr	r3, [fp, #696]
+	add	ip, ip, r3
+	b	.L1791
+.L1958:
+	ldr	r8, [r8, #368]
+	mov	r2, r7
+	mov	r0, r7
+	ldr	r3, [r8, #132]	@ unaligned
+	b	.L1696
+.L1959:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r4, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1716
+.L1950:
+	bl	__stack_chk_fail
+.L1949:
+	movw	r0, #:lower16:.LC4
+	movw	r1, #1716
+	movt	r0, #:upper16:.LC4
+	bl	warn_slowpath_null
+	ldr	r3, [r5, #4]
+	mov	r0, #2
+	ldr	r3, [r3]
+	ldr	r3, [r3, #28]
+	ldr	r1, [r3, #616]
+	add	r1, r1, #16
+	bl	_set_bit
+	b	.L1728
+	.fnend
+	.size	build_segment_manager, .-build_segment_manager
+	.align	2
+	.global	destroy_segment_manager
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	destroy_segment_manager, %function
+destroy_segment_manager:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	strd	r4, [sp, #-36]!
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	strd	r6, [sp, #8]
+	strd	r8, [sp, #16]
+	strd	r10, [sp, #24]
+	str	lr, [sp, #32]
+	ldr	r8, [r0, #28]
+	.pad #4
+	sub	sp, sp, #4
+	cmp	r8, #0
+	beq	.L1978
+	ldr	r4, [r8, #76]
+	mov	r6, r0
+	cmp	r4, #0
+	beq	.L1980
+	ldr	r0, [r4]
+	cmp	r0, #0
+	beq	.L1980
+	mov	r3, #0
+	str	r3, [r4]
+	bl	kthread_stop
+.L1980:
+	mov	r0, r4
+	bl	kfree
+	ldr	r2, [r6, #28]
+	mov	r3, #0
+	str	r3, [r2, #76]
+	ldr	r2, [r6, #28]
+	ldr	r4, [r2, #80]
+	cmp	r4, r3
+	beq	.L1981
+	ldr	r0, [r4]
+	cmp	r0, r3
+	beq	.L1982
+	str	r3, [r4]
+	bl	kthread_stop
+.L1982:
+	mov	r0, r4
+	bl	kfree
+	ldr	r3, [r6, #28]
+	mov	r2, #0
+	str	r2, [r3, #80]
+	ldr	r2, [r6, #28]
+.L1981:
+	ldr	r9, [r2, #8]
+	cmp	r9, #0
+	beq	.L1983
+	mov	r5, #0
+	mov	r4, r9
+	b	.L1987
+.L1984:
+	bl	kfree
+	add	r5, r5, #1
+	mov	r0, r7
+	str	r10, [r4, #56]
+	bl	mutex_unlock
+	cmp	r5, #8
+	beq	.L1986
+.L1985:
+	ldr	r3, [r6, #28]
+	ldr	r4, [r3, #8]
+.L1987:
+	add	r7, r4, #36
+	add	r4, r4, r5, lsl #2
+	mov	r0, r7
+	bl	mutex_lock
+	ldr	fp, [r4, #4]
+	mov	r0, fp
+	bl	is_vmalloc_addr
+	subs	r10, r0, #0
+	mov	r0, fp
+	beq	.L1984
+	bl	vfree
+	mov	r3, #0
+	add	r5, r5, #1
+	mov	r0, r7
+	str	r3, [r4, #56]
+	bl	mutex_unlock
+	cmp	r5, #8
+	bne	.L1985
+.L1986:
+	ldr	r3, [r6, #28]
+	ldr	r3, [r3, #8]
+	ldr	r4, [r3, #88]
+	mov	r0, r4
+	bl	is_vmalloc_addr
+	cmp	r0, #0
+	mov	r0, r4
+	bne	.L2041
+	bl	kfree
+.L1989:
+	ldr	r3, [r6, #28]
+	mov	r2, #0
+	mov	r0, r9
+	str	r2, [r3, #8]
+	bl	kfree
+	ldr	r2, [r6, #28]
+.L1983:
+	ldr	r7, [r2, #12]
+	cmp	r7, #0
+	beq	.L1990
+	mov	r3, #0
+	mov	r4, r7
+	add	r5, r7, #384
+	str	r3, [r2, #12]
+.L1991:
+	ldr	r0, [r4, #20]
+	add	r4, r4, #64
+	bl	kfree
+	ldr	r0, [r4, #-24]
+	bl	kfree
+	cmp	r5, r4
+	bne	.L1991
+	mov	r0, r7
+	bl	kfree
+	ldr	r2, [r6, #28]
+.L1990:
+	ldr	r4, [r2, #4]
+	cmp	r4, #0
+	beq	.L1992
+	mov	r3, #0
+	str	r3, [r2, #4]
+	ldr	r5, [r4, #16]
+	mov	r0, r5
+	bl	is_vmalloc_addr
+	cmp	r0, #0
+	mov	r0, r5
+	bne	.L2042
+	bl	kfree
+.L1994:
+	ldr	r5, [r4, #20]
+	mov	r0, r5
+	bl	is_vmalloc_addr
+	cmp	r0, #0
+	mov	r0, r5
+	beq	.L1995
+	bl	vfree
+.L1996:
+	mov	r0, r4
+	bl	kfree
+	ldr	r2, [r6, #28]
+.L1992:
+	ldr	r4, [r2]
+	cmp	r4, #0
+	beq	.L1997
+	ldr	r3, [r4, #60]
+	cmp	r3, #0
+	beq	.L1998
+	ldr	r2, [r2, #32]
+	cmp	r2, #0
+	beq	.L1998
+	mov	r5, #0
+	mov	r7, r5
+	b	.L1999
+.L2043:
+	ldr	r3, [r4, #60]
+.L1999:
+	add	r3, r3, r5
+	add	r7, r7, #1
+	ldr	r0, [r3, #4]
+	bl	kfree
+	ldr	r3, [r4, #60]
+	add	r3, r3, r5
+	ldr	r0, [r3, #8]
+	bl	kfree
+	ldr	r3, [r4, #60]
+	add	r3, r3, r5
+	add	r5, r5, #24
+	ldr	r0, [r3, #12]
+	bl	kfree
+	ldr	r3, [r6, #28]
+	ldr	r3, [r3, #32]
+	cmp	r7, r3
+	bcc	.L2043
+.L1998:
+	ldr	r0, [r4, #24]
+	bl	kfree
+	ldr	r5, [r4, #60]
+	mov	r0, r5
+	bl	is_vmalloc_addr
+	cmp	r0, #0
+	mov	r0, r5
+	beq	.L2000
+	bl	vfree
+.L2001:
+	ldr	r5, [r4, #64]
+	mov	r0, r5
+	bl	is_vmalloc_addr
+	cmp	r0, #0
+	mov	r0, r5
+	beq	.L2002
+	bl	vfree
+.L2003:
+	ldr	r5, [r4, #28]
+	mov	r0, r5
+	bl	is_vmalloc_addr
+	cmp	r0, #0
+	mov	r0, r5
+	beq	.L2004
+	bl	vfree
+.L2005:
+	ldr	r3, [r6, #28]
+	mov	r2, #0
+	str	r2, [r3]
+	ldr	r0, [r4, #16]
+	bl	kfree
+	mov	r0, r4
+	bl	kfree
+.L1997:
+	mov	r3, #0
+	mov	r0, r8
+	str	r3, [r6, #28]
+	add	sp, sp, #4
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	ldr	lr, [sp, #32]
+	add	sp, sp, #36
+	b	kfree
+.L1978:
+	add	sp, sp, #4
+	@ sp needed
+	ldrd	r4, [sp]
+	ldrd	r6, [sp, #8]
+	ldrd	r8, [sp, #16]
+	ldrd	r10, [sp, #24]
+	add	sp, sp, #32
+	ldr	pc, [sp], #4
+.L2004:
+	bl	kfree
+	b	.L2005
+.L2002:
+	bl	kfree
+	b	.L2003
+.L2000:
+	bl	kfree
+	b	.L2001
+.L2042:
+	bl	vfree
+	b	.L1994
+.L2041:
+	bl	vfree
+	b	.L1989
+.L1995:
+	bl	kfree
+	b	.L1996
+	.fnend
+	.size	destroy_segment_manager, .-destroy_segment_manager
+	.align	2
+	.global	destroy_segment_manager_caches
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	destroy_segment_manager_caches, %function
+destroy_segment_manager_caches:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	.save {r4, lr}
+	str	r4, [sp, #-8]!
+	movw	r4, #:lower16:.LANCHOR0
+	movt	r4, #:upper16:.LANCHOR0
+	str	lr, [sp, #4]
+	ldr	r0, [r4, #4]
+	bl	kmem_cache_destroy
+	ldr	r0, [r4, #8]
+	bl	kmem_cache_destroy
+	ldr	r0, [r4]
+	bl	kmem_cache_destroy
+	ldr	lr, [sp, #4]
+	ldr	r0, [r4, #12]
+	ldr	r4, [sp]
+	add	sp, sp, #8
+	b	kmem_cache_destroy
+	.fnend
+	.size	destroy_segment_manager_caches, .-destroy_segment_manager_caches
+	.section	.rodata
+	.align	2
+	.set	.LANCHOR1,. + 0
+	.type	default_salloc_ops, %object
+	.size	default_salloc_ops, 4
+default_salloc_ops:
+	.word	allocate_segment_by_default
+	.bss
+	.align	2
+	.set	.LANCHOR0,. + 0
+	.type	discard_entry_slab, %object
+	.size	discard_entry_slab, 4
+discard_entry_slab:
+	.space	4
+	.type	sit_entry_set_slab, %object
+	.size	sit_entry_set_slab, 4
+sit_entry_set_slab:
+	.space	4
+	.type	discard_cmd_slab, %object
+	.size	discard_cmd_slab, 4
+discard_cmd_slab:
+	.space	4
+	.type	__key.7538, %object
+	.size	__key.7538, 0
+__key.7538:
+	.type	inmem_entry_slab, %object
+	.size	inmem_entry_slab, 4
+inmem_entry_slab:
+	.space	4
+	.type	__key.33396, %object
+	.size	__key.33396, 0
+__key.33396:
+	.type	__key.33820, %object
+	.size	__key.33820, 0
+__key.33820:
+	.type	__key.33822, %object
+	.size	__key.33822, 0
+__key.33822:
+	.type	__key.34405, %object
+	.size	__key.34405, 0
+__key.34405:
+	.type	__key.34424, %object
+	.size	__key.34424, 0
+__key.34424:
+	.type	__key.34425, %object
+	.size	__key.34425, 0
+__key.34425:
+	.type	__key.34497, %object
+	.size	__key.34497, 0
+__key.34497:
+	.section	.rodata.str1.4,"aMS",%progbits,1
+	.align	2
+.LC0:
+	.ascii	"/home/pascua14/Desktop/s5-kernel/fs/f2fs/segment.c\000"
+	.space	1
+.LC1:
+	.ascii	"&x->wait\000"
+	.space	3
+.LC2:
+	.ascii	"Issue discard failed, ret: %d\000"
+	.space	2
+.LC3:
+	.ascii	"<6>\000"
+.LC4:
+	.ascii	"/home/pascua14/Desktop/s5-kernel/fs/f2fs/f2fs.h\000"
+.LC5:
+	.ascii	"discard_entry\000"
+	.space	2
+.LC6:
+	.ascii	"discard_cmd\000"
+.LC7:
+	.ascii	"sit_entry_set\000"
+	.space	2
+.LC8:
+	.ascii	"inmem_page_entry\000"
+	.space	3
+.LC9:
+	.ascii	"&fcc->flush_wait_queue\000"
+	.space	1
+.LC10:
+	.ascii	"f2fs_flush-%u:%u\000"
+	.space	3
+.LC11:
+	.ascii	"Found FS corruption, run fsck to fix.\000"
+	.space	2
+.LC12:
+	.ascii	"<4>\000"
+.LC13:
+	.ascii	"/home/pascua14/Desktop/s5-kernel/fs/f2fs/segment.h\000"
+	.space	1
+.LC14:
+	.ascii	"&dcc->cmd_lock\000"
+	.space	1
+.LC15:
+	.ascii	"&dcc->discard_wait_queue\000"
+	.space	3
+.LC16:
+	.ascii	"f2fs_discard-%u:%u\000"
+	.space	1
+.LC17:
+	.ascii	"&sit_i->sentry_lock\000"
+.LC18:
+	.ascii	"&array[i].curseg_mutex\000"
+	.space	1
+.LC19:
+	.ascii	"&array[i].journal_rwsem\000"
+.LC20:
+	.ascii	"&dirty_i->seglist_lock\000"
+	.ident	"GCC: (Linaro GCC 7.4-2019.02) 7.4.1 20181213 [linaro-7.4-2019.02 revision 56ec6f6b99cc167ff0c2f8e1a2eed33b1edc85d4]"
+	.section	.note.GNU-stack,"",%progbits
diff --git a/fs/f2fs/segment.c b/fs/f2fs/segment.c
deleted file mode 100644
index 8ade22ba3a30..000000000000
--- a/fs/f2fs/segment.c
+++ /dev/null
@@ -1,3527 +0,0 @@
-/*
- * fs/f2fs/segment.c
- *
- * Copyright (c) 2012 Samsung Electronics Co., Ltd.
- *             http://www.samsung.com/
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-#include <linux/fs.h>
-#include <linux/f2fs_fs.h>
-#include <linux/bio.h>
-#include <linux/blkdev.h>
-#include <linux/prefetch.h>
-#include <linux/kthread.h>
-#include <linux/swap.h>
-#include <linux/timer.h>
-
-#include "f2fs.h"
-#include "segment.h"
-#include "node.h"
-#include "trace.h"
-#include <trace/events/f2fs.h>
-
-#define __reverse_ffz(x) __reverse_ffs(~(x))
-
-static struct kmem_cache *discard_entry_slab;
-static struct kmem_cache *discard_cmd_slab;
-static struct kmem_cache *sit_entry_set_slab;
-static struct kmem_cache *inmem_entry_slab;
-
-/**
- * Copied from latest lib/llist.c
- * llist_for_each_entry_safe - iterate over some deleted entries of
- *                             lock-less list of given type
- *			       safe against removal of list entry
- * @pos:	the type * to use as a loop cursor.
- * @n:		another type * to use as temporary storage
- * @node:	the first entry of deleted list entries.
- * @member:	the name of the llist_node with the struct.
- *
- * In general, some entries of the lock-less list can be traversed
- * safely only after being removed from list, so start with an entry
- * instead of list head.
- *
- * If being used on entries deleted from lock-less list directly, the
- * traverse order is from the newest to the oldest added entry.  If
- * you want to traverse from the oldest to the newest, you must
- * reverse the order by yourself before traversing.
- */
-#define llist_for_each_entry_safe(pos, n, node, member)			       \
-	for (pos = llist_entry((node), typeof(*pos), member);		       \
-		&pos->member != NULL &&					       \
-		(n = llist_entry(pos->member.next, typeof(*n), member), true); \
-		pos = n)
-
-/**
- * Copied from latest lib/llist.c
- * llist_reverse_order - reverse order of a llist chain
- * @head:	first item of the list to be reversed
- *
- * Reverse the order of a chain of llist entries and return the
- * new first entry.
- */
-struct llist_node *llist_reverse_order(struct llist_node *head)
-{
-	struct llist_node *new_head = NULL;
-
-	while (head) {
-		struct llist_node *tmp = head;
-		head = head->next;
-		tmp->next = new_head;
-		new_head = tmp;
-	}
-
-	return new_head;
-}
-
-/**
- * Copied from latest linux/list.h
- * list_last_entry - get the last element from a list
- * @ptr:        the list head to take the element from.
- * @type:       the type of the struct this is embedded in.
- * @member:     the name of the list_struct within the struct.
- *
- * Note, that list is expected to be not empty.
- */
-#define list_last_entry(ptr, type, member) \
-	list_entry((ptr)->prev, type, member)
-
-static unsigned long __reverse_ulong(unsigned char *str)
-{
-	unsigned long tmp = 0;
-	int shift = 24, idx = 0;
-
-#if BITS_PER_LONG == 64
-	shift = 56;
-#endif
-	while (shift >= 0) {
-		tmp |= (unsigned long)str[idx++] << shift;
-		shift -= BITS_PER_BYTE;
-	}
-	return tmp;
-}
-
-/*
- * __reverse_ffs is copied from include/asm-generic/bitops/__ffs.h since
- * MSB and LSB are reversed in a byte by f2fs_set_bit.
- */
-static inline unsigned long __reverse_ffs(unsigned long word)
-{
-	int num = 0;
-
-#if BITS_PER_LONG == 64
-	if ((word & 0xffffffff00000000UL) == 0)
-		num += 32;
-	else
-		word >>= 32;
-#endif
-	if ((word & 0xffff0000) == 0)
-		num += 16;
-	else
-		word >>= 16;
-
-	if ((word & 0xff00) == 0)
-		num += 8;
-	else
-		word >>= 8;
-
-	if ((word & 0xf0) == 0)
-		num += 4;
-	else
-		word >>= 4;
-
-	if ((word & 0xc) == 0)
-		num += 2;
-	else
-		word >>= 2;
-
-	if ((word & 0x2) == 0)
-		num += 1;
-	return num;
-}
-
-/*
- * __find_rev_next(_zero)_bit is copied from lib/find_next_bit.c because
- * f2fs_set_bit makes MSB and LSB reversed in a byte.
- * @size must be integral times of unsigned long.
- * Example:
- *                             MSB <--> LSB
- *   f2fs_set_bit(0, bitmap) => 1000 0000
- *   f2fs_set_bit(7, bitmap) => 0000 0001
- */
-static unsigned long __find_rev_next_bit(const unsigned long *addr,
-			unsigned long size, unsigned long offset)
-{
-	const unsigned long *p = addr + BIT_WORD(offset);
-	unsigned long result = size;
-	unsigned long tmp;
-
-	if (offset >= size)
-		return size;
-
-	size -= (offset & ~(BITS_PER_LONG - 1));
-	offset %= BITS_PER_LONG;
-
-	while (1) {
-		if (*p == 0)
-			goto pass;
-
-		tmp = __reverse_ulong((unsigned char *)p);
-
-		tmp &= ~0UL >> offset;
-		if (size < BITS_PER_LONG)
-			tmp &= (~0UL << (BITS_PER_LONG - size));
-		if (tmp)
-			goto found;
-pass:
-		if (size <= BITS_PER_LONG)
-			break;
-		size -= BITS_PER_LONG;
-		offset = 0;
-		p++;
-	}
-	return result;
-found:
-	return result - size + __reverse_ffs(tmp);
-}
-
-static unsigned long __find_rev_next_zero_bit(const unsigned long *addr,
-			unsigned long size, unsigned long offset)
-{
-	const unsigned long *p = addr + BIT_WORD(offset);
-	unsigned long result = size;
-	unsigned long tmp;
-
-	if (offset >= size)
-		return size;
-
-	size -= (offset & ~(BITS_PER_LONG - 1));
-	offset %= BITS_PER_LONG;
-
-	while (1) {
-		if (*p == ~0UL)
-			goto pass;
-
-		tmp = __reverse_ulong((unsigned char *)p);
-
-		if (offset)
-			tmp |= ~0UL << (BITS_PER_LONG - offset);
-		if (size < BITS_PER_LONG)
-			tmp |= ~0UL >> size;
-		if (tmp != ~0UL)
-			goto found;
-pass:
-		if (size <= BITS_PER_LONG)
-			break;
-		size -= BITS_PER_LONG;
-		offset = 0;
-		p++;
-	}
-	return result;
-found:
-	return result - size + __reverse_ffz(tmp);
-}
-
-void register_inmem_page(struct inode *inode, struct page *page)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct inmem_pages *new;
-
-	f2fs_trace_pid(page);
-
-	set_page_private(page, (unsigned long)ATOMIC_WRITTEN_PAGE);
-	SetPagePrivate(page);
-
-	new = f2fs_kmem_cache_alloc(inmem_entry_slab, GFP_NOFS);
-
-	/* add atomic page indices to the list */
-	new->page = page;
-	INIT_LIST_HEAD(&new->list);
-
-	/* increase reference count with clean state */
-	mutex_lock(&fi->inmem_lock);
-	get_page(page);
-	list_add_tail(&new->list, &fi->inmem_pages);
-	inc_page_count(F2FS_I_SB(inode), F2FS_INMEM_PAGES);
-	mutex_unlock(&fi->inmem_lock);
-
-	trace_f2fs_register_inmem_page(page, INMEM);
-}
-
-static int __revoke_inmem_pages(struct inode *inode,
-				struct list_head *head, bool drop, bool recover)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct inmem_pages *cur, *tmp;
-	int err = 0;
-
-	list_for_each_entry_safe(cur, tmp, head, list) {
-		struct page *page = cur->page;
-
-		if (drop)
-			trace_f2fs_commit_inmem_page(page, INMEM_DROP);
-
-		lock_page(page);
-
-		if (recover) {
-			struct dnode_of_data dn;
-			struct node_info ni;
-
-			trace_f2fs_commit_inmem_page(page, INMEM_REVOKE);
-
-			set_new_dnode(&dn, inode, NULL, NULL, 0);
-			if (get_dnode_of_data(&dn, page->index, LOOKUP_NODE)) {
-				err = -EAGAIN;
-				goto next;
-			}
-			get_node_info(sbi, dn.nid, &ni);
-			f2fs_replace_block(sbi, &dn, dn.data_blkaddr,
-					cur->old_addr, ni.version, true, true);
-			f2fs_put_dnode(&dn);
-		}
-next:
-		/* we don't need to invalidate this in the sccessful status */
-		if (drop || recover)
-			ClearPageUptodate(page);
-		set_page_private(page, 0);
-		ClearPagePrivate(page);
-		f2fs_put_page(page, 1);
-
-		list_del(&cur->list);
-		kmem_cache_free(inmem_entry_slab, cur);
-		dec_page_count(F2FS_I_SB(inode), F2FS_INMEM_PAGES);
-	}
-	return err;
-}
-
-void drop_inmem_pages(struct inode *inode)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-
-	mutex_lock(&fi->inmem_lock);
-	__revoke_inmem_pages(inode, &fi->inmem_pages, true, false);
-	mutex_unlock(&fi->inmem_lock);
-
-	clear_inode_flag(inode, FI_ATOMIC_FILE);
-	stat_dec_atomic_write(inode);
-}
-
-void drop_inmem_page(struct inode *inode, struct page *page)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct list_head *head = &fi->inmem_pages;
-	struct inmem_pages *cur = NULL;
-
-	f2fs_bug_on(sbi, !IS_ATOMIC_WRITTEN_PAGE(page));
-
-	mutex_lock(&fi->inmem_lock);
-	list_for_each_entry(cur, head, list) {
-		if (cur->page == page)
-			break;
-	}
-
-	f2fs_bug_on(sbi, !cur || cur->page != page);
-	list_del(&cur->list);
-	mutex_unlock(&fi->inmem_lock);
-
-	dec_page_count(sbi, F2FS_INMEM_PAGES);
-	kmem_cache_free(inmem_entry_slab, cur);
-
-	ClearPageUptodate(page);
-	set_page_private(page, 0);
-	ClearPagePrivate(page);
-	f2fs_put_page(page, 0);
-
-	trace_f2fs_commit_inmem_page(page, INMEM_INVALIDATE);
-}
-
-static int __commit_inmem_pages(struct inode *inode,
-					struct list_head *revoke_list)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct inmem_pages *cur, *tmp;
-	struct f2fs_io_info fio = {
-		.sbi = sbi,
-		.type = DATA,
-		.op = REQ_OP_WRITE,
-		.op_flags = REQ_SYNC | REQ_PRIO,
-	};
-	pgoff_t last_idx = ULONG_MAX;
-	int err = 0;
-
-	list_for_each_entry_safe(cur, tmp, &fi->inmem_pages, list) {
-		struct page *page = cur->page;
-
-		lock_page(page);
-		if (page->mapping == inode->i_mapping) {
-			trace_f2fs_commit_inmem_page(page, INMEM);
-
-			set_page_dirty(page);
-			f2fs_wait_on_page_writeback(page, DATA, true);
-			if (clear_page_dirty_for_io(page)) {
-				inode_dec_dirty_pages(inode);
-				remove_dirty_inode(inode);
-			}
-
-			fio.page = page;
-			fio.old_blkaddr = NULL_ADDR;
-			fio.encrypted_page = NULL;
-			fio.need_lock = false,
-			err = do_write_data_page(&fio);
-			if (err) {
-				unlock_page(page);
-				break;
-			}
-
-			/* record old blkaddr for revoking */
-			cur->old_addr = fio.old_blkaddr;
-			last_idx = page->index;
-		}
-		unlock_page(page);
-		list_move_tail(&cur->list, revoke_list);
-	}
-
-	if (last_idx != ULONG_MAX)
-		f2fs_submit_merged_bio_cond(sbi, inode, 0, last_idx,
-							DATA, WRITE);
-
-	if (!err)
-		__revoke_inmem_pages(inode, revoke_list, false, false);
-
-	return err;
-}
-
-int commit_inmem_pages(struct inode *inode)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct list_head revoke_list;
-	int err;
-
-	INIT_LIST_HEAD(&revoke_list);
-	f2fs_balance_fs(sbi, true);
-	f2fs_lock_op(sbi);
-
-	set_inode_flag(inode, FI_ATOMIC_COMMIT);
-
-	mutex_lock(&fi->inmem_lock);
-	err = __commit_inmem_pages(inode, &revoke_list);
-	if (err) {
-		int ret;
-		/*
-		 * try to revoke all committed pages, but still we could fail
-		 * due to no memory or other reason, if that happened, EAGAIN
-		 * will be returned, which means in such case, transaction is
-		 * already not integrity, caller should use journal to do the
-		 * recovery or rewrite & commit last transaction. For other
-		 * error number, revoking was done by filesystem itself.
-		 */
-		ret = __revoke_inmem_pages(inode, &revoke_list, false, true);
-		if (ret)
-			err = ret;
-
-		/* drop all uncommitted pages */
-		__revoke_inmem_pages(inode, &fi->inmem_pages, true, false);
-	}
-	mutex_unlock(&fi->inmem_lock);
-
-	clear_inode_flag(inode, FI_ATOMIC_COMMIT);
-
-	f2fs_unlock_op(sbi);
-	return err;
-}
-
-/*
- * This function balances dirty node and dentry pages.
- * In addition, it controls garbage collection.
- */
-void f2fs_balance_fs(struct f2fs_sb_info *sbi, bool need)
-{
-#ifdef CONFIG_F2FS_FAULT_INJECTION
-	if (time_to_inject(sbi, FAULT_CHECKPOINT)) {
-		f2fs_show_injection_info(FAULT_CHECKPOINT);
-		f2fs_stop_checkpoint(sbi, false);
-	}
-#endif
-
-	/* balance_fs_bg is able to be pending */
-	if (need && excess_cached_nats(sbi))
-		f2fs_balance_fs_bg(sbi);
-
-	/*
-	 * We should do GC or end up with checkpoint, if there are so many dirty
-	 * dir/node pages without enough free segments.
-	 */
-	if (has_not_enough_free_secs(sbi, 0, 0)) {
-		mutex_lock(&sbi->gc_mutex);
-		f2fs_gc(sbi, false, false, NULL_SEGNO);
-	}
-}
-
-void f2fs_balance_fs_bg(struct f2fs_sb_info *sbi)
-{
-	/* try to shrink extent cache when there is no enough memory */
-	if (!available_free_memory(sbi, EXTENT_CACHE))
-		f2fs_shrink_extent_tree(sbi, EXTENT_CACHE_SHRINK_NUMBER);
-
-	/* check the # of cached NAT entries */
-	if (!available_free_memory(sbi, NAT_ENTRIES))
-		try_to_free_nats(sbi, NAT_ENTRY_PER_BLOCK);
-
-	if (!available_free_memory(sbi, FREE_NIDS))
-		try_to_free_nids(sbi, MAX_FREE_NIDS);
-	else
-		build_free_nids(sbi, false, false);
-
-	if (!is_idle(sbi) && !excess_dirty_nats(sbi))
-		return;
-
-	/* checkpoint is the only way to shrink partial cached entries */
-	if (!available_free_memory(sbi, NAT_ENTRIES) ||
-			!available_free_memory(sbi, INO_ENTRIES) ||
-			excess_prefree_segs(sbi) ||
-			excess_dirty_nats(sbi) ||
-			f2fs_time_over(sbi, CP_TIME)) {
-		if (test_opt(sbi, DATA_FLUSH)) {
-			struct blk_plug plug;
-
-			blk_start_plug(&plug);
-			sync_dirty_inodes(sbi, FILE_INODE);
-			blk_finish_plug(&plug);
-		}
-		f2fs_sync_fs(sbi->sb, true);
-		stat_inc_bg_cp_count(sbi->stat_info);
-	}
-}
-
-static int __submit_flush_wait(struct f2fs_sb_info *sbi,
-				struct block_device *bdev)
-{
-	struct bio *bio = f2fs_bio_alloc(0);
-	int ret;
-
-	bio->bi_rw = REQ_OP_WRITE;
-	bio->bi_bdev = bdev;
-	ret = submit_bio_wait(WRITE_FLUSH, bio);
-	bio_put(bio);
-
-	trace_f2fs_issue_flush(bdev, test_opt(sbi, NOBARRIER),
-				test_opt(sbi, FLUSH_MERGE), ret);
-	return ret;
-}
-
-static int submit_flush_wait(struct f2fs_sb_info *sbi)
-{
-	int ret = __submit_flush_wait(sbi, sbi->sb->s_bdev);
-	int i;
-
-	if (!sbi->s_ndevs || ret)
-		return ret;
-
-	for (i = 1; i < sbi->s_ndevs; i++) {
-		ret = __submit_flush_wait(sbi, FDEV(i).bdev);
-		if (ret)
-			break;
-	}
-	return ret;
-}
-
-static int issue_flush_thread(void *data)
-{
-	struct f2fs_sb_info *sbi = data;
-	struct flush_cmd_control *fcc = SM_I(sbi)->fcc_info;
-	wait_queue_head_t *q = &fcc->flush_wait_queue;
-repeat:
-	if (kthread_should_stop())
-		return 0;
-
-	if (!llist_empty(&fcc->issue_list)) {
-		struct flush_cmd *cmd, *next;
-		int ret;
-
-		fcc->dispatch_list = llist_del_all(&fcc->issue_list);
-		fcc->dispatch_list = llist_reverse_order(fcc->dispatch_list);
-
-		ret = submit_flush_wait(sbi);
-		atomic_inc(&fcc->issued_flush);
-
-		llist_for_each_entry_safe(cmd, next,
-					  fcc->dispatch_list, llnode) {
-			cmd->ret = ret;
-			complete(&cmd->wait);
-		}
-		fcc->dispatch_list = NULL;
-	}
-
-	wait_event_interruptible(*q,
-		kthread_should_stop() || !llist_empty(&fcc->issue_list));
-	goto repeat;
-}
-
-int f2fs_issue_flush(struct f2fs_sb_info *sbi)
-{
-	struct flush_cmd_control *fcc = SM_I(sbi)->fcc_info;
-	struct flush_cmd cmd;
-	int ret;
-
-	if (test_opt(sbi, NOBARRIER))
-		return 0;
-
-	if (!test_opt(sbi, FLUSH_MERGE)) {
-		ret = submit_flush_wait(sbi);
-		atomic_inc(&fcc->issued_flush);
-		return ret;
-	}
-
-	if (!atomic_read(&fcc->issing_flush)) {
-		atomic_inc(&fcc->issing_flush);
-		ret = submit_flush_wait(sbi);
-		atomic_dec(&fcc->issing_flush);
-
-		atomic_inc(&fcc->issued_flush);
-		return ret;
-	}
-
-	init_completion(&cmd.wait);
-
-	atomic_inc(&fcc->issing_flush);
-	llist_add(&cmd.llnode, &fcc->issue_list);
-
-	if (!fcc->dispatch_list)
-		wake_up(&fcc->flush_wait_queue);
-
-	if (fcc->f2fs_issue_flush) {
-		wait_for_completion(&cmd.wait);
-		atomic_dec(&fcc->issing_flush);
-	} else {
-		llist_del_all(&fcc->issue_list);
-		atomic_set(&fcc->issing_flush, 0);
-	}
-
-	return cmd.ret;
-}
-
-int create_flush_cmd_control(struct f2fs_sb_info *sbi)
-{
-	dev_t dev = sbi->sb->s_bdev->bd_dev;
-	struct flush_cmd_control *fcc;
-	int err = 0;
-
-	if (SM_I(sbi)->fcc_info) {
-		fcc = SM_I(sbi)->fcc_info;
-		goto init_thread;
-	}
-
-	fcc = kzalloc(sizeof(struct flush_cmd_control), GFP_KERNEL);
-	if (!fcc)
-		return -ENOMEM;
-	atomic_set(&fcc->issued_flush, 0);
-	atomic_set(&fcc->issing_flush, 0);
-	init_waitqueue_head(&fcc->flush_wait_queue);
-	init_llist_head(&fcc->issue_list);
-	SM_I(sbi)->fcc_info = fcc;
-	if (!test_opt(sbi, FLUSH_MERGE))
-		return err;
-
-init_thread:
-	fcc->f2fs_issue_flush = kthread_run(issue_flush_thread, sbi,
-				"f2fs_flush-%u:%u", MAJOR(dev), MINOR(dev));
-	if (IS_ERR(fcc->f2fs_issue_flush)) {
-		err = PTR_ERR(fcc->f2fs_issue_flush);
-		kfree(fcc);
-		SM_I(sbi)->fcc_info = NULL;
-		return err;
-	}
-
-	return err;
-}
-
-void destroy_flush_cmd_control(struct f2fs_sb_info *sbi, bool free)
-{
-	struct flush_cmd_control *fcc = SM_I(sbi)->fcc_info;
-
-	if (fcc && fcc->f2fs_issue_flush) {
-		struct task_struct *flush_thread = fcc->f2fs_issue_flush;
-
-		fcc->f2fs_issue_flush = NULL;
-		kthread_stop(flush_thread);
-	}
-	if (free) {
-		kfree(fcc);
-		SM_I(sbi)->fcc_info = NULL;
-	}
-}
-
-static void __locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	/* need not be added */
-	if (IS_CURSEG(sbi, segno))
-		return;
-
-	if (!test_and_set_bit(segno, dirty_i->dirty_segmap[dirty_type]))
-		dirty_i->nr_dirty[dirty_type]++;
-
-	if (dirty_type == DIRTY) {
-		struct seg_entry *sentry = get_seg_entry(sbi, segno);
-		enum dirty_type t = sentry->type;
-
-		if (unlikely(t >= DIRTY)) {
-			f2fs_bug_on(sbi, 1);
-			return;
-		}
-		if (!test_and_set_bit(segno, dirty_i->dirty_segmap[t]))
-			dirty_i->nr_dirty[t]++;
-	}
-}
-
-static void __remove_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	if (test_and_clear_bit(segno, dirty_i->dirty_segmap[dirty_type]))
-		dirty_i->nr_dirty[dirty_type]--;
-
-	if (dirty_type == DIRTY) {
-		struct seg_entry *sentry = get_seg_entry(sbi, segno);
-		enum dirty_type t = sentry->type;
-
-		if (test_and_clear_bit(segno, dirty_i->dirty_segmap[t]))
-			dirty_i->nr_dirty[t]--;
-
-		if (get_valid_blocks(sbi, segno, true) == 0)
-			clear_bit(GET_SEC_FROM_SEG(sbi, segno),
-						dirty_i->victim_secmap);
-	}
-}
-
-/*
- * Should not occur error such as -ENOMEM.
- * Adding dirty entry into seglist is not critical operation.
- * If a given segment is one of current working segments, it won't be added.
- */
-static void locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned short valid_blocks;
-
-	if (segno == NULL_SEGNO || IS_CURSEG(sbi, segno))
-		return;
-
-	mutex_lock(&dirty_i->seglist_lock);
-
-	valid_blocks = get_valid_blocks(sbi, segno, false);
-
-	if (valid_blocks == 0) {
-		__locate_dirty_segment(sbi, segno, PRE);
-		__remove_dirty_segment(sbi, segno, DIRTY);
-	} else if (valid_blocks < sbi->blocks_per_seg) {
-		__locate_dirty_segment(sbi, segno, DIRTY);
-	} else {
-		/* Recovery routine with SSR needs this */
-		__remove_dirty_segment(sbi, segno, DIRTY);
-	}
-
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-static struct discard_cmd *__create_discard_cmd(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t lstart,
-		block_t start, block_t len)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct list_head *pend_list;
-	struct discard_cmd *dc;
-
-	f2fs_bug_on(sbi, !len);
-
-	pend_list = &dcc->pend_list[plist_idx(len)];
-
-	dc = f2fs_kmem_cache_alloc(discard_cmd_slab, GFP_NOFS);
-	INIT_LIST_HEAD(&dc->list);
-	dc->bdev = bdev;
-	dc->lstart = lstart;
-	dc->start = start;
-	dc->len = len;
-	dc->ref = 0;
-	dc->state = D_PREP;
-	dc->error = 0;
-	init_completion(&dc->wait);
-	list_add_tail(&dc->list, pend_list);
-	atomic_inc(&dcc->discard_cmd_cnt);
-	dcc->undiscard_blks += len;
-
-	return dc;
-}
-
-static struct discard_cmd *__attach_discard_cmd(struct f2fs_sb_info *sbi,
-				struct block_device *bdev, block_t lstart,
-				block_t start, block_t len,
-				struct rb_node *parent, struct rb_node **p)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_cmd *dc;
-
-	dc = __create_discard_cmd(sbi, bdev, lstart, start, len);
-
-	rb_link_node(&dc->rb_node, parent, p);
-	rb_insert_color(&dc->rb_node, &dcc->root);
-
-	return dc;
-}
-
-static void __detach_discard_cmd(struct discard_cmd_control *dcc,
-							struct discard_cmd *dc)
-{
-	if (dc->state == D_DONE)
-		atomic_dec(&dcc->issing_discard);
-
-	list_del(&dc->list);
-	rb_erase(&dc->rb_node, &dcc->root);
-	dcc->undiscard_blks -= dc->len;
-
-	kmem_cache_free(discard_cmd_slab, dc);
-
-	atomic_dec(&dcc->discard_cmd_cnt);
-}
-
-static void __remove_discard_cmd(struct f2fs_sb_info *sbi,
-							struct discard_cmd *dc)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-
-	if (dc->error == -EOPNOTSUPP)
-		dc->error = 0;
-
-	if (dc->error)
-		f2fs_msg(sbi->sb, KERN_INFO,
-				"Issue discard failed, ret: %d", dc->error);
-	__detach_discard_cmd(dcc, dc);
-}
-
-static void f2fs_submit_discard_endio(struct bio *bio, int err)
-{
-	struct discard_cmd *dc = (struct discard_cmd *)bio->bi_private;
-
-	dc->error = err;
-	dc->state = D_DONE;
-	complete(&dc->wait);
-	bio_put(bio);
-}
-
-/* copied from block/blk-lib.c in 4.10-rc1 */
-static int __blkdev_issue_discard(struct block_device *bdev, sector_t sector,
-		sector_t nr_sects, gfp_t gfp_mask, int flags,
-		struct bio **biop)
-{
-	struct request_queue *q = bdev_get_queue(bdev);
-	struct bio *bio = *biop;
-	unsigned int granularity;
-	int op = REQ_WRITE | REQ_DISCARD;
-	int alignment;
-	sector_t bs_mask;
-
-	if (!q)
-		return -ENXIO;
-
-	if (!blk_queue_discard(q))
-		return -EOPNOTSUPP;
-
-	if (flags & BLKDEV_DISCARD_SECURE) {
-		if (!blk_queue_secdiscard(q))
-			return -EOPNOTSUPP;
-		op |= REQ_SECURE;
-	}
-
-	bs_mask = (bdev_logical_block_size(bdev) >> 9) - 1;
-	if ((sector | nr_sects) & bs_mask)
-		return -EINVAL;
-
-	/* Zero-sector (unknown) and one-sector granularities are the same.  */
-	granularity = max(q->limits.discard_granularity >> 9, 1U);
-	alignment = (bdev_discard_alignment(bdev) >> 9) % granularity;
-
-	while (nr_sects) {
-		unsigned int req_sects;
-		sector_t end_sect, tmp;
-
-		/* Make sure bi_size doesn't overflow */
-		req_sects = min_t(sector_t, nr_sects, UINT_MAX >> 9);
-
-		/**
-		 * If splitting a request, and the next starting sector would be
-		 * misaligned, stop the discard at the previous aligned sector.
-		 */
-		end_sect = sector + req_sects;
-		tmp = end_sect;
-		if (req_sects < nr_sects &&
-		    sector_div(tmp, granularity) != alignment) {
-			end_sect = end_sect - alignment;
-			sector_div(end_sect, granularity);
-			end_sect = end_sect * granularity + alignment;
-			req_sects = end_sect - sector;
-		}
-
-		if (bio) {
-			int ret = submit_bio_wait(0, bio);
-			bio_put(bio);
-			if (ret)
-				return ret;
-		}
-		bio = f2fs_bio_alloc(1);
-		bio->bi_sector = sector;
-		bio->bi_bdev = bdev;
-		bio_set_op_attrs(bio, op, 0);
-
-		bio->bi_size = req_sects << 9;
-		nr_sects -= req_sects;
-		sector = end_sect;
-
-		/*
-		 * We can loop for a long time in here, if someone does
-		 * full device discards (like mkfs). Be nice and allow
-		 * us to schedule out to avoid softlocking if preempt
-		 * is disabled.
-		 */
-		cond_resched();
-	}
-
-	*biop = bio;
-	return 0;
-}
-
-static void __submit_discard_cmd(struct f2fs_sb_info *sbi,
-				struct discard_cmd *dc)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct bio *bio = NULL;
-
-	if (dc->state != D_PREP)
-		return;
-
-	trace_f2fs_issue_discard(dc->bdev, dc->start, dc->len);
-
-	dc->error = __blkdev_issue_discard(dc->bdev,
-				SECTOR_FROM_BLOCK(dc->start),
-				SECTOR_FROM_BLOCK(dc->len),
-				GFP_NOFS, 0, &bio);
-	if (!dc->error) {
-		/* should keep before submission to avoid D_DONE right away */
-		dc->state = D_SUBMIT;
-		atomic_inc(&dcc->issued_discard);
-		atomic_inc(&dcc->issing_discard);
-		if (bio) {
-			bio->bi_private = dc;
-			bio->bi_end_io = f2fs_submit_discard_endio;
-			submit_bio(REQ_SYNC, bio);
-			list_move_tail(&dc->list, &dcc->wait_list);
-		}
-	} else {
-		__remove_discard_cmd(sbi, dc);
-	}
-}
-
-static struct discard_cmd *__insert_discard_tree(struct f2fs_sb_info *sbi,
-				struct block_device *bdev, block_t lstart,
-				block_t start, block_t len,
-				struct rb_node **insert_p,
-				struct rb_node *insert_parent)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct rb_node **p = &dcc->root.rb_node;
-	struct rb_node *parent = NULL;
-	struct discard_cmd *dc = NULL;
-
-	if (insert_p && insert_parent) {
-		parent = insert_parent;
-		p = insert_p;
-		goto do_insert;
-	}
-
-	p = __lookup_rb_tree_for_insert(sbi, &dcc->root, &parent, lstart);
-do_insert:
-	dc = __attach_discard_cmd(sbi, bdev, lstart, start, len, parent, p);
-	if (!dc)
-		return NULL;
-
-	return dc;
-}
-
-static void __relocate_discard_cmd(struct discard_cmd_control *dcc,
-						struct discard_cmd *dc)
-{
-	list_move_tail(&dc->list, &dcc->pend_list[plist_idx(dc->len)]);
-}
-
-static void __punch_discard_cmd(struct f2fs_sb_info *sbi,
-				struct discard_cmd *dc, block_t blkaddr)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_info di = dc->di;
-	bool modified = false;
-
-	if (dc->state == D_DONE || dc->len == 1) {
-		__remove_discard_cmd(sbi, dc);
-		return;
-	}
-
-	dcc->undiscard_blks -= di.len;
-
-	if (blkaddr > di.lstart) {
-		dc->len = blkaddr - dc->lstart;
-		dcc->undiscard_blks += dc->len;
-		__relocate_discard_cmd(dcc, dc);
-		f2fs_bug_on(sbi, !__check_rb_tree_consistence(sbi, &dcc->root));
-		modified = true;
-	}
-
-	if (blkaddr < di.lstart + di.len - 1) {
-		if (modified) {
-			__insert_discard_tree(sbi, dc->bdev, blkaddr + 1,
-					di.start + blkaddr + 1 - di.lstart,
-					di.lstart + di.len - 1 - blkaddr,
-					NULL, NULL);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-		} else {
-			dc->lstart++;
-			dc->len--;
-			dc->start++;
-			dcc->undiscard_blks += dc->len;
-			__relocate_discard_cmd(dcc, dc);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-		}
-	}
-}
-
-static void __update_discard_tree_range(struct f2fs_sb_info *sbi,
-				struct block_device *bdev, block_t lstart,
-				block_t start, block_t len)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_cmd *prev_dc = NULL, *next_dc = NULL;
-	struct discard_cmd *dc;
-	struct discard_info di = {0};
-	struct rb_node **insert_p = NULL, *insert_parent = NULL;
-	block_t end = lstart + len;
-
-	mutex_lock(&dcc->cmd_lock);
-
-	dc = (struct discard_cmd *)__lookup_rb_tree_ret(&dcc->root,
-					NULL, lstart,
-					(struct rb_entry **)&prev_dc,
-					(struct rb_entry **)&next_dc,
-					&insert_p, &insert_parent, true);
-	if (dc)
-		prev_dc = dc;
-
-	if (!prev_dc) {
-		di.lstart = lstart;
-		di.len = next_dc ? next_dc->lstart - lstart : len;
-		di.len = min(di.len, len);
-		di.start = start;
-	}
-
-	while (1) {
-		struct rb_node *node;
-		bool merged = false;
-		struct discard_cmd *tdc = NULL;
-
-		if (prev_dc) {
-			di.lstart = prev_dc->lstart + prev_dc->len;
-			if (di.lstart < lstart)
-				di.lstart = lstart;
-			if (di.lstart >= end)
-				break;
-
-			if (!next_dc || next_dc->lstart > end)
-				di.len = end - di.lstart;
-			else
-				di.len = next_dc->lstart - di.lstart;
-			di.start = start + di.lstart - lstart;
-		}
-
-		if (!di.len)
-			goto next;
-
-		if (prev_dc && prev_dc->state == D_PREP &&
-			prev_dc->bdev == bdev &&
-			__is_discard_back_mergeable(&di, &prev_dc->di)) {
-			prev_dc->di.len += di.len;
-			dcc->undiscard_blks += di.len;
-			__relocate_discard_cmd(dcc, prev_dc);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-			di = prev_dc->di;
-			tdc = prev_dc;
-			merged = true;
-		}
-
-		if (next_dc && next_dc->state == D_PREP &&
-			next_dc->bdev == bdev &&
-			__is_discard_front_mergeable(&di, &next_dc->di)) {
-			next_dc->di.lstart = di.lstart;
-			next_dc->di.len += di.len;
-			next_dc->di.start = di.start;
-			dcc->undiscard_blks += di.len;
-			__relocate_discard_cmd(dcc, next_dc);
-			if (tdc)
-				__remove_discard_cmd(sbi, tdc);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-			merged = true;
-		}
-
-		if (!merged) {
-			__insert_discard_tree(sbi, bdev, di.lstart, di.start,
-							di.len, NULL, NULL);
-			f2fs_bug_on(sbi,
-				!__check_rb_tree_consistence(sbi, &dcc->root));
-		}
- next:
-		prev_dc = next_dc;
-		if (!prev_dc)
-			break;
-
-		node = rb_next(&prev_dc->rb_node);
-		next_dc = rb_entry_safe(node, struct discard_cmd, rb_node);
-	}
-
-	mutex_unlock(&dcc->cmd_lock);
-}
-
-static int __queue_discard_cmd(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t blkstart, block_t blklen)
-{
-	block_t lblkstart = blkstart;
-
-	trace_f2fs_queue_discard(bdev, blkstart, blklen);
-
-	if (sbi->s_ndevs) {
-		int devi = f2fs_target_device_index(sbi, blkstart);
-
-		blkstart -= FDEV(devi).start_blk;
-	}
-	__update_discard_tree_range(sbi, bdev, lblkstart, blkstart, blklen);
-	return 0;
-}
-
-static void __issue_discard_cmd(struct f2fs_sb_info *sbi, bool issue_cond)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct list_head *pend_list;
-	struct discard_cmd *dc, *tmp;
-	struct blk_plug plug;
-	int i, iter = 0;
-
-	mutex_lock(&dcc->cmd_lock);
-	blk_start_plug(&plug);
-	for (i = MAX_PLIST_NUM - 1; i >= 0; i--) {
-		pend_list = &dcc->pend_list[i];
-		list_for_each_entry_safe(dc, tmp, pend_list, list) {
-			f2fs_bug_on(sbi, dc->state != D_PREP);
-
-			if (!issue_cond || is_idle(sbi))
-				__submit_discard_cmd(sbi, dc);
-			if (issue_cond && iter++ > DISCARD_ISSUE_RATE)
-				goto out;
-		}
-	}
-out:
-	blk_finish_plug(&plug);
-	mutex_unlock(&dcc->cmd_lock);
-}
-
-static void __wait_discard_cmd(struct f2fs_sb_info *sbi, bool wait_cond)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct list_head *wait_list = &(dcc->wait_list);
-	struct discard_cmd *dc, *tmp;
-
-	mutex_lock(&dcc->cmd_lock);
-	list_for_each_entry_safe(dc, tmp, wait_list, list) {
-		if (!wait_cond || dc->state == D_DONE) {
-			if (dc->ref)
-				continue;
-			wait_for_completion_io(&dc->wait);
-			__remove_discard_cmd(sbi, dc);
-		}
-	}
-	mutex_unlock(&dcc->cmd_lock);
-}
-
-/* This should be covered by global mutex, &sit_i->sentry_lock */
-void f2fs_wait_discard_bio(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	struct discard_cmd *dc;
-	bool need_wait = false;
-
-	mutex_lock(&dcc->cmd_lock);
-	dc = (struct discard_cmd *)__lookup_rb_tree(&dcc->root, NULL, blkaddr);
-	if (dc) {
-		if (dc->state == D_PREP) {
-			__punch_discard_cmd(sbi, dc, blkaddr);
-		} else {
-			dc->ref++;
-			need_wait = true;
-		}
-	}
-	mutex_unlock(&dcc->cmd_lock);
-
-	if (need_wait) {
-		wait_for_completion_io(&dc->wait);
-		mutex_lock(&dcc->cmd_lock);
-		f2fs_bug_on(sbi, dc->state != D_DONE);
-		dc->ref--;
-		if (!dc->ref)
-			__remove_discard_cmd(sbi, dc);
-		mutex_unlock(&dcc->cmd_lock);
-	}
-}
-
-/* This comes from f2fs_put_super */
-void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)
-{
-	__issue_discard_cmd(sbi, false);
-	__wait_discard_cmd(sbi, false);
-}
-
-static int issue_discard_thread(void *data)
-{
-	struct f2fs_sb_info *sbi = data;
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-	wait_queue_head_t *q = &dcc->discard_wait_queue;
-repeat:
-	if (kthread_should_stop())
-		return 0;
-
-	__issue_discard_cmd(sbi, true);
-	__wait_discard_cmd(sbi, true);
-
-	congestion_wait(BLK_RW_SYNC, HZ/50);
-
-	wait_event_interruptible(*q, kthread_should_stop() ||
-				atomic_read(&dcc->discard_cmd_cnt));
-	goto repeat;
-}
-
-#ifdef CONFIG_BLK_DEV_ZONED
-static int __f2fs_issue_discard_zone(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t blkstart, block_t blklen)
-{
-	sector_t sector, nr_sects;
-	block_t lblkstart = blkstart;
-	int devi = 0;
-
-	if (sbi->s_ndevs) {
-		devi = f2fs_target_device_index(sbi, blkstart);
-		blkstart -= FDEV(devi).start_blk;
-	}
-
-	/*
-	 * We need to know the type of the zone: for conventional zones,
-	 * use regular discard if the drive supports it. For sequential
-	 * zones, reset the zone write pointer.
-	 */
-	switch (get_blkz_type(sbi, bdev, blkstart)) {
-
-	case BLK_ZONE_TYPE_CONVENTIONAL:
-		if (!blk_queue_discard(bdev_get_queue(bdev)))
-			return 0;
-		return __queue_discard_cmd(sbi, bdev, lblkstart, blklen);
-	case BLK_ZONE_TYPE_SEQWRITE_REQ:
-	case BLK_ZONE_TYPE_SEQWRITE_PREF:
-		sector = SECTOR_FROM_BLOCK(blkstart);
-		nr_sects = SECTOR_FROM_BLOCK(blklen);
-
-		if (sector & (bdev_zone_size(bdev) - 1) ||
-				nr_sects != bdev_zone_size(bdev)) {
-			f2fs_msg(sbi->sb, KERN_INFO,
-				"(%d) %s: Unaligned discard attempted (block %x + %x)",
-				devi, sbi->s_ndevs ? FDEV(devi).path: "",
-				blkstart, blklen);
-			return -EIO;
-		}
-		trace_f2fs_issue_reset_zone(bdev, blkstart);
-		return blkdev_reset_zones(bdev, sector,
-					  nr_sects, GFP_NOFS);
-	default:
-		/* Unknown zone type: broken device ? */
-		return -EIO;
-	}
-}
-#endif
-
-static int __issue_discard_async(struct f2fs_sb_info *sbi,
-		struct block_device *bdev, block_t blkstart, block_t blklen)
-{
-#ifdef CONFIG_BLK_DEV_ZONED
-	if (f2fs_sb_mounted_blkzoned(sbi->sb) &&
-				bdev_zoned_model(bdev) != BLK_ZONED_NONE)
-		return __f2fs_issue_discard_zone(sbi, bdev, blkstart, blklen);
-#endif
-	return __queue_discard_cmd(sbi, bdev, blkstart, blklen);
-}
-
-static int f2fs_issue_discard(struct f2fs_sb_info *sbi,
-				block_t blkstart, block_t blklen)
-{
-	sector_t start = blkstart, len = 0;
-	struct block_device *bdev;
-	struct seg_entry *se;
-	unsigned int offset;
-	block_t i;
-	int err = 0;
-
-	bdev = f2fs_target_device(sbi, blkstart, NULL);
-
-	for (i = blkstart; i < blkstart + blklen; i++, len++) {
-		if (i != start) {
-			struct block_device *bdev2 =
-				f2fs_target_device(sbi, i, NULL);
-
-			if (bdev2 != bdev) {
-				err = __issue_discard_async(sbi, bdev,
-						start, len);
-				if (err)
-					return err;
-				bdev = bdev2;
-				start = i;
-				len = 0;
-			}
-		}
-
-		se = get_seg_entry(sbi, GET_SEGNO(sbi, i));
-		offset = GET_BLKOFF_FROM_SEG0(sbi, i);
-
-		if (!f2fs_test_and_set_bit(offset, se->discard_map))
-			sbi->discard_blks--;
-	}
-
-	if (len)
-		err = __issue_discard_async(sbi, bdev, start, len);
-	return err;
-}
-
-static bool add_discard_addrs(struct f2fs_sb_info *sbi, struct cp_control *cpc,
-							bool check_only)
-{
-	int entries = SIT_VBLOCK_MAP_SIZE / sizeof(unsigned long);
-	int max_blocks = sbi->blocks_per_seg;
-	struct seg_entry *se = get_seg_entry(sbi, cpc->trim_start);
-	unsigned long *cur_map = (unsigned long *)se->cur_valid_map;
-	unsigned long *ckpt_map = (unsigned long *)se->ckpt_valid_map;
-	unsigned long *discard_map = (unsigned long *)se->discard_map;
-	unsigned long *dmap = SIT_I(sbi)->tmp_map;
-	unsigned int start = 0, end = -1;
-	bool force = (cpc->reason & CP_DISCARD);
-	struct discard_entry *de = NULL;
-	struct list_head *head = &SM_I(sbi)->dcc_info->entry_list;
-	int i;
-
-	if (se->valid_blocks == max_blocks || !f2fs_discard_en(sbi))
-		return false;
-
-	if (!force) {
-		if (!test_opt(sbi, DISCARD) || !se->valid_blocks ||
-			SM_I(sbi)->dcc_info->nr_discards >=
-				SM_I(sbi)->dcc_info->max_discards)
-			return false;
-	}
-
-	/* SIT_VBLOCK_MAP_SIZE should be multiple of sizeof(unsigned long) */
-	for (i = 0; i < entries; i++)
-		dmap[i] = force ? ~ckpt_map[i] & ~discard_map[i] :
-				(cur_map[i] ^ ckpt_map[i]) & ckpt_map[i];
-
-	while (force || SM_I(sbi)->dcc_info->nr_discards <=
-				SM_I(sbi)->dcc_info->max_discards) {
-		start = __find_rev_next_bit(dmap, max_blocks, end + 1);
-		if (start >= max_blocks)
-			break;
-
-		end = __find_rev_next_zero_bit(dmap, max_blocks, start + 1);
-		if (force && start && end != max_blocks
-					&& (end - start) < cpc->trim_minlen)
-			continue;
-
-		if (check_only)
-			return true;
-
-		if (!de) {
-			de = f2fs_kmem_cache_alloc(discard_entry_slab,
-								GFP_F2FS_ZERO);
-			de->start_blkaddr = START_BLOCK(sbi, cpc->trim_start);
-			list_add_tail(&de->list, head);
-		}
-
-		for (i = start; i < end; i++)
-			__set_bit_le(i, (void *)de->discard_map);
-
-		SM_I(sbi)->dcc_info->nr_discards += end - start;
-	}
-	return false;
-}
-
-void release_discard_addrs(struct f2fs_sb_info *sbi)
-{
-	struct list_head *head = &(SM_I(sbi)->dcc_info->entry_list);
-	struct discard_entry *entry, *this;
-
-	/* drop caches */
-	list_for_each_entry_safe(entry, this, head, list) {
-		list_del(&entry->list);
-		kmem_cache_free(discard_entry_slab, entry);
-	}
-}
-
-/*
- * Should call clear_prefree_segments after checkpoint is done.
- */
-static void set_prefree_as_free_segments(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned int segno;
-
-	mutex_lock(&dirty_i->seglist_lock);
-	for_each_set_bit(segno, dirty_i->dirty_segmap[PRE], MAIN_SEGS(sbi))
-		__set_test_and_free(sbi, segno);
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-void clear_prefree_segments(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	struct list_head *head = &(SM_I(sbi)->dcc_info->entry_list);
-	struct discard_entry *entry, *this;
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned long *prefree_map = dirty_i->dirty_segmap[PRE];
-	unsigned int start = 0, end = -1;
-	unsigned int secno, start_segno;
-	bool force = (cpc->reason & CP_DISCARD);
-
-	mutex_lock(&dirty_i->seglist_lock);
-
-	while (1) {
-		int i;
-		start = find_next_bit(prefree_map, MAIN_SEGS(sbi), end + 1);
-		if (start >= MAIN_SEGS(sbi))
-			break;
-		end = find_next_zero_bit(prefree_map, MAIN_SEGS(sbi),
-								start + 1);
-
-		for (i = start; i < end; i++)
-			clear_bit(i, prefree_map);
-
-		dirty_i->nr_dirty[PRE] -= end - start;
-
-		if (!test_opt(sbi, DISCARD))
-			continue;
-
-		if (force && start >= cpc->trim_start &&
-					(end - 1) <= cpc->trim_end)
-				continue;
-
-		if (!test_opt(sbi, LFS) || sbi->segs_per_sec == 1) {
-			f2fs_issue_discard(sbi, START_BLOCK(sbi, start),
-				(end - start) << sbi->log_blocks_per_seg);
-			continue;
-		}
-next:
-		secno = GET_SEC_FROM_SEG(sbi, start);
-		start_segno = GET_SEG_FROM_SEC(sbi, secno);
-		if (!IS_CURSEC(sbi, secno) &&
-			!get_valid_blocks(sbi, start, true))
-			f2fs_issue_discard(sbi, START_BLOCK(sbi, start_segno),
-				sbi->segs_per_sec << sbi->log_blocks_per_seg);
-
-		start = start_segno + sbi->segs_per_sec;
-		if (start < end)
-			goto next;
-		else
-			end = start - 1;
-	}
-	mutex_unlock(&dirty_i->seglist_lock);
-
-	/* send small discards */
-	list_for_each_entry_safe(entry, this, head, list) {
-		unsigned int cur_pos = 0, next_pos, len, total_len = 0;
-		bool is_valid = test_bit_le(0, entry->discard_map);
-
-find_next:
-		if (is_valid) {
-			next_pos = find_next_zero_bit_le(entry->discard_map,
-					sbi->blocks_per_seg, cur_pos);
-			len = next_pos - cur_pos;
-
-			if (force && len < cpc->trim_minlen)
-				goto skip;
-
-			f2fs_issue_discard(sbi, entry->start_blkaddr + cur_pos,
-									len);
-			cpc->trimmed += len;
-			total_len += len;
-		} else {
-			next_pos = find_next_bit_le(entry->discard_map,
-					sbi->blocks_per_seg, cur_pos);
-		}
-skip:
-		cur_pos = next_pos;
-		is_valid = !is_valid;
-
-		if (cur_pos < sbi->blocks_per_seg)
-			goto find_next;
-
-		list_del(&entry->list);
-		SM_I(sbi)->dcc_info->nr_discards -= total_len;
-		kmem_cache_free(discard_entry_slab, entry);
-	}
-
-	wake_up(&SM_I(sbi)->dcc_info->discard_wait_queue);
-}
-
-static int create_discard_cmd_control(struct f2fs_sb_info *sbi)
-{
-	dev_t dev = sbi->sb->s_bdev->bd_dev;
-	struct discard_cmd_control *dcc;
-	int err = 0, i;
-
-	if (SM_I(sbi)->dcc_info) {
-		dcc = SM_I(sbi)->dcc_info;
-		goto init_thread;
-	}
-
-	dcc = kzalloc(sizeof(struct discard_cmd_control), GFP_KERNEL);
-	if (!dcc)
-		return -ENOMEM;
-
-	INIT_LIST_HEAD(&dcc->entry_list);
-	for (i = 0; i < MAX_PLIST_NUM; i++)
-		INIT_LIST_HEAD(&dcc->pend_list[i]);
-	INIT_LIST_HEAD(&dcc->wait_list);
-	mutex_init(&dcc->cmd_lock);
-	atomic_set(&dcc->issued_discard, 0);
-	atomic_set(&dcc->issing_discard, 0);
-	atomic_set(&dcc->discard_cmd_cnt, 0);
-	dcc->nr_discards = 0;
-	dcc->max_discards = MAIN_SEGS(sbi) << sbi->log_blocks_per_seg;
-	dcc->undiscard_blks = 0;
-	dcc->root = RB_ROOT;
-
-	init_waitqueue_head(&dcc->discard_wait_queue);
-	SM_I(sbi)->dcc_info = dcc;
-init_thread:
-	dcc->f2fs_issue_discard = kthread_run(issue_discard_thread, sbi,
-				"f2fs_discard-%u:%u", MAJOR(dev), MINOR(dev));
-	if (IS_ERR(dcc->f2fs_issue_discard)) {
-		err = PTR_ERR(dcc->f2fs_issue_discard);
-		kfree(dcc);
-		SM_I(sbi)->dcc_info = NULL;
-		return err;
-	}
-
-	return err;
-}
-
-static void destroy_discard_cmd_control(struct f2fs_sb_info *sbi)
-{
-	struct discard_cmd_control *dcc = SM_I(sbi)->dcc_info;
-
-	if (!dcc)
-		return;
-
-	if (dcc->f2fs_issue_discard) {
-		struct task_struct *discard_thread = dcc->f2fs_issue_discard;
-
-		dcc->f2fs_issue_discard = NULL;
-		kthread_stop(discard_thread);
-	}
-
-	kfree(dcc);
-	SM_I(sbi)->dcc_info = NULL;
-}
-
-static bool __mark_sit_entry_dirty(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-
-	if (!__test_and_set_bit(segno, sit_i->dirty_sentries_bitmap)) {
-		sit_i->dirty_sentries++;
-		return false;
-	}
-
-	return true;
-}
-
-static void __set_sit_entry_type(struct f2fs_sb_info *sbi, int type,
-					unsigned int segno, int modified)
-{
-	struct seg_entry *se = get_seg_entry(sbi, segno);
-	se->type = type;
-	if (modified)
-		__mark_sit_entry_dirty(sbi, segno);
-}
-
-static void update_sit_entry(struct f2fs_sb_info *sbi, block_t blkaddr, int del)
-{
-	struct seg_entry *se;
-	unsigned int segno, offset;
-	long int new_vblocks;
-
-	segno = GET_SEGNO(sbi, blkaddr);
-
-	se = get_seg_entry(sbi, segno);
-	new_vblocks = se->valid_blocks + del;
-	offset = GET_BLKOFF_FROM_SEG0(sbi, blkaddr);
-
-	f2fs_bug_on(sbi, (new_vblocks >> (sizeof(unsigned short) << 3) ||
-				(new_vblocks > sbi->blocks_per_seg)));
-
-	se->valid_blocks = new_vblocks;
-	se->mtime = get_mtime(sbi);
-	SIT_I(sbi)->max_mtime = se->mtime;
-
-	/* Update valid block bitmap */
-	if (del > 0) {
-		if (f2fs_test_and_set_bit(offset, se->cur_valid_map)) {
-#ifdef CONFIG_F2FS_CHECK_FS
-			if (f2fs_test_and_set_bit(offset,
-						se->cur_valid_map_mir))
-				f2fs_bug_on(sbi, 1);
-			else
-				WARN_ON(1);
-#else
-			f2fs_bug_on(sbi, 1);
-#endif
-		}
-		if (f2fs_discard_en(sbi) &&
-			!f2fs_test_and_set_bit(offset, se->discard_map))
-			sbi->discard_blks--;
-
-		/* don't overwrite by SSR to keep node chain */
-		if (se->type == CURSEG_WARM_NODE) {
-			if (!f2fs_test_and_set_bit(offset, se->ckpt_valid_map))
-				se->ckpt_valid_blocks++;
-		}
-	} else {
-		if (!f2fs_test_and_clear_bit(offset, se->cur_valid_map)) {
-#ifdef CONFIG_F2FS_CHECK_FS
-			if (!f2fs_test_and_clear_bit(offset,
-						se->cur_valid_map_mir))
-				f2fs_bug_on(sbi, 1);
-			else
-				WARN_ON(1);
-#else
-			f2fs_bug_on(sbi, 1);
-#endif
-		}
-		if (f2fs_discard_en(sbi) &&
-			f2fs_test_and_clear_bit(offset, se->discard_map))
-			sbi->discard_blks++;
-	}
-	if (!f2fs_test_bit(offset, se->ckpt_valid_map))
-		se->ckpt_valid_blocks += del;
-
-	__mark_sit_entry_dirty(sbi, segno);
-
-	/* update total number of valid blocks to be written in ckpt area */
-	SIT_I(sbi)->written_valid_blocks += del;
-
-	if (sbi->segs_per_sec > 1)
-		get_sec_entry(sbi, segno)->valid_blocks += del;
-}
-
-void refresh_sit_entry(struct f2fs_sb_info *sbi, block_t old, block_t new)
-{
-	update_sit_entry(sbi, new, 1);
-	if (GET_SEGNO(sbi, old) != NULL_SEGNO)
-		update_sit_entry(sbi, old, -1);
-
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, old));
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, new));
-}
-
-void invalidate_blocks(struct f2fs_sb_info *sbi, block_t addr)
-{
-	unsigned int segno = GET_SEGNO(sbi, addr);
-	struct sit_info *sit_i = SIT_I(sbi);
-
-	f2fs_bug_on(sbi, addr == NULL_ADDR);
-	if (addr == NEW_ADDR)
-		return;
-
-	/* add it into sit main buffer */
-	mutex_lock(&sit_i->sentry_lock);
-
-	update_sit_entry(sbi, addr, -1);
-
-	/* add it into dirty seglist */
-	locate_dirty_segment(sbi, segno);
-
-	mutex_unlock(&sit_i->sentry_lock);
-}
-
-bool is_checkpointed_data(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int segno, offset;
-	struct seg_entry *se;
-	bool is_cp = false;
-
-	if (blkaddr == NEW_ADDR || blkaddr == NULL_ADDR)
-		return true;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	segno = GET_SEGNO(sbi, blkaddr);
-	se = get_seg_entry(sbi, segno);
-	offset = GET_BLKOFF_FROM_SEG0(sbi, blkaddr);
-
-	if (f2fs_test_bit(offset, se->ckpt_valid_map))
-		is_cp = true;
-
-	mutex_unlock(&sit_i->sentry_lock);
-
-	return is_cp;
-}
-
-/*
- * This function should be resided under the curseg_mutex lock
- */
-static void __add_sum_entry(struct f2fs_sb_info *sbi, int type,
-					struct f2fs_summary *sum)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	void *addr = curseg->sum_blk;
-	addr += curseg->next_blkoff * sizeof(struct f2fs_summary);
-	memcpy(addr, sum, sizeof(struct f2fs_summary));
-}
-
-/*
- * Calculate the number of current summary pages for writing
- */
-int npages_for_summary_flush(struct f2fs_sb_info *sbi, bool for_ra)
-{
-	int valid_sum_count = 0;
-	int i, sum_in_page;
-
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		if (sbi->ckpt->alloc_type[i] == SSR)
-			valid_sum_count += sbi->blocks_per_seg;
-		else {
-			if (for_ra)
-				valid_sum_count += le16_to_cpu(
-					F2FS_CKPT(sbi)->cur_data_blkoff[i]);
-			else
-				valid_sum_count += curseg_blkoff(sbi, i);
-		}
-	}
-
-	sum_in_page = (PAGE_SIZE - 2 * SUM_JOURNAL_SIZE -
-			SUM_FOOTER_SIZE) / SUMMARY_SIZE;
-	if (valid_sum_count <= sum_in_page)
-		return 1;
-	else if ((valid_sum_count - sum_in_page) <=
-		(PAGE_SIZE - SUM_FOOTER_SIZE) / SUMMARY_SIZE)
-		return 2;
-	return 3;
-}
-
-/*
- * Caller should put this summary page
- */
-struct page *get_sum_page(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	return get_meta_page(sbi, GET_SUM_BLOCK(sbi, segno));
-}
-
-void update_meta_page(struct f2fs_sb_info *sbi, void *src, block_t blk_addr)
-{
-	struct page *page = grab_meta_page(sbi, blk_addr);
-	void *dst = page_address(page);
-
-	if (src)
-		memcpy(dst, src, PAGE_SIZE);
-	else
-		memset(dst, 0, PAGE_SIZE);
-	set_page_dirty(page);
-	f2fs_put_page(page, 1);
-}
-
-static void write_sum_page(struct f2fs_sb_info *sbi,
-			struct f2fs_summary_block *sum_blk, block_t blk_addr)
-{
-	update_meta_page(sbi, (void *)sum_blk, blk_addr);
-}
-
-static void write_current_sum_page(struct f2fs_sb_info *sbi,
-						int type, block_t blk_addr)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	struct page *page = grab_meta_page(sbi, blk_addr);
-	struct f2fs_summary_block *src = curseg->sum_blk;
-	struct f2fs_summary_block *dst;
-
-	dst = (struct f2fs_summary_block *)page_address(page);
-
-	mutex_lock(&curseg->curseg_mutex);
-
-	down_read(&curseg->journal_rwsem);
-	memcpy(&dst->journal, curseg->journal, SUM_JOURNAL_SIZE);
-	up_read(&curseg->journal_rwsem);
-
-	memcpy(dst->entries, src->entries, SUM_ENTRY_SIZE);
-	memcpy(&dst->footer, &src->footer, SUM_FOOTER_SIZE);
-
-	mutex_unlock(&curseg->curseg_mutex);
-
-	set_page_dirty(page);
-	f2fs_put_page(page, 1);
-}
-
-static int is_next_segment_free(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int segno = curseg->segno + 1;
-	struct free_segmap_info *free_i = FREE_I(sbi);
-
-	if (segno < MAIN_SEGS(sbi) && segno % sbi->segs_per_sec)
-		return !test_bit(segno, free_i->free_segmap);
-	return 0;
-}
-
-/*
- * Find a new segment from the free segments bitmap to right order
- * This function should be returned with success, otherwise BUG
- */
-static void get_new_segment(struct f2fs_sb_info *sbi,
-			unsigned int *newseg, bool new_sec, int dir)
-{
-	struct free_segmap_info *free_i = FREE_I(sbi);
-	unsigned int segno, secno, zoneno;
-	unsigned int total_zones = MAIN_SECS(sbi) / sbi->secs_per_zone;
-	unsigned int hint = GET_SEC_FROM_SEG(sbi, *newseg);
-	unsigned int old_zoneno = GET_ZONE_FROM_SEG(sbi, *newseg);
-	unsigned int left_start = hint;
-	bool init = true;
-	int go_left = 0;
-	int i;
-
-	spin_lock(&free_i->segmap_lock);
-
-	if (!new_sec && ((*newseg + 1) % sbi->segs_per_sec)) {
-		segno = find_next_zero_bit(free_i->free_segmap,
-			GET_SEG_FROM_SEC(sbi, hint + 1), *newseg + 1);
-		if (segno < GET_SEG_FROM_SEC(sbi, hint + 1))
-			goto got_it;
-	}
-find_other_zone:
-	secno = find_next_zero_bit(free_i->free_secmap, MAIN_SECS(sbi), hint);
-	if (secno >= MAIN_SECS(sbi)) {
-		if (dir == ALLOC_RIGHT) {
-			secno = find_next_zero_bit(free_i->free_secmap,
-							MAIN_SECS(sbi), 0);
-			f2fs_bug_on(sbi, secno >= MAIN_SECS(sbi));
-		} else {
-			go_left = 1;
-			left_start = hint - 1;
-		}
-	}
-	if (go_left == 0)
-		goto skip_left;
-
-	while (test_bit(left_start, free_i->free_secmap)) {
-		if (left_start > 0) {
-			left_start--;
-			continue;
-		}
-		left_start = find_next_zero_bit(free_i->free_secmap,
-							MAIN_SECS(sbi), 0);
-		f2fs_bug_on(sbi, left_start >= MAIN_SECS(sbi));
-		break;
-	}
-	secno = left_start;
-skip_left:
-	hint = secno;
-	segno = GET_SEG_FROM_SEC(sbi, secno);
-	zoneno = GET_ZONE_FROM_SEC(sbi, secno);
-
-	/* give up on finding another zone */
-	if (!init)
-		goto got_it;
-	if (sbi->secs_per_zone == 1)
-		goto got_it;
-	if (zoneno == old_zoneno)
-		goto got_it;
-	if (dir == ALLOC_LEFT) {
-		if (!go_left && zoneno + 1 >= total_zones)
-			goto got_it;
-		if (go_left && zoneno == 0)
-			goto got_it;
-	}
-	for (i = 0; i < NR_CURSEG_TYPE; i++)
-		if (CURSEG_I(sbi, i)->zone == zoneno)
-			break;
-
-	if (i < NR_CURSEG_TYPE) {
-		/* zone is in user, try another */
-		if (go_left)
-			hint = zoneno * sbi->secs_per_zone - 1;
-		else if (zoneno + 1 >= total_zones)
-			hint = 0;
-		else
-			hint = (zoneno + 1) * sbi->secs_per_zone;
-		init = false;
-		goto find_other_zone;
-	}
-got_it:
-	/* set it as dirty segment in free segmap */
-	f2fs_bug_on(sbi, test_bit(segno, free_i->free_segmap));
-	__set_inuse(sbi, segno);
-	*newseg = segno;
-	spin_unlock(&free_i->segmap_lock);
-}
-
-static void reset_curseg(struct f2fs_sb_info *sbi, int type, int modified)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	struct summary_footer *sum_footer;
-
-	curseg->segno = curseg->next_segno;
-	curseg->zone = GET_ZONE_FROM_SEG(sbi, curseg->segno);
-	curseg->next_blkoff = 0;
-	curseg->next_segno = NULL_SEGNO;
-
-	sum_footer = &(curseg->sum_blk->footer);
-	memset(sum_footer, 0, sizeof(struct summary_footer));
-	if (IS_DATASEG(type))
-		SET_SUM_TYPE(sum_footer, SUM_TYPE_DATA);
-	if (IS_NODESEG(type))
-		SET_SUM_TYPE(sum_footer, SUM_TYPE_NODE);
-	__set_sit_entry_type(sbi, type, curseg->segno, modified);
-}
-
-static unsigned int __get_next_segno(struct f2fs_sb_info *sbi, int type)
-{
-	/* if segs_per_sec is large than 1, we need to keep original policy. */
-	if (sbi->segs_per_sec != 1)
-		return CURSEG_I(sbi, type)->segno;
-
-	if (type == CURSEG_HOT_DATA || IS_NODESEG(type))
-		return 0;
-
-	if (SIT_I(sbi)->last_victim[ALLOC_NEXT])
-		return SIT_I(sbi)->last_victim[ALLOC_NEXT];
-	return CURSEG_I(sbi, type)->segno;
-}
-
-/*
- * Allocate a current working segment.
- * This function always allocates a free segment in LFS manner.
- */
-static void new_curseg(struct f2fs_sb_info *sbi, int type, bool new_sec)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int segno = curseg->segno;
-	int dir = ALLOC_LEFT;
-
-	write_sum_page(sbi, curseg->sum_blk,
-				GET_SUM_BLOCK(sbi, segno));
-	if (type == CURSEG_WARM_DATA || type == CURSEG_COLD_DATA)
-		dir = ALLOC_RIGHT;
-
-	if (test_opt(sbi, NOHEAP))
-		dir = ALLOC_RIGHT;
-
-	segno = __get_next_segno(sbi, type);
-	get_new_segment(sbi, &segno, new_sec, dir);
-	curseg->next_segno = segno;
-	reset_curseg(sbi, type, 1);
-	curseg->alloc_type = LFS;
-}
-
-static void __next_free_blkoff(struct f2fs_sb_info *sbi,
-			struct curseg_info *seg, block_t start)
-{
-	struct seg_entry *se = get_seg_entry(sbi, seg->segno);
-	int entries = SIT_VBLOCK_MAP_SIZE / sizeof(unsigned long);
-	unsigned long *target_map = SIT_I(sbi)->tmp_map;
-	unsigned long *ckpt_map = (unsigned long *)se->ckpt_valid_map;
-	unsigned long *cur_map = (unsigned long *)se->cur_valid_map;
-	int i, pos;
-
-	for (i = 0; i < entries; i++)
-		target_map[i] = ckpt_map[i] | cur_map[i];
-
-	pos = __find_rev_next_zero_bit(target_map, sbi->blocks_per_seg, start);
-
-	seg->next_blkoff = pos;
-}
-
-/*
- * If a segment is written by LFS manner, next block offset is just obtained
- * by increasing the current block offset. However, if a segment is written by
- * SSR manner, next block offset obtained by calling __next_free_blkoff
- */
-static void __refresh_next_blkoff(struct f2fs_sb_info *sbi,
-				struct curseg_info *seg)
-{
-	if (seg->alloc_type == SSR)
-		__next_free_blkoff(sbi, seg, seg->next_blkoff + 1);
-	else
-		seg->next_blkoff++;
-}
-
-/*
- * This function always allocates a used segment(from dirty seglist) by SSR
- * manner, so it should recover the existing segment information of valid blocks
- */
-static void change_curseg(struct f2fs_sb_info *sbi, int type, bool reuse)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int new_segno = curseg->next_segno;
-	struct f2fs_summary_block *sum_node;
-	struct page *sum_page;
-
-	write_sum_page(sbi, curseg->sum_blk,
-				GET_SUM_BLOCK(sbi, curseg->segno));
-	__set_test_and_inuse(sbi, new_segno);
-
-	mutex_lock(&dirty_i->seglist_lock);
-	__remove_dirty_segment(sbi, new_segno, PRE);
-	__remove_dirty_segment(sbi, new_segno, DIRTY);
-	mutex_unlock(&dirty_i->seglist_lock);
-
-	reset_curseg(sbi, type, 1);
-	curseg->alloc_type = SSR;
-	__next_free_blkoff(sbi, curseg, 0);
-
-	if (reuse) {
-		sum_page = get_sum_page(sbi, new_segno);
-		sum_node = (struct f2fs_summary_block *)page_address(sum_page);
-		memcpy(curseg->sum_blk, sum_node, SUM_ENTRY_SIZE);
-		f2fs_put_page(sum_page, 1);
-	}
-}
-
-static int get_ssr_segment(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	const struct victim_selection *v_ops = DIRTY_I(sbi)->v_ops;
-	unsigned segno = NULL_SEGNO;
-	int i, cnt;
-	bool reversed = false;
-
-	/* need_SSR() already forces to do this */
-	if (v_ops->get_victim(sbi, &segno, BG_GC, type, SSR)) {
-		curseg->next_segno = segno;
-		return 1;
-	}
-
-	/* For node segments, let's do SSR more intensively */
-	if (IS_NODESEG(type)) {
-		if (type >= CURSEG_WARM_NODE) {
-			reversed = true;
-			i = CURSEG_COLD_NODE;
-		} else {
-			i = CURSEG_HOT_NODE;
-		}
-		cnt = NR_CURSEG_NODE_TYPE;
-	} else {
-		if (type >= CURSEG_WARM_DATA) {
-			reversed = true;
-			i = CURSEG_COLD_DATA;
-		} else {
-			i = CURSEG_HOT_DATA;
-		}
-		cnt = NR_CURSEG_DATA_TYPE;
-	}
-
-	for (; cnt-- > 0; reversed ? i-- : i++) {
-		if (i == type)
-			continue;
-		if (v_ops->get_victim(sbi, &segno, BG_GC, i, SSR)) {
-			curseg->next_segno = segno;
-			return 1;
-		}
-	}
-	return 0;
-}
-
-/*
- * flush out current segment and replace it with new segment
- * This function should be returned with success, otherwise BUG
- */
-static void allocate_segment_by_default(struct f2fs_sb_info *sbi,
-						int type, bool force)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-
-	if (force)
-		new_curseg(sbi, type, true);
-	else if (!is_set_ckpt_flags(sbi, CP_CRC_RECOVERY_FLAG) &&
-					type == CURSEG_WARM_NODE)
-		new_curseg(sbi, type, false);
-	else if (curseg->alloc_type == LFS && is_next_segment_free(sbi, type))
-		new_curseg(sbi, type, false);
-	else if (need_SSR(sbi) && get_ssr_segment(sbi, type))
-		change_curseg(sbi, type, true);
-	else
-		new_curseg(sbi, type, false);
-
-	stat_inc_seg_type(sbi, curseg);
-}
-
-void allocate_new_segments(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *curseg;
-	unsigned int old_segno;
-	int i;
-
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		curseg = CURSEG_I(sbi, i);
-		old_segno = curseg->segno;
-		SIT_I(sbi)->s_ops->allocate_segment(sbi, i, true);
-		locate_dirty_segment(sbi, old_segno);
-	}
-}
-
-static const struct segment_allocation default_salloc_ops = {
-	.allocate_segment = allocate_segment_by_default,
-};
-
-bool exist_trim_candidates(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	__u64 trim_start = cpc->trim_start;
-	bool has_candidate = false;
-
-	mutex_lock(&SIT_I(sbi)->sentry_lock);
-	for (; cpc->trim_start <= cpc->trim_end; cpc->trim_start++) {
-		if (add_discard_addrs(sbi, cpc, true)) {
-			has_candidate = true;
-			break;
-		}
-	}
-	mutex_unlock(&SIT_I(sbi)->sentry_lock);
-
-	cpc->trim_start = trim_start;
-	return has_candidate;
-}
-
-int f2fs_trim_fs(struct f2fs_sb_info *sbi, struct fstrim_range *range)
-{
-	__u64 start = F2FS_BYTES_TO_BLK(range->start);
-	__u64 end = start + F2FS_BYTES_TO_BLK(range->len) - 1;
-	unsigned int start_segno, end_segno;
-	struct cp_control cpc;
-	int err = 0;
-
-	if (start >= MAX_BLKADDR(sbi) || range->len < sbi->blocksize)
-		return -EINVAL;
-
-	cpc.trimmed = 0;
-	if (end <= MAIN_BLKADDR(sbi))
-		goto out;
-
-	if (is_sbi_flag_set(sbi, SBI_NEED_FSCK)) {
-		f2fs_msg(sbi->sb, KERN_WARNING,
-			"Found FS corruption, run fsck to fix.");
-		goto out;
-	}
-
-	/* start/end segment number in main_area */
-	start_segno = (start <= MAIN_BLKADDR(sbi)) ? 0 : GET_SEGNO(sbi, start);
-	end_segno = (end >= MAX_BLKADDR(sbi)) ? MAIN_SEGS(sbi) - 1 :
-						GET_SEGNO(sbi, end);
-	cpc.reason = CP_DISCARD;
-	cpc.trim_minlen = max_t(__u64, 1, F2FS_BYTES_TO_BLK(range->minlen));
-
-	/* do checkpoint to issue discard commands safely */
-	for (; start_segno <= end_segno; start_segno = cpc.trim_end + 1) {
-		cpc.trim_start = start_segno;
-
-		if (sbi->discard_blks == 0)
-			break;
-		else if (sbi->discard_blks < BATCHED_TRIM_BLOCKS(sbi))
-			cpc.trim_end = end_segno;
-		else
-			cpc.trim_end = min_t(unsigned int,
-				rounddown(start_segno +
-				BATCHED_TRIM_SEGMENTS(sbi),
-				sbi->segs_per_sec) - 1, end_segno);
-
-		mutex_lock(&sbi->gc_mutex);
-		err = write_checkpoint(sbi, &cpc);
-		mutex_unlock(&sbi->gc_mutex);
-		if (err)
-			break;
-
-		schedule();
-	}
-out:
-	range->len = F2FS_BLK_TO_BYTES(cpc.trimmed);
-	return err;
-}
-
-static bool __has_curseg_space(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	if (curseg->next_blkoff < sbi->blocks_per_seg)
-		return true;
-	return false;
-}
-
-static int __get_segment_type_2(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA)
-		return CURSEG_HOT_DATA;
-	else
-		return CURSEG_HOT_NODE;
-}
-
-static int __get_segment_type_4(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA) {
-		struct inode *inode = page->mapping->host;
-
-		if (S_ISDIR(inode->i_mode))
-			return CURSEG_HOT_DATA;
-		else
-			return CURSEG_COLD_DATA;
-	} else {
-		if (IS_DNODE(page) && is_cold_node(page))
-			return CURSEG_WARM_NODE;
-		else
-			return CURSEG_COLD_NODE;
-	}
-}
-
-static int __get_segment_type_6(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA) {
-		struct inode *inode = page->mapping->host;
-
-		if (is_cold_data(page) || file_is_cold(inode))
-			return CURSEG_COLD_DATA;
-		if (is_inode_flag_set(inode, FI_HOT_DATA))
-			return CURSEG_HOT_DATA;
-		return CURSEG_WARM_DATA;
-	} else {
-		if (IS_DNODE(page))
-			return is_cold_node(page) ? CURSEG_WARM_NODE :
-						CURSEG_HOT_NODE;
-		return CURSEG_COLD_NODE;
-	}
-}
-
-static int __get_segment_type(struct page *page, enum page_type p_type)
-{
-	switch (F2FS_P_SB(page)->active_logs) {
-	case 2:
-		return __get_segment_type_2(page, p_type);
-	case 4:
-		return __get_segment_type_4(page, p_type);
-	}
-	/* NR_CURSEG_TYPE(6) logs by default */
-	f2fs_bug_on(F2FS_P_SB(page),
-		F2FS_P_SB(page)->active_logs != NR_CURSEG_TYPE);
-	return __get_segment_type_6(page, p_type);
-}
-
-void allocate_data_block(struct f2fs_sb_info *sbi, struct page *page,
-		block_t old_blkaddr, block_t *new_blkaddr,
-		struct f2fs_summary *sum, int type)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-
-	mutex_lock(&curseg->curseg_mutex);
-	mutex_lock(&sit_i->sentry_lock);
-
-	*new_blkaddr = NEXT_FREE_BLKADDR(sbi, curseg);
-
-	f2fs_wait_discard_bio(sbi, *new_blkaddr);
-
-	/*
-	 * __add_sum_entry should be resided under the curseg_mutex
-	 * because, this function updates a summary entry in the
-	 * current summary block.
-	 */
-	__add_sum_entry(sbi, type, sum);
-
-	__refresh_next_blkoff(sbi, curseg);
-
-	stat_inc_block_count(sbi, curseg);
-
-	if (!__has_curseg_space(sbi, type))
-		sit_i->s_ops->allocate_segment(sbi, type, false);
-	/*
-	 * SIT information should be updated after segment allocation,
-	 * since we need to keep dirty segments precisely under SSR.
-	 */
-	refresh_sit_entry(sbi, old_blkaddr, *new_blkaddr);
-
-	mutex_unlock(&sit_i->sentry_lock);
-
-	if (page && IS_NODESEG(type))
-		fill_node_footer_blkaddr(page, NEXT_FREE_BLKADDR(sbi, curseg));
-
-	mutex_unlock(&curseg->curseg_mutex);
-}
-
-static void do_write_page(struct f2fs_summary *sum, struct f2fs_io_info *fio)
-{
-	int type = __get_segment_type(fio->page, fio->type);
-	int err;
-
-	if (fio->type == NODE || fio->type == DATA)
-		mutex_lock(&fio->sbi->wio_mutex[fio->type]);
-reallocate:
-	allocate_data_block(fio->sbi, fio->page, fio->old_blkaddr,
-					&fio->new_blkaddr, sum, type);
-
-	/* writeout dirty page into bdev */
-	err = f2fs_submit_page_mbio(fio);
-	if (err == -EAGAIN) {
-		fio->old_blkaddr = fio->new_blkaddr;
-		goto reallocate;
-	}
-
-	if (fio->type == NODE || fio->type == DATA)
-		mutex_unlock(&fio->sbi->wio_mutex[fio->type]);
-}
-
-void write_meta_page(struct f2fs_sb_info *sbi, struct page *page)
-{
-	struct f2fs_io_info fio = {
-		.sbi = sbi,
-		.type = META,
-		.op = REQ_OP_WRITE,
-		.op_flags = REQ_SYNC | REQ_NOIDLE | REQ_META | REQ_PRIO,
-		.old_blkaddr = page->index,
-		.new_blkaddr = page->index,
-		.page = page,
-		.encrypted_page = NULL,
-	};
-
-	if (unlikely(page->index >= MAIN_BLKADDR(sbi)))
-		fio.op_flags &= ~REQ_META;
-
-	set_page_writeback(page);
-	f2fs_submit_page_mbio(&fio);
-}
-
-void write_node_page(unsigned int nid, struct f2fs_io_info *fio)
-{
-	struct f2fs_summary sum;
-
-	set_summary(&sum, nid, 0, 0);
-	do_write_page(&sum, fio);
-}
-
-void write_data_page(struct dnode_of_data *dn, struct f2fs_io_info *fio)
-{
-	struct f2fs_sb_info *sbi = fio->sbi;
-	struct f2fs_summary sum;
-	struct node_info ni;
-
-	f2fs_bug_on(sbi, dn->data_blkaddr == NULL_ADDR);
-	get_node_info(sbi, dn->nid, &ni);
-	set_summary(&sum, dn->nid, dn->ofs_in_node, ni.version);
-	do_write_page(&sum, fio);
-	f2fs_update_data_blkaddr(dn, fio->new_blkaddr);
-}
-
-int rewrite_data_page(struct f2fs_io_info *fio)
-{
-	fio->new_blkaddr = fio->old_blkaddr;
-	stat_inc_inplace_blocks(fio->sbi);
-	return f2fs_submit_page_bio(fio);
-}
-
-void __f2fs_replace_block(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,
-				block_t old_blkaddr, block_t new_blkaddr,
-				bool recover_curseg, bool recover_newaddr)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg;
-	unsigned int segno, old_cursegno;
-	struct seg_entry *se;
-	int type;
-	unsigned short old_blkoff;
-
-	segno = GET_SEGNO(sbi, new_blkaddr);
-	se = get_seg_entry(sbi, segno);
-	type = se->type;
-
-	if (!recover_curseg) {
-		/* for recovery flow */
-		if (se->valid_blocks == 0 && !IS_CURSEG(sbi, segno)) {
-			if (old_blkaddr == NULL_ADDR)
-				type = CURSEG_COLD_DATA;
-			else
-				type = CURSEG_WARM_DATA;
-		}
-	} else {
-		if (!IS_CURSEG(sbi, segno))
-			type = CURSEG_WARM_DATA;
-	}
-
-	curseg = CURSEG_I(sbi, type);
-
-	mutex_lock(&curseg->curseg_mutex);
-	mutex_lock(&sit_i->sentry_lock);
-
-	old_cursegno = curseg->segno;
-	old_blkoff = curseg->next_blkoff;
-
-	/* change the current segment */
-	if (segno != curseg->segno) {
-		curseg->next_segno = segno;
-		change_curseg(sbi, type, true);
-	}
-
-	curseg->next_blkoff = GET_BLKOFF_FROM_SEG0(sbi, new_blkaddr);
-	__add_sum_entry(sbi, type, sum);
-
-	if (!recover_curseg || recover_newaddr)
-		update_sit_entry(sbi, new_blkaddr, 1);
-	if (GET_SEGNO(sbi, old_blkaddr) != NULL_SEGNO)
-		update_sit_entry(sbi, old_blkaddr, -1);
-
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, old_blkaddr));
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, new_blkaddr));
-
-	locate_dirty_segment(sbi, old_cursegno);
-
-	if (recover_curseg) {
-		if (old_cursegno != curseg->segno) {
-			curseg->next_segno = old_cursegno;
-			change_curseg(sbi, type, true);
-		}
-		curseg->next_blkoff = old_blkoff;
-	}
-
-	mutex_unlock(&sit_i->sentry_lock);
-	mutex_unlock(&curseg->curseg_mutex);
-}
-
-void f2fs_replace_block(struct f2fs_sb_info *sbi, struct dnode_of_data *dn,
-				block_t old_addr, block_t new_addr,
-				unsigned char version, bool recover_curseg,
-				bool recover_newaddr)
-{
-	struct f2fs_summary sum;
-
-	set_summary(&sum, dn->nid, dn->ofs_in_node, version);
-
-	__f2fs_replace_block(sbi, &sum, old_addr, new_addr,
-					recover_curseg, recover_newaddr);
-
-	f2fs_update_data_blkaddr(dn, new_addr);
-}
-
-void f2fs_wait_on_page_writeback(struct page *page,
-				enum page_type type, bool ordered)
-{
-	if (PageWriteback(page)) {
-		struct f2fs_sb_info *sbi = F2FS_P_SB(page);
-
-		f2fs_submit_merged_bio_cond(sbi, page->mapping->host,
-						0, page->index, type, WRITE);
-		if (ordered)
-			wait_on_page_writeback(page);
-		else
-			/* wait_for_stable_page(page) doesn't support */
-			wait_on_page_writeback(page);
-	}
-}
-
-void f2fs_wait_on_encrypted_page_writeback(struct f2fs_sb_info *sbi,
-							block_t blkaddr)
-{
-	struct page *cpage;
-
-	if (blkaddr == NEW_ADDR || blkaddr == NULL_ADDR)
-		return;
-
-	cpage = find_lock_page(META_MAPPING(sbi), blkaddr);
-	if (cpage) {
-		f2fs_wait_on_page_writeback(cpage, DATA, true);
-		f2fs_put_page(cpage, 1);
-	}
-}
-
-static int read_compacted_summaries(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct curseg_info *seg_i;
-	unsigned char *kaddr;
-	struct page *page;
-	block_t start;
-	int i, j, offset;
-
-	start = start_sum_block(sbi);
-
-	page = get_meta_page(sbi, start++);
-	kaddr = (unsigned char *)page_address(page);
-
-	/* Step 1: restore nat cache */
-	seg_i = CURSEG_I(sbi, CURSEG_HOT_DATA);
-	memcpy(seg_i->journal, kaddr, SUM_JOURNAL_SIZE);
-
-	/* Step 2: restore sit cache */
-	seg_i = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	memcpy(seg_i->journal, kaddr + SUM_JOURNAL_SIZE, SUM_JOURNAL_SIZE);
-	offset = 2 * SUM_JOURNAL_SIZE;
-
-	/* Step 3: restore summary entries */
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		unsigned short blk_off;
-		unsigned int segno;
-
-		seg_i = CURSEG_I(sbi, i);
-		segno = le32_to_cpu(ckpt->cur_data_segno[i]);
-		blk_off = le16_to_cpu(ckpt->cur_data_blkoff[i]);
-		seg_i->next_segno = segno;
-		reset_curseg(sbi, i, 0);
-		seg_i->alloc_type = ckpt->alloc_type[i];
-		seg_i->next_blkoff = blk_off;
-
-		if (seg_i->alloc_type == SSR)
-			blk_off = sbi->blocks_per_seg;
-
-		for (j = 0; j < blk_off; j++) {
-			struct f2fs_summary *s;
-			s = (struct f2fs_summary *)(kaddr + offset);
-			seg_i->sum_blk->entries[j] = *s;
-			offset += SUMMARY_SIZE;
-			if (offset + SUMMARY_SIZE <= PAGE_SIZE -
-						SUM_FOOTER_SIZE)
-				continue;
-
-			f2fs_put_page(page, 1);
-			page = NULL;
-
-			page = get_meta_page(sbi, start++);
-			kaddr = (unsigned char *)page_address(page);
-			offset = 0;
-		}
-	}
-	f2fs_put_page(page, 1);
-	return 0;
-}
-
-static int read_normal_summaries(struct f2fs_sb_info *sbi, int type)
-{
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct f2fs_summary_block *sum;
-	struct curseg_info *curseg;
-	struct page *new;
-	unsigned short blk_off;
-	unsigned int segno = 0;
-	block_t blk_addr = 0;
-
-	/* get segment number and block addr */
-	if (IS_DATASEG(type)) {
-		segno = le32_to_cpu(ckpt->cur_data_segno[type]);
-		blk_off = le16_to_cpu(ckpt->cur_data_blkoff[type -
-							CURSEG_HOT_DATA]);
-		if (__exist_node_summaries(sbi))
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_TYPE, type);
-		else
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_DATA_TYPE, type);
-	} else {
-		segno = le32_to_cpu(ckpt->cur_node_segno[type -
-							CURSEG_HOT_NODE]);
-		blk_off = le16_to_cpu(ckpt->cur_node_blkoff[type -
-							CURSEG_HOT_NODE]);
-		if (__exist_node_summaries(sbi))
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_NODE_TYPE,
-							type - CURSEG_HOT_NODE);
-		else
-			blk_addr = GET_SUM_BLOCK(sbi, segno);
-	}
-
-	new = get_meta_page(sbi, blk_addr);
-	sum = (struct f2fs_summary_block *)page_address(new);
-
-	if (IS_NODESEG(type)) {
-		if (__exist_node_summaries(sbi)) {
-			struct f2fs_summary *ns = &sum->entries[0];
-			int i;
-			for (i = 0; i < sbi->blocks_per_seg; i++, ns++) {
-				ns->version = 0;
-				ns->ofs_in_node = 0;
-			}
-		} else {
-			int err;
-
-			err = restore_node_summary(sbi, segno, sum);
-			if (err) {
-				f2fs_put_page(new, 1);
-				return err;
-			}
-		}
-	}
-
-	/* set uncompleted segment to curseg */
-	curseg = CURSEG_I(sbi, type);
-	mutex_lock(&curseg->curseg_mutex);
-
-	/* update journal info */
-	down_write(&curseg->journal_rwsem);
-	memcpy(curseg->journal, &sum->journal, SUM_JOURNAL_SIZE);
-	up_write(&curseg->journal_rwsem);
-
-	memcpy(curseg->sum_blk->entries, sum->entries, SUM_ENTRY_SIZE);
-	memcpy(&curseg->sum_blk->footer, &sum->footer, SUM_FOOTER_SIZE);
-	curseg->next_segno = segno;
-	reset_curseg(sbi, type, 0);
-	curseg->alloc_type = ckpt->alloc_type[type];
-	curseg->next_blkoff = blk_off;
-	mutex_unlock(&curseg->curseg_mutex);
-	f2fs_put_page(new, 1);
-	return 0;
-}
-
-static int restore_curseg_summaries(struct f2fs_sb_info *sbi)
-{
-	int type = CURSEG_HOT_DATA;
-	int err;
-
-	if (is_set_ckpt_flags(sbi, CP_COMPACT_SUM_FLAG)) {
-		int npages = npages_for_summary_flush(sbi, true);
-
-		if (npages >= 2)
-			ra_meta_pages(sbi, start_sum_block(sbi), npages,
-							META_CP, true);
-
-		/* restore for compacted data summary */
-		if (read_compacted_summaries(sbi))
-			return -EINVAL;
-		type = CURSEG_HOT_NODE;
-	}
-
-	if (__exist_node_summaries(sbi))
-		ra_meta_pages(sbi, sum_blk_addr(sbi, NR_CURSEG_TYPE, type),
-					NR_CURSEG_TYPE - type, META_CP, true);
-
-	for (; type <= CURSEG_COLD_NODE; type++) {
-		err = read_normal_summaries(sbi, type);
-		if (err)
-			return err;
-	}
-
-	return 0;
-}
-
-static void write_compacted_summaries(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct page *page;
-	unsigned char *kaddr;
-	struct f2fs_summary *summary;
-	struct curseg_info *seg_i;
-	int written_size = 0;
-	int i, j;
-
-	page = grab_meta_page(sbi, blkaddr++);
-	kaddr = (unsigned char *)page_address(page);
-
-	/* Step 1: write nat cache */
-	seg_i = CURSEG_I(sbi, CURSEG_HOT_DATA);
-	memcpy(kaddr, seg_i->journal, SUM_JOURNAL_SIZE);
-	written_size += SUM_JOURNAL_SIZE;
-
-	/* Step 2: write sit cache */
-	seg_i = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	memcpy(kaddr + written_size, seg_i->journal, SUM_JOURNAL_SIZE);
-	written_size += SUM_JOURNAL_SIZE;
-
-	/* Step 3: write summary entries */
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		unsigned short blkoff;
-		seg_i = CURSEG_I(sbi, i);
-		if (sbi->ckpt->alloc_type[i] == SSR)
-			blkoff = sbi->blocks_per_seg;
-		else
-			blkoff = curseg_blkoff(sbi, i);
-
-		for (j = 0; j < blkoff; j++) {
-			if (!page) {
-				page = grab_meta_page(sbi, blkaddr++);
-				kaddr = (unsigned char *)page_address(page);
-				written_size = 0;
-			}
-			summary = (struct f2fs_summary *)(kaddr + written_size);
-			*summary = seg_i->sum_blk->entries[j];
-			written_size += SUMMARY_SIZE;
-
-			if (written_size + SUMMARY_SIZE <= PAGE_SIZE -
-							SUM_FOOTER_SIZE)
-				continue;
-
-			set_page_dirty(page);
-			f2fs_put_page(page, 1);
-			page = NULL;
-		}
-	}
-	if (page) {
-		set_page_dirty(page);
-		f2fs_put_page(page, 1);
-	}
-}
-
-static void write_normal_summaries(struct f2fs_sb_info *sbi,
-					block_t blkaddr, int type)
-{
-	int i, end;
-	if (IS_DATASEG(type))
-		end = type + NR_CURSEG_DATA_TYPE;
-	else
-		end = type + NR_CURSEG_NODE_TYPE;
-
-	for (i = type; i < end; i++)
-		write_current_sum_page(sbi, i, blkaddr + (i - type));
-}
-
-void write_data_summaries(struct f2fs_sb_info *sbi, block_t start_blk)
-{
-	if (is_set_ckpt_flags(sbi, CP_COMPACT_SUM_FLAG))
-		write_compacted_summaries(sbi, start_blk);
-	else
-		write_normal_summaries(sbi, start_blk, CURSEG_HOT_DATA);
-}
-
-void write_node_summaries(struct f2fs_sb_info *sbi, block_t start_blk)
-{
-	write_normal_summaries(sbi, start_blk, CURSEG_HOT_NODE);
-}
-
-int lookup_journal_in_cursum(struct f2fs_journal *journal, int type,
-					unsigned int val, int alloc)
-{
-	int i;
-
-	if (type == NAT_JOURNAL) {
-		for (i = 0; i < nats_in_cursum(journal); i++) {
-			if (le32_to_cpu(nid_in_journal(journal, i)) == val)
-				return i;
-		}
-		if (alloc && __has_cursum_space(journal, 1, NAT_JOURNAL))
-			return update_nats_in_cursum(journal, 1);
-	} else if (type == SIT_JOURNAL) {
-		for (i = 0; i < sits_in_cursum(journal); i++)
-			if (le32_to_cpu(segno_in_journal(journal, i)) == val)
-				return i;
-		if (alloc && __has_cursum_space(journal, 1, SIT_JOURNAL))
-			return update_sits_in_cursum(journal, 1);
-	}
-	return -1;
-}
-
-static struct page *get_current_sit_page(struct f2fs_sb_info *sbi,
-					unsigned int segno)
-{
-	return get_meta_page(sbi, current_sit_addr(sbi, segno));
-}
-
-static struct page *get_next_sit_page(struct f2fs_sb_info *sbi,
-					unsigned int start)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct page *src_page, *dst_page;
-	pgoff_t src_off, dst_off;
-	void *src_addr, *dst_addr;
-
-	src_off = current_sit_addr(sbi, start);
-	dst_off = next_sit_addr(sbi, src_off);
-
-	/* get current sit block page without lock */
-	src_page = get_meta_page(sbi, src_off);
-	dst_page = grab_meta_page(sbi, dst_off);
-	f2fs_bug_on(sbi, PageDirty(src_page));
-
-	src_addr = page_address(src_page);
-	dst_addr = page_address(dst_page);
-	memcpy(dst_addr, src_addr, PAGE_SIZE);
-
-	set_page_dirty(dst_page);
-	f2fs_put_page(src_page, 1);
-
-	set_to_next_sit(sit_i, start);
-
-	return dst_page;
-}
-
-static struct sit_entry_set *grab_sit_entry_set(void)
-{
-	struct sit_entry_set *ses =
-			f2fs_kmem_cache_alloc(sit_entry_set_slab, GFP_NOFS);
-
-	ses->entry_cnt = 0;
-	INIT_LIST_HEAD(&ses->set_list);
-	return ses;
-}
-
-static void release_sit_entry_set(struct sit_entry_set *ses)
-{
-	list_del(&ses->set_list);
-	kmem_cache_free(sit_entry_set_slab, ses);
-}
-
-static void adjust_sit_entry_set(struct sit_entry_set *ses,
-						struct list_head *head)
-{
-	struct sit_entry_set *next = ses;
-
-	if (list_is_last(&ses->set_list, head))
-		return;
-
-	list_for_each_entry_continue(next, head, set_list)
-		if (ses->entry_cnt <= next->entry_cnt)
-			break;
-
-	list_move_tail(&ses->set_list, &next->set_list);
-}
-
-static void add_sit_entry(unsigned int segno, struct list_head *head)
-{
-	struct sit_entry_set *ses;
-	unsigned int start_segno = START_SEGNO(segno);
-
-	list_for_each_entry(ses, head, set_list) {
-		if (ses->start_segno == start_segno) {
-			ses->entry_cnt++;
-			adjust_sit_entry_set(ses, head);
-			return;
-		}
-	}
-
-	ses = grab_sit_entry_set();
-
-	ses->start_segno = start_segno;
-	ses->entry_cnt++;
-	list_add(&ses->set_list, head);
-}
-
-static void add_sits_in_set(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_sm_info *sm_info = SM_I(sbi);
-	struct list_head *set_list = &sm_info->sit_entry_set;
-	unsigned long *bitmap = SIT_I(sbi)->dirty_sentries_bitmap;
-	unsigned int segno;
-
-	for_each_set_bit(segno, bitmap, MAIN_SEGS(sbi))
-		add_sit_entry(segno, set_list);
-}
-
-static void remove_sits_in_journal(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	int i;
-
-	down_write(&curseg->journal_rwsem);
-	for (i = 0; i < sits_in_cursum(journal); i++) {
-		unsigned int segno;
-		bool dirtied;
-
-		segno = le32_to_cpu(segno_in_journal(journal, i));
-		dirtied = __mark_sit_entry_dirty(sbi, segno);
-
-		if (!dirtied)
-			add_sit_entry(segno, &SM_I(sbi)->sit_entry_set);
-	}
-	update_sits_in_cursum(journal, -i);
-	up_write(&curseg->journal_rwsem);
-}
-
-/*
- * CP calls this function, which flushes SIT entries including sit_journal,
- * and moves prefree segs to free segs.
- */
-void flush_sit_entries(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned long *bitmap = sit_i->dirty_sentries_bitmap;
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	struct sit_entry_set *ses, *tmp;
-	struct list_head *head = &SM_I(sbi)->sit_entry_set;
-	bool to_journal = true;
-	struct seg_entry *se;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	if (!sit_i->dirty_sentries)
-		goto out;
-
-	/*
-	 * add and account sit entries of dirty bitmap in sit entry
-	 * set temporarily
-	 */
-	add_sits_in_set(sbi);
-
-	/*
-	 * if there are no enough space in journal to store dirty sit
-	 * entries, remove all entries from journal and add and account
-	 * them in sit entry set.
-	 */
-	if (!__has_cursum_space(journal, sit_i->dirty_sentries, SIT_JOURNAL))
-		remove_sits_in_journal(sbi);
-
-	/*
-	 * there are two steps to flush sit entries:
-	 * #1, flush sit entries to journal in current cold data summary block.
-	 * #2, flush sit entries to sit page.
-	 */
-	list_for_each_entry_safe(ses, tmp, head, set_list) {
-		struct page *page = NULL;
-		struct f2fs_sit_block *raw_sit = NULL;
-		unsigned int start_segno = ses->start_segno;
-		unsigned int end = min(start_segno + SIT_ENTRY_PER_BLOCK,
-						(unsigned long)MAIN_SEGS(sbi));
-		unsigned int segno = start_segno;
-
-		if (to_journal &&
-			!__has_cursum_space(journal, ses->entry_cnt, SIT_JOURNAL))
-			to_journal = false;
-
-		if (to_journal) {
-			down_write(&curseg->journal_rwsem);
-		} else {
-			page = get_next_sit_page(sbi, start_segno);
-			raw_sit = page_address(page);
-		}
-
-		/* flush dirty sit entries in region of current sit set */
-		for_each_set_bit_from(segno, bitmap, end) {
-			int offset, sit_offset;
-
-			se = get_seg_entry(sbi, segno);
-
-			/* add discard candidates */
-			if (!(cpc->reason & CP_DISCARD)) {
-				cpc->trim_start = segno;
-				add_discard_addrs(sbi, cpc, false);
-			}
-
-			if (to_journal) {
-				offset = lookup_journal_in_cursum(journal,
-							SIT_JOURNAL, segno, 1);
-				f2fs_bug_on(sbi, offset < 0);
-				segno_in_journal(journal, offset) =
-							cpu_to_le32(segno);
-				seg_info_to_raw_sit(se,
-					&sit_in_journal(journal, offset));
-			} else {
-				sit_offset = SIT_ENTRY_OFFSET(sit_i, segno);
-				seg_info_to_raw_sit(se,
-						&raw_sit->entries[sit_offset]);
-			}
-
-			__clear_bit(segno, bitmap);
-			sit_i->dirty_sentries--;
-			ses->entry_cnt--;
-		}
-
-		if (to_journal)
-			up_write(&curseg->journal_rwsem);
-		else
-			f2fs_put_page(page, 1);
-
-		f2fs_bug_on(sbi, ses->entry_cnt);
-		release_sit_entry_set(ses);
-	}
-
-	f2fs_bug_on(sbi, !list_empty(head));
-	f2fs_bug_on(sbi, sit_i->dirty_sentries);
-out:
-	if (cpc->reason & CP_DISCARD) {
-		__u64 trim_start = cpc->trim_start;
-
-		for (; cpc->trim_start <= cpc->trim_end; cpc->trim_start++)
-			add_discard_addrs(sbi, cpc, false);
-
-		cpc->trim_start = trim_start;
-	}
-	mutex_unlock(&sit_i->sentry_lock);
-
-	set_prefree_as_free_segments(sbi);
-}
-
-static int build_sit_info(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_super_block *raw_super = F2FS_RAW_SUPER(sbi);
-	struct sit_info *sit_i;
-	unsigned int sit_segs, start;
-	char *src_bitmap;
-	unsigned int bitmap_size;
-
-	/* allocate memory for SIT information */
-	sit_i = kzalloc(sizeof(struct sit_info), GFP_KERNEL);
-	if (!sit_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->sit_info = sit_i;
-
-	sit_i->sentries = f2fs_kvzalloc(MAIN_SEGS(sbi) *
-					sizeof(struct seg_entry), GFP_KERNEL);
-	if (!sit_i->sentries)
-		return -ENOMEM;
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-	sit_i->dirty_sentries_bitmap = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-	if (!sit_i->dirty_sentries_bitmap)
-		return -ENOMEM;
-
-	for (start = 0; start < MAIN_SEGS(sbi); start++) {
-		sit_i->sentries[start].cur_valid_map
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		sit_i->sentries[start].ckpt_valid_map
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		if (!sit_i->sentries[start].cur_valid_map ||
-				!sit_i->sentries[start].ckpt_valid_map)
-			return -ENOMEM;
-
-#ifdef CONFIG_F2FS_CHECK_FS
-		sit_i->sentries[start].cur_valid_map_mir
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		if (!sit_i->sentries[start].cur_valid_map_mir)
-			return -ENOMEM;
-#endif
-
-		if (f2fs_discard_en(sbi)) {
-			sit_i->sentries[start].discard_map
-				= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-			if (!sit_i->sentries[start].discard_map)
-				return -ENOMEM;
-		}
-	}
-
-	sit_i->tmp_map = kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-	if (!sit_i->tmp_map)
-		return -ENOMEM;
-
-	if (sbi->segs_per_sec > 1) {
-		sit_i->sec_entries = f2fs_kvzalloc(MAIN_SECS(sbi) *
-					sizeof(struct sec_entry), GFP_KERNEL);
-		if (!sit_i->sec_entries)
-			return -ENOMEM;
-	}
-
-	/* get information related with SIT */
-	sit_segs = le32_to_cpu(raw_super->segment_count_sit) >> 1;
-
-	/* setup SIT bitmap from ckeckpoint pack */
-	bitmap_size = __bitmap_size(sbi, SIT_BITMAP);
-	src_bitmap = __bitmap_ptr(sbi, SIT_BITMAP);
-
-	sit_i->sit_bitmap = kmemdup(src_bitmap, bitmap_size, GFP_KERNEL);
-	if (!sit_i->sit_bitmap)
-		return -ENOMEM;
-
-#ifdef CONFIG_F2FS_CHECK_FS
-	sit_i->sit_bitmap_mir = kmemdup(src_bitmap, bitmap_size, GFP_KERNEL);
-	if (!sit_i->sit_bitmap_mir)
-		return -ENOMEM;
-#endif
-
-	/* init SIT information */
-	sit_i->s_ops = &default_salloc_ops;
-
-	sit_i->sit_base_addr = le32_to_cpu(raw_super->sit_blkaddr);
-	sit_i->sit_blocks = sit_segs << sbi->log_blocks_per_seg;
-	sit_i->written_valid_blocks = 0;
-	sit_i->bitmap_size = bitmap_size;
-	sit_i->dirty_sentries = 0;
-	sit_i->sents_per_block = SIT_ENTRY_PER_BLOCK;
-	sit_i->elapsed_time = le64_to_cpu(sbi->ckpt->elapsed_time);
-	sit_i->mounted_time = CURRENT_TIME_SEC.tv_sec;
-	mutex_init(&sit_i->sentry_lock);
-	return 0;
-}
-
-static int build_free_segmap(struct f2fs_sb_info *sbi)
-{
-	struct free_segmap_info *free_i;
-	unsigned int bitmap_size, sec_bitmap_size;
-
-	/* allocate memory for free segmap information */
-	free_i = kzalloc(sizeof(struct free_segmap_info), GFP_KERNEL);
-	if (!free_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->free_info = free_i;
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-	free_i->free_segmap = f2fs_kvmalloc(bitmap_size, GFP_KERNEL);
-	if (!free_i->free_segmap)
-		return -ENOMEM;
-
-	sec_bitmap_size = f2fs_bitmap_size(MAIN_SECS(sbi));
-	free_i->free_secmap = f2fs_kvmalloc(sec_bitmap_size, GFP_KERNEL);
-	if (!free_i->free_secmap)
-		return -ENOMEM;
-
-	/* set all segments as dirty temporarily */
-	memset(free_i->free_segmap, 0xff, bitmap_size);
-	memset(free_i->free_secmap, 0xff, sec_bitmap_size);
-
-	/* init free segmap information */
-	free_i->start_segno = GET_SEGNO_FROM_SEG0(sbi, MAIN_BLKADDR(sbi));
-	free_i->free_segments = 0;
-	free_i->free_sections = 0;
-	spin_lock_init(&free_i->segmap_lock);
-	return 0;
-}
-
-static int build_curseg(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *array;
-	int i;
-
-	array = kcalloc(NR_CURSEG_TYPE, sizeof(*array), GFP_KERNEL);
-	if (!array)
-		return -ENOMEM;
-
-	SM_I(sbi)->curseg_array = array;
-
-	for (i = 0; i < NR_CURSEG_TYPE; i++) {
-		mutex_init(&array[i].curseg_mutex);
-		array[i].sum_blk = kzalloc(PAGE_SIZE, GFP_KERNEL);
-		if (!array[i].sum_blk)
-			return -ENOMEM;
-		init_rwsem(&array[i].journal_rwsem);
-		array[i].journal = kzalloc(sizeof(struct f2fs_journal),
-							GFP_KERNEL);
-		if (!array[i].journal)
-			return -ENOMEM;
-		array[i].segno = NULL_SEGNO;
-		array[i].next_blkoff = 0;
-	}
-	return restore_curseg_summaries(sbi);
-}
-
-static void build_sit_entries(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	struct seg_entry *se;
-	struct f2fs_sit_entry sit;
-	int sit_blk_cnt = SIT_BLK_CNT(sbi);
-	unsigned int i, start, end;
-	unsigned int readed, start_blk = 0;
-
-	do {
-		readed = ra_meta_pages(sbi, start_blk, BIO_MAX_PAGES,
-							META_SIT, true);
-
-		start = start_blk * sit_i->sents_per_block;
-		end = (start_blk + readed) * sit_i->sents_per_block;
-
-		for (; start < end && start < MAIN_SEGS(sbi); start++) {
-			struct f2fs_sit_block *sit_blk;
-			struct page *page;
-
-			se = &sit_i->sentries[start];
-			page = get_current_sit_page(sbi, start);
-			sit_blk = (struct f2fs_sit_block *)page_address(page);
-			sit = sit_blk->entries[SIT_ENTRY_OFFSET(sit_i, start)];
-			f2fs_put_page(page, 1);
-
-			check_block_count(sbi, start, &sit);
-			seg_info_from_raw_sit(se, &sit);
-
-			/* build discard map only one time */
-			if (f2fs_discard_en(sbi)) {
-				if (is_set_ckpt_flags(sbi, CP_TRIMMED_FLAG)) {
-					memset(se->discard_map, 0xff,
-						SIT_VBLOCK_MAP_SIZE);
-				} else {
-					memcpy(se->discard_map,
-						se->cur_valid_map,
-						SIT_VBLOCK_MAP_SIZE);
-					sbi->discard_blks +=
-						sbi->blocks_per_seg -
-						se->valid_blocks;
-				}
-			}
-
-			if (sbi->segs_per_sec > 1)
-				get_sec_entry(sbi, start)->valid_blocks +=
-							se->valid_blocks;
-		}
-		start_blk += readed;
-	} while (start_blk < sit_blk_cnt);
-
-	down_read(&curseg->journal_rwsem);
-	for (i = 0; i < sits_in_cursum(journal); i++) {
-		unsigned int old_valid_blocks;
-
-		start = le32_to_cpu(segno_in_journal(journal, i));
-		se = &sit_i->sentries[start];
-		sit = sit_in_journal(journal, i);
-
-		old_valid_blocks = se->valid_blocks;
-
-		check_block_count(sbi, start, &sit);
-		seg_info_from_raw_sit(se, &sit);
-
-		if (f2fs_discard_en(sbi)) {
-			if (is_set_ckpt_flags(sbi, CP_TRIMMED_FLAG)) {
-				memset(se->discard_map, 0xff,
-							SIT_VBLOCK_MAP_SIZE);
-			} else {
-				memcpy(se->discard_map, se->cur_valid_map,
-							SIT_VBLOCK_MAP_SIZE);
-				sbi->discard_blks += old_valid_blocks -
-							se->valid_blocks;
-			}
-		}
-
-		if (sbi->segs_per_sec > 1)
-			get_sec_entry(sbi, start)->valid_blocks +=
-				se->valid_blocks - old_valid_blocks;
-	}
-	up_read(&curseg->journal_rwsem);
-}
-
-static void init_free_segmap(struct f2fs_sb_info *sbi)
-{
-	unsigned int start;
-	int type;
-
-	for (start = 0; start < MAIN_SEGS(sbi); start++) {
-		struct seg_entry *sentry = get_seg_entry(sbi, start);
-		if (!sentry->valid_blocks)
-			__set_free(sbi, start);
-		else
-			SIT_I(sbi)->written_valid_blocks +=
-						sentry->valid_blocks;
-	}
-
-	/* set use the current segments */
-	for (type = CURSEG_HOT_DATA; type <= CURSEG_COLD_NODE; type++) {
-		struct curseg_info *curseg_t = CURSEG_I(sbi, type);
-		__set_test_and_inuse(sbi, curseg_t->segno);
-	}
-}
-
-static void init_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	struct free_segmap_info *free_i = FREE_I(sbi);
-	unsigned int segno = 0, offset = 0;
-	unsigned short valid_blocks;
-
-	while (1) {
-		/* find dirty segment based on free segmap */
-		segno = find_next_inuse(free_i, MAIN_SEGS(sbi), offset);
-		if (segno >= MAIN_SEGS(sbi))
-			break;
-		offset = segno + 1;
-		valid_blocks = get_valid_blocks(sbi, segno, false);
-		if (valid_blocks == sbi->blocks_per_seg || !valid_blocks)
-			continue;
-		if (valid_blocks > sbi->blocks_per_seg) {
-			f2fs_bug_on(sbi, 1);
-			continue;
-		}
-		mutex_lock(&dirty_i->seglist_lock);
-		__locate_dirty_segment(sbi, segno, DIRTY);
-		mutex_unlock(&dirty_i->seglist_lock);
-	}
-}
-
-static int init_victim_secmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned int bitmap_size = f2fs_bitmap_size(MAIN_SECS(sbi));
-
-	dirty_i->victim_secmap = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-	if (!dirty_i->victim_secmap)
-		return -ENOMEM;
-	return 0;
-}
-
-static int build_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i;
-	unsigned int bitmap_size, i;
-
-	/* allocate memory for dirty segments list information */
-	dirty_i = kzalloc(sizeof(struct dirty_seglist_info), GFP_KERNEL);
-	if (!dirty_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->dirty_info = dirty_i;
-	mutex_init(&dirty_i->seglist_lock);
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-
-	for (i = 0; i < NR_DIRTY_TYPE; i++) {
-		dirty_i->dirty_segmap[i] = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-		if (!dirty_i->dirty_segmap[i])
-			return -ENOMEM;
-	}
-
-	init_dirty_segmap(sbi);
-	return init_victim_secmap(sbi);
-}
-
-/*
- * Update min, max modified time for cost-benefit GC algorithm
- */
-static void init_min_max_mtime(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int segno;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	sit_i->min_mtime = LLONG_MAX;
-
-	for (segno = 0; segno < MAIN_SEGS(sbi); segno += sbi->segs_per_sec) {
-		unsigned int i;
-		unsigned long long mtime = 0;
-
-		for (i = 0; i < sbi->segs_per_sec; i++)
-			mtime += get_seg_entry(sbi, segno + i)->mtime;
-
-		mtime = div_u64(mtime, sbi->segs_per_sec);
-
-		if (sit_i->min_mtime > mtime)
-			sit_i->min_mtime = mtime;
-	}
-	sit_i->max_mtime = get_mtime(sbi);
-	mutex_unlock(&sit_i->sentry_lock);
-}
-
-int build_segment_manager(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_super_block *raw_super = F2FS_RAW_SUPER(sbi);
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct f2fs_sm_info *sm_info;
-	int err;
-
-	sm_info = kzalloc(sizeof(struct f2fs_sm_info), GFP_KERNEL);
-	if (!sm_info)
-		return -ENOMEM;
-
-	/* init sm info */
-	sbi->sm_info = sm_info;
-	sm_info->seg0_blkaddr = le32_to_cpu(raw_super->segment0_blkaddr);
-	sm_info->main_blkaddr = le32_to_cpu(raw_super->main_blkaddr);
-	sm_info->segment_count = le32_to_cpu(raw_super->segment_count);
-	sm_info->reserved_segments = le32_to_cpu(ckpt->rsvd_segment_count);
-	sm_info->ovp_segments = le32_to_cpu(ckpt->overprov_segment_count);
-	sm_info->main_segments = le32_to_cpu(raw_super->segment_count_main);
-	sm_info->ssa_blkaddr = le32_to_cpu(raw_super->ssa_blkaddr);
-	sm_info->rec_prefree_segments = sm_info->main_segments *
-					DEF_RECLAIM_PREFREE_SEGMENTS / 100;
-	if (sm_info->rec_prefree_segments > DEF_MAX_RECLAIM_PREFREE_SEGMENTS)
-		sm_info->rec_prefree_segments = DEF_MAX_RECLAIM_PREFREE_SEGMENTS;
-
-	if (!test_opt(sbi, LFS))
-		sm_info->ipu_policy = 1 << F2FS_IPU_FSYNC;
-	sm_info->min_ipu_util = DEF_MIN_IPU_UTIL;
-	sm_info->min_fsync_blocks = DEF_MIN_FSYNC_BLOCKS;
-	sm_info->min_hot_blocks = DEF_MIN_HOT_BLOCKS;
-
-	sm_info->trim_sections = DEF_BATCHED_TRIM_SECTIONS;
-
-	INIT_LIST_HEAD(&sm_info->sit_entry_set);
-
-	if (!f2fs_readonly(sbi->sb)) {
-		err = create_flush_cmd_control(sbi);
-		if (err)
-			return err;
-	}
-
-	err = create_discard_cmd_control(sbi);
-	if (err)
-		return err;
-
-	err = build_sit_info(sbi);
-	if (err)
-		return err;
-	err = build_free_segmap(sbi);
-	if (err)
-		return err;
-	err = build_curseg(sbi);
-	if (err)
-		return err;
-
-	/* reinit free segmap based on SIT */
-	build_sit_entries(sbi);
-
-	init_free_segmap(sbi);
-	err = build_dirty_segmap(sbi);
-	if (err)
-		return err;
-
-	init_min_max_mtime(sbi);
-	return 0;
-}
-
-static void discard_dirty_segmap(struct f2fs_sb_info *sbi,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	mutex_lock(&dirty_i->seglist_lock);
-	f2fs_kvfree(dirty_i->dirty_segmap[dirty_type]);
-	dirty_i->nr_dirty[dirty_type] = 0;
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-static void destroy_victim_secmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	f2fs_kvfree(dirty_i->victim_secmap);
-}
-
-static void destroy_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	int i;
-
-	if (!dirty_i)
-		return;
-
-	/* discard pre-free/dirty segments list */
-	for (i = 0; i < NR_DIRTY_TYPE; i++)
-		discard_dirty_segmap(sbi, i);
-
-	destroy_victim_secmap(sbi);
-	SM_I(sbi)->dirty_info = NULL;
-	kfree(dirty_i);
-}
-
-static void destroy_curseg(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *array = SM_I(sbi)->curseg_array;
-	int i;
-
-	if (!array)
-		return;
-	SM_I(sbi)->curseg_array = NULL;
-	for (i = 0; i < NR_CURSEG_TYPE; i++) {
-		kfree(array[i].sum_blk);
-		kfree(array[i].journal);
-	}
-	kfree(array);
-}
-
-static void destroy_free_segmap(struct f2fs_sb_info *sbi)
-{
-	struct free_segmap_info *free_i = SM_I(sbi)->free_info;
-	if (!free_i)
-		return;
-	SM_I(sbi)->free_info = NULL;
-	f2fs_kvfree(free_i->free_segmap);
-	f2fs_kvfree(free_i->free_secmap);
-	kfree(free_i);
-}
-
-static void destroy_sit_info(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int start;
-
-	if (!sit_i)
-		return;
-
-	if (sit_i->sentries) {
-		for (start = 0; start < MAIN_SEGS(sbi); start++) {
-			kfree(sit_i->sentries[start].cur_valid_map);
-#ifdef CONFIG_F2FS_CHECK_FS
-			kfree(sit_i->sentries[start].cur_valid_map_mir);
-#endif
-			kfree(sit_i->sentries[start].ckpt_valid_map);
-			kfree(sit_i->sentries[start].discard_map);
-		}
-	}
-	kfree(sit_i->tmp_map);
-
-	f2fs_kvfree(sit_i->sentries);
-	f2fs_kvfree(sit_i->sec_entries);
-	f2fs_kvfree(sit_i->dirty_sentries_bitmap);
-
-	SM_I(sbi)->sit_info = NULL;
-	kfree(sit_i->sit_bitmap);
-#ifdef CONFIG_F2FS_CHECK_FS
-	kfree(sit_i->sit_bitmap_mir);
-#endif
-	kfree(sit_i);
-}
-
-void destroy_segment_manager(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_sm_info *sm_info = SM_I(sbi);
-
-	if (!sm_info)
-		return;
-	destroy_flush_cmd_control(sbi, true);
-	destroy_discard_cmd_control(sbi);
-	destroy_dirty_segmap(sbi);
-	destroy_curseg(sbi);
-	destroy_free_segmap(sbi);
-	destroy_sit_info(sbi);
-	sbi->sm_info = NULL;
-	kfree(sm_info);
-}
-
-int __init create_segment_manager_caches(void)
-{
-	discard_entry_slab = f2fs_kmem_cache_create("discard_entry",
-			sizeof(struct discard_entry));
-	if (!discard_entry_slab)
-		goto fail;
-
-	discard_cmd_slab = f2fs_kmem_cache_create("discard_cmd",
-			sizeof(struct discard_cmd));
-	if (!discard_cmd_slab)
-		goto destroy_discard_entry;
-
-	sit_entry_set_slab = f2fs_kmem_cache_create("sit_entry_set",
-			sizeof(struct sit_entry_set));
-	if (!sit_entry_set_slab)
-		goto destroy_discard_cmd;
-
-	inmem_entry_slab = f2fs_kmem_cache_create("inmem_page_entry",
-			sizeof(struct inmem_pages));
-	if (!inmem_entry_slab)
-		goto destroy_sit_entry_set;
-	return 0;
-
-destroy_sit_entry_set:
-	kmem_cache_destroy(sit_entry_set_slab);
-destroy_discard_cmd:
-	kmem_cache_destroy(discard_cmd_slab);
-destroy_discard_entry:
-	kmem_cache_destroy(discard_entry_slab);
-fail:
-	return -ENOMEM;
-}
-
-void destroy_segment_manager_caches(void)
-{
-	kmem_cache_destroy(sit_entry_set_slab);
-	kmem_cache_destroy(discard_cmd_slab);
-	kmem_cache_destroy(discard_entry_slab);
-	kmem_cache_destroy(inmem_entry_slab);
-}
-- 
2.17.1

