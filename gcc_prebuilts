From c0cd980ce6b4cfccda76b06bcf71254130b6d818 Mon Sep 17 00:00:00 2001
From: Samuel Pascua <pascua.samuel.14@gmail.com>
Date: Wed, 21 Aug 2019 15:02:37 +0800
Subject: [PATCH] asd

---
 drivers/usb/gadget/android.c         | 4013 -----------------
 drivers/usb/gadget/android.o_shipped |  Bin 0 -> 620000 bytes
 fs/f2fs/segment.c                    | 2754 ------------
 fs/f2fs/segment.o_shipped            |  Bin 0 -> 47532 bytes
 sound/soc/codecs/wcd9320.c           | 7813 ----------------------------------
 sound/soc/codecs/wcd9320.o_shipped   |  Bin 0 -> 161420 bytes
 6 files changed, 14580 deletions(-)
 delete mode 100644 drivers/usb/gadget/android.c
 create mode 100644 drivers/usb/gadget/android.o_shipped
 delete mode 100644 fs/f2fs/segment.c
 create mode 100644 fs/f2fs/segment.o_shipped
 delete mode 100644 sound/soc/codecs/wcd9320.c
 create mode 100644 sound/soc/codecs/wcd9320.o_shipped

diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
deleted file mode 100644
index 18be64363abb..000000000000
--- a/drivers/usb/gadget/android.c
+++ /dev/null
@@ -1,4013 +0,0 @@
-/*
- * Gadget Driver for Android
- *
- * Copyright (C) 2008 Google, Inc.
- * Author: Mike Lockwood <lockwood@android.com>
- *         Benoit Goby <benoit@android.com>
- *
- * This software is licensed under the terms of the GNU General Public
- * License version 2, as published by the Free Software Foundation, and
- * may be copied, distributed, and modified under those terms.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/fs.h>
-#include <linux/delay.h>
-#include <linux/kernel.h>
-#include <linux/utsname.h>
-#include <linux/platform_device.h>
-#include <linux/pm_qos.h>
-#include <linux/of.h>
-
-#include <linux/usb/ch9.h>
-#include <linux/usb/composite.h>
-#include <linux/usb/gadget.h>
-#include <linux/usb/android.h>
-
-#include <mach/diag_dload.h>
-
-#include "gadget_chips.h"
-
-/*
- * Kbuild is not very cooperative with respect to linking separately
- * compiled library objects into one module.  So for now we won't use
- * separate compilation ... ensuring init/exit sections work to shrink
- * the runtime footprint, and giving us at least some parts of what
- * a "gcc --combine ... part1.c part2.c part3.c ... " build would.
- */
-#include "usbstring.c"
-#include "config.c"
-#include "epautoconf.c"
-#include "composite.c"
-
-#include "f_diag.c"
-#include "f_qdss.c"
-#include "f_rmnet_smd.c"
-#include "f_rmnet_sdio.c"
-#include "f_rmnet_smd_sdio.c"
-#include "f_rmnet.c"
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "f_gps.c"
-#endif
-#ifdef CONFIG_SND_PCM
-#include "f_audio_source.c"
-#endif
-#include "f_fs.c"
-#include "f_mass_storage.c"
-#include "u_serial.c"
-#include "u_sdio.c"
-#include "u_smd.c"
-#include "u_bam.c"
-#include "u_rmnet_ctrl_smd.c"
-#include "u_rmnet_ctrl_qti.c"
-#include "u_ctrl_hsic.c"
-#include "u_data_hsic.c"
-#include "u_ctrl_hsuart.c"
-#include "u_data_hsuart.c"
-#ifdef CONFIG_USB_DUN_SUPPORT
-#include "serial_acm.c"
-#endif
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "f_serial.c"
-#endif
-#include "f_acm.c"
-#include "f_adb.c"
-#include "f_ccid.c"
-#ifdef CONFIG_SND_RAWMIDI
-#include "f_midi.c"
-#endif
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_MTP
-#include "f_mtp_samsung.c"
-#else
-#include "f_mtp.c"
-#endif
-#include "f_accessory.c"
-#define USB_ETH_RNDIS y
-#include "f_rndis.c"
-#include "rndis.c"
-#include "f_qc_ecm.c"
-#include "f_mbim.c"
-#include "u_bam_data.c"
-#include "f_ecm.c"
-#include "f_qc_rndis.c"
-#include "u_ether.c"
-#include "u_qc_ether.c"
-#ifdef CONFIG_TARGET_CORE
-#include "f_tcm.c"
-#endif
-#ifdef CONFIG_SND_PCM
-#include "u_uac1.c"
-#include "f_uac1.c"
-#endif
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "f_ncm.c"
-#endif
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-#include <linux/power_supply.h>
-#endif
-
-MODULE_AUTHOR("Mike Lockwood");
-MODULE_DESCRIPTION("Android Composite USB Driver");
-MODULE_LICENSE("GPL");
-MODULE_VERSION("1.0");
-
-static const char longname[] = "Gadget Android";
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-static int composite_string_index;
-#endif
-/* Default vendor and product IDs, overridden by userspace */
-#define VENDOR_ID		0x18D1
-#define PRODUCT_ID		0x0001
-
-#define ANDROID_DEVICE_NODE_NAME_LENGTH 11
-
-/* f_midi configuration */
-#ifdef CONFIG_SND_RAWMIDI
-#define SNDRV_DEFAULT_IDX1	(-1)
-#define SNDRV_DEFAULT_STR1	NULL
-#define MIDI_INPUT_PORTS    1
-#define MIDI_OUTPUT_PORTS   1
-#define MIDI_BUFFER_SIZE    1024
-#define MIDI_QUEUE_LENGTH   32
-#endif
-
-struct android_usb_function {
-	char *name;
-	void *config;
-
-	struct device *dev;
-	char *dev_name;
-	struct device_attribute **attributes;
-
-	struct android_dev *android_dev;
-
-	/* Optional: initialization during gadget bind */
-	int (*init)(struct android_usb_function *, struct usb_composite_dev *);
-	/* Optional: cleanup during gadget unbind */
-	void (*cleanup)(struct android_usb_function *);
-	/* Optional: called when the function is added the list of
-	 *		enabled functions */
-	void (*enable)(struct android_usb_function *);
-	/* Optional: called when it is removed */
-	void (*disable)(struct android_usb_function *);
-
-	int (*bind_config)(struct android_usb_function *,
-			   struct usb_configuration *);
-
-	/* Optional: called when the configuration is removed */
-	void (*unbind_config)(struct android_usb_function *,
-			      struct usb_configuration *);
-	/* Optional: handle ctrl requests before the device is configured */
-	int (*ctrlrequest)(struct android_usb_function *,
-					struct usb_composite_dev *,
-					const struct usb_ctrlrequest *);
-};
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-u8    usb30en;
-extern int sec_set_speedlimit(struct usb_gadget *gadget,
-			enum usb_device_speed speed);
-extern int sec_get_ss_host_available(struct usb_gadget *gadget);
-#endif
-
-struct android_usb_function_holder {
-
-	struct android_usb_function *f;
-
-	/* for android_conf.enabled_functions */
-	struct list_head enabled_list;
-};
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_SIDESYNC
-#include "f_conn_gadget.c"
-#endif
-
-/**
-* struct android_dev - represents android USB gadget device
-* @name: device name.
-* @functions: an array of all the supported USB function
-*    drivers that this gadget support but not necessarily
-*    added to one of the gadget configurations.
-* @cdev: The internal composite device. Android gadget device
-*    is a composite device, such that it can support configurations
-*    with more than one function driver.
-* @dev: The kernel device that represents this android device.
-* @enabled: True if the android gadget is enabled, means all
-*    the configurations were set and all function drivers were
-*    bind and ready for USB enumeration.
-* @disable_depth: Number of times the device was disabled, after
-*    symmetrical number of enables the device willl be enabled.
-*    Used for controlling ADB userspace disable/enable requests.
-* @mutex: Internal mutex for protecting device member fields.
-* @pdata: Platform data fetched from the kernel device platfrom data.
-* @connected: True if got connect notification from the gadget UDC.
-*    False if got disconnect notification from the gadget UDC.
-* @sw_connected: Equal to 'connected' only after the connect
-*    notification was handled by the android gadget work function.
-* @suspended: True if got suspend notification from the gadget UDC.
-*    False if got resume notification from the gadget UDC.
-* @sw_suspended: Equal to 'suspended' only after the susped
-*    notification was handled by the android gadget work function.
-* @pm_qos: An attribute string that can be set by user space in order to
-*    determine pm_qos policy. Set to 'high' for always demand pm_qos
-*    when USB bus is connected and resumed. Set to 'low' for disable
-*    any setting of pm_qos by this driver. Default = 'high'.
-* @work: workqueue used for handling notifications from the gadget UDC.
-* @configs: List of configurations currently configured into the device.
-*    The android gadget supports more than one configuration. The host
-*    may choose one configuration from the suggested.
-* @configs_num: Number of configurations currently configured and existing
-*    in the configs list.
-* @list_item: This driver supports more than one android gadget device (for
-*    example in order to support multiple USB cores), therefore this is
-*    a item in a linked list of android devices.
-*/
-struct android_dev {
-	const char *name;
-	struct android_usb_function **functions;
-	struct usb_composite_dev *cdev;
-	struct device *dev;
-
-	bool enabled;
-	int disable_depth;
-	struct mutex mutex;
-	struct android_usb_platform_data *pdata;
-
-	bool connected;
-	bool sw_connected;
-	bool suspended;
-	bool sw_suspended;
-	char pm_qos[5];
-	struct pm_qos_request pm_qos_req_dma;
-	struct work_struct work;
-	char ffs_aliases[256];
-#if defined(CONFIG_SEC_H_PROJECT)
-	struct delayed_work usb_connection_work;
-	int speaker_check_count;
-#endif
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-	int usb_lock;
-#endif
-	/* A list of struct android_configuration */
-	struct list_head configs;
-	int configs_num;
-
-	/* A list node inside the android_dev_list */
-	struct list_head list_item;
-};
-
-struct android_configuration {
-	struct usb_configuration usb_config;
-
-	/* A list of the functions supported by this config */
-	struct list_head enabled_functions;
-
-	/* A list node inside the struct android_dev.configs list */
-	struct list_head list_item;
-};
-
-struct dload_struct __iomem *diag_dload;
-static struct class *android_class;
-static struct list_head android_dev_list;
-static int android_dev_count;
-static int android_bind_config(struct usb_configuration *c);
-static void android_unbind_config(struct usb_configuration *c);
-static struct android_dev *cdev_to_android_dev(struct usb_composite_dev *cdev);
-static struct android_configuration *alloc_android_config
-						(struct android_dev *dev);
-static void free_android_config(struct android_dev *dev,
-				struct android_configuration *conf);
-static int usb_diag_update_pid_and_serial_num(uint32_t pid, const char *snum);
-
-/* string IDs are assigned dynamically */
-#define STRING_MANUFACTURER_IDX		0
-#define STRING_PRODUCT_IDX		1
-#define STRING_SERIAL_IDX		2
-
-static char manufacturer_string[256];
-static char product_string[256];
-static char serial_string[256];
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#include "u_ncm.c"
-#endif
-
-/* String Table */
-static struct usb_string strings_dev[] = {
-	[STRING_MANUFACTURER_IDX].s = manufacturer_string,
-	[STRING_PRODUCT_IDX].s = product_string,
-	[STRING_SERIAL_IDX].s = serial_string,
-	{  }			/* end of list */
-};
-
-static struct usb_gadget_strings stringtab_dev = {
-	.language	= 0x0409,	/* en-us */
-	.strings	= strings_dev,
-};
-
-static struct usb_gadget_strings *dev_strings[] = {
-	&stringtab_dev,
-	NULL,
-};
-
-static struct usb_device_descriptor device_desc = {
-	.bLength              = sizeof(device_desc),
-	.bDescriptorType      = USB_DT_DEVICE,
-	.bcdUSB               = __constant_cpu_to_le16(0x0200),
-	.bDeviceClass         = USB_CLASS_PER_INTERFACE,
-	.idVendor             = __constant_cpu_to_le16(VENDOR_ID),
-	.idProduct            = __constant_cpu_to_le16(PRODUCT_ID),
-	.bcdDevice            = __constant_cpu_to_le16(0xffff),
-	.bNumConfigurations   = 1,
-};
-
-static struct usb_otg_descriptor otg_descriptor = {
-	.bLength =		sizeof otg_descriptor,
-	.bDescriptorType =	USB_DT_OTG,
-	.bmAttributes =		USB_OTG_SRP | USB_OTG_HNP,
-	.bcdOTG               = __constant_cpu_to_le16(0x0200),
-};
-
-static const struct usb_descriptor_header *otg_desc[] = {
-	(struct usb_descriptor_header *) &otg_descriptor,
-	NULL,
-};
-
-enum android_device_state {
-	USB_DISCONNECTED,
-	USB_CONNECTED,
-	USB_CONFIGURED,
-	USB_SUSPENDED,
-	USB_RESUMED
-};
-
-static void android_pm_qos_update_latency(struct android_dev *dev, int vote)
-{
-	struct android_usb_platform_data *pdata = dev->pdata;
-	u32 swfi_latency = 0;
-	static int last_vote = -1;
-
-	if (!pdata || vote == last_vote
-		|| !pdata->swfi_latency)
-		return;
-
-	swfi_latency = pdata->swfi_latency + 1;
-	if (vote)
-		pm_qos_update_request(&dev->pm_qos_req_dma,
-				swfi_latency);
-	else
-		pm_qos_update_request(&dev->pm_qos_req_dma,
-				PM_QOS_DEFAULT_VALUE);
-	last_vote = vote;
-}
-
-static void android_work(struct work_struct *data)
-{
-	struct android_dev *dev = container_of(data, struct android_dev, work);
-	struct usb_composite_dev *cdev = dev->cdev;
-	char *disconnected[2] = { "USB_STATE=DISCONNECTED", NULL };
-	char *connected[2]    = { "USB_STATE=CONNECTED", NULL };
-	char *configured[2]   = { "USB_STATE=CONFIGURED", NULL };
-	char *suspended[2]   = { "USB_STATE=SUSPENDED", NULL };
-	char *resumed[2]   = { "USB_STATE=RESUMED", NULL };
-#if defined(CONFIG_SEC_H_PROJECT)
-	char *cableconnect[2] = { "USB_CONNECTION=CONNECTED", NULL };
-#endif
-	char **uevent_envp = NULL;
-	static enum android_device_state last_uevent, next_state;
-	unsigned long flags;
-	int pm_qos_vote = -1;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (dev->suspended != dev->sw_suspended && cdev->config) {
-		if (strncmp(dev->pm_qos, "low", 3))
-			pm_qos_vote = dev->suspended ? 0 : 1;
-		next_state = dev->suspended ? USB_SUSPENDED : USB_RESUMED;
-		uevent_envp = dev->suspended ? suspended : resumed;
-	} else if (cdev->config) {
-		uevent_envp = configured;
-		next_state = USB_CONFIGURED;
-	} else if (dev->connected != dev->sw_connected) {
-		uevent_envp = dev->connected ? connected : disconnected;
-		next_state = dev->connected ? USB_CONNECTED : USB_DISCONNECTED;
-		if (dev->connected && strncmp(dev->pm_qos, "low", 3))
-			pm_qos_vote = 1;
-		else if (!dev->connected || !strncmp(dev->pm_qos, "low", 3))
-			pm_qos_vote = 0;
-	}
-	dev->sw_connected = dev->connected;
-	dev->sw_suspended = dev->suspended;
-	spin_unlock_irqrestore(&cdev->lock, flags);
-
-	if (pm_qos_vote != -1)
-		android_pm_qos_update_latency(dev, pm_qos_vote);
-
-	if (uevent_envp) {
-		/*
-		 * Some userspace modules, e.g. MTP, work correctly only if
-		 * CONFIGURED uevent is preceded by DISCONNECT uevent.
-		 * Check if we missed sending out a DISCONNECT uevent. This can
-		 * happen if host PC resets and configures device really quick.
-		 */
-		if (((uevent_envp == connected) &&
-		      (last_uevent != USB_DISCONNECTED)) ||
-		    ((uevent_envp == configured) &&
-		      (last_uevent == USB_CONFIGURED))) {
-			pr_info("%s: sent missed DISCONNECT event\n", __func__);
-			kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE,
-								disconnected);
-//			msleep(20);
-		}
-		/*
-		 * Before sending out CONFIGURED uevent give function drivers
-		 * a chance to wakeup userspace threads and notify disconnect
-		 */
-//		if (uevent_envp == configured)
-//			msleep(50);
-
-		/* Do not notify on suspend / resume */
-		if (next_state != USB_SUSPENDED && next_state != USB_RESUMED) {
-			kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE,
-					   uevent_envp);
-#if defined(CONFIG_SEC_H_PROJECT)
-		if (uevent_envp == connected)
-			kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE, cableconnect);
-#endif
-			last_uevent = next_state;
-		}
-		pr_info("%s: sent uevent %s\n", __func__, uevent_envp[0]);
-	} else {
-		pr_info("%s: did not send uevent (%d %d %pK)\n", __func__,
-			 dev->connected, dev->sw_connected, cdev->config);
-	}
-}
-
-#if defined(CONFIG_SEC_H_PROJECT)
-extern int speaker_status;
-
-void usb_gadget_connect_work(struct work_struct *work)
-{
-	struct android_dev *dev =
-	    container_of(work, struct android_dev, usb_connection_work.work);
-	struct usb_composite_dev *cdev = dev->cdev;
-
-	pr_info("%s: speaker_status: %d, speaker_check_count %d\n",
-		__func__, speaker_status, dev->speaker_check_count);
-
-	/* Max 3 sec */
-	if (speaker_status > 0) {
-		dev->speaker_check_count++;
-		if (dev->speaker_check_count < 60) {
-			schedule_delayed_work(&dev->usb_connection_work, msecs_to_jiffies(50));
-			return;
-		}
-	}
-	usb_gadget_connect(cdev->gadget);
-}
-
-void schedule_usb_gadget_connect_work(struct android_dev *dev)
-{
-	char *ready[2] = { "USB_CONNECTION=READY", NULL };
-
-	if (dev == NULL) return;
-
-	pr_info("%s\n",__func__);
-
-	if (work_busy(&dev->usb_connection_work.work)) {
-		cancel_delayed_work(&dev->usb_connection_work);
-		pr_info("%s  canceling the work\n",__func__);
-	}
-
-	kobject_uevent_env(&dev->dev->kobj, KOBJ_CHANGE, ready);
-	dev->speaker_check_count = 0;
-	schedule_delayed_work(&dev->usb_connection_work, msecs_to_jiffies(1));
-}
-#endif
-
-static int android_enable(struct android_dev *dev)
-{
-	struct usb_composite_dev *cdev = dev->cdev;
-	struct android_configuration *conf;
-	int err = 0;
-
-	if (WARN_ON(!dev->disable_depth))
-		return err;
-
-	if (--dev->disable_depth == 0) {
-
-		list_for_each_entry(conf, &dev->configs, list_item) {
-			err = usb_add_config(cdev, &conf->usb_config,
-						android_bind_config);
-			if (err < 0) {
-				pr_err("%s: usb_add_config failed : err: %d\n",
-						__func__, err);
-				return err;
-			}
-		}
-#if defined(CONFIG_SEC_H_PROJECT)
-		schedule_usb_gadget_connect_work(dev);
-#else
-		usb_gadget_connect(cdev->gadget);
-#endif
-	}
-
-	return err;
-}
-
-static void android_disable(struct android_dev *dev)
-{
-	struct usb_composite_dev *cdev = dev->cdev;
-	struct android_configuration *conf;
-
-	if (dev->disable_depth++ == 0) {
-		usb_gadget_disconnect(cdev->gadget);
-		/* Cancel pending control requests */
-		usb_ep_dequeue(cdev->gadget->ep0, cdev->req);
-
-		list_for_each_entry(conf, &dev->configs, list_item)
-			usb_remove_config(cdev, &conf->usb_config);
-	}
-}
-
-/*-------------------------------------------------------------------------*/
-/* Supported functions initialization */
-
-struct functionfs_config {
-	bool opened;
-	bool enabled;
-	struct ffs_data *data;
-	struct android_dev *dev;
-};
-
-static int ffs_function_init(struct android_usb_function *f,
-			     struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct functionfs_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return functionfs_init();
-}
-
-static void ffs_function_cleanup(struct android_usb_function *f)
-{
-	functionfs_cleanup();
-	kfree(f->config);
-}
-
-static void ffs_function_enable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct functionfs_config *config = f->config;
-
-	config->enabled = true;
-
-	/* Disable the gadget until the function is ready */
-	if (!config->opened)
-		android_disable(dev);
-}
-
-static void ffs_function_disable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct functionfs_config *config = f->config;
-
-	config->enabled = false;
-
-	/* Balance the disable that was called in closed_callback */
-	if (!config->opened)
-		android_enable(dev);
-}
-
-static int ffs_function_bind_config(struct android_usb_function *f,
-				    struct usb_configuration *c)
-{
-	struct functionfs_config *config = f->config;
-	return functionfs_bind_config(c->cdev, c, config->data);
-}
-
-static ssize_t
-ffs_aliases_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev;
-	int ret;
-
-	dev = list_first_entry(&android_dev_list, struct android_dev,
-					list_item);
-
-	mutex_lock(&dev->mutex);
-	ret = sprintf(buf, "%s\n", dev->ffs_aliases);
-	mutex_unlock(&dev->mutex);
-
-	return ret;
-}
-
-static ssize_t
-ffs_aliases_store(struct device *pdev, struct device_attribute *attr,
-					const char *buf, size_t size)
-{
-	struct android_dev *dev;
-	char buff[256];
-
-	dev = list_first_entry(&android_dev_list, struct android_dev,
-					list_item);
-
-	mutex_lock(&dev->mutex);
-
-	if (dev->enabled) {
-		mutex_unlock(&dev->mutex);
-		return -EBUSY;
-	}
-
-	strlcpy(buff, buf, sizeof(buff));
-	strlcpy(dev->ffs_aliases, strim(buff), sizeof(dev->ffs_aliases));
-
-	mutex_unlock(&dev->mutex);
-
-	return size;
-}
-
-static DEVICE_ATTR(aliases, S_IRUGO | S_IWUSR, ffs_aliases_show,
-					       ffs_aliases_store);
-static struct device_attribute *ffs_function_attributes[] = {
-	&dev_attr_aliases,
-	NULL
-};
-
-static struct android_usb_function ffs_function = {
-	.name		= "ffs",
-	.init		= ffs_function_init,
-	.enable		= ffs_function_enable,
-	.disable	= ffs_function_disable,
-	.cleanup	= ffs_function_cleanup,
-	.bind_config	= ffs_function_bind_config,
-	.attributes	= ffs_function_attributes,
-};
-
-static int functionfs_ready_callback(struct ffs_data *ffs)
-{
-	struct android_dev *dev = ffs_function.android_dev;
-	struct functionfs_config *config = ffs_function.config;
-	int ret = 0;
-
-	/* dev is null in case ADB is not in the composition */
-	if (dev) {
-		mutex_lock(&dev->mutex);
-		ret = functionfs_bind(ffs, dev->cdev);
-		if (ret) {
-			mutex_unlock(&dev->mutex);
-			return ret;
-		}
-	} else {
-		/* android ffs_func requires daemon to start only after enable*/
-		pr_debug("start adbd only in ADB composition\n");
-		return -ENODEV;
-	}
-
-	config->data = ffs;
-	config->opened = true;
-	/* Save dev in case the adb function will get disabled */
-	config->dev = dev;
-
-	if (config->enabled)
-		android_enable(dev);
-
-	mutex_unlock(&dev->mutex);
-
-	return 0;
-
-}
-
-static void functionfs_closed_callback(struct ffs_data *ffs)
-{
-	struct android_dev *dev = ffs_function.android_dev;
-	struct functionfs_config *config = ffs_function.config;
-
-	/*
-	 * In case new composition is without ADB or ADB got disabled by the
-	 * time ffs_daemon was stopped then use saved one
-	 */
-	if (!dev)
-		dev = config->dev;
-
-	/* fatal-error: It should never happen */
-	if (!dev)
-		pr_err("adb_closed_callback: config->dev is NULL");
-
-	if (dev)
-		mutex_lock(&dev->mutex);
-
-	if (config->enabled && dev)
-		android_disable(dev);
-
-	config->dev = NULL;
-
-	config->opened = false;
-	config->data = NULL;
-
-	functionfs_unbind(ffs);
-
-	if (dev)
-		mutex_unlock(&dev->mutex);
-}
-
-static int functionfs_check_dev_callback(const char *dev_name)
-{
-	return 0;
-}
-
-
-struct adb_data {
-	bool opened;
-	bool enabled;
-	struct android_dev *dev;
-};
-
-static int
-adb_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct adb_data), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return adb_setup();
-}
-
-static void adb_function_cleanup(struct android_usb_function *f)
-{
-	adb_cleanup();
-	kfree(f->config);
-}
-
-static int
-adb_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	return adb_bind_config(c);
-}
-
-static void adb_android_function_enable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct adb_data *data = f->config;
-
-	data->enabled = true;
-
-
-	/* Disable the gadget until adbd is ready */
-	if (!data->opened)
-		android_disable(dev);
-}
-
-static void adb_android_function_disable(struct android_usb_function *f)
-{
-	struct android_dev *dev = f->android_dev;
-	struct adb_data *data = f->config;
-
-	data->enabled = false;
-
-	/* Balance the disable that was called in closed_callback */
-	if (!data->opened)
-		android_enable(dev);
-}
-
-static struct android_usb_function adb_function = {
-	.name		= "adb",
-	.enable		= adb_android_function_enable,
-	.disable	= adb_android_function_disable,
-	.init		= adb_function_init,
-	.cleanup	= adb_function_cleanup,
-	.bind_config	= adb_function_bind_config,
-};
-
-static void adb_ready_callback(void)
-{
-	struct android_dev *dev = adb_function.android_dev;
-	struct adb_data *data = adb_function.config;
-
-	/* dev is null in case ADB is not in the composition */
-	if (dev)
-		mutex_lock(&dev->mutex);
-
-	/* Save dev in case the adb function will get disabled */
-	data->dev = dev;
-	data->opened = true;
-
-	if (data->enabled && dev)
-		android_enable(dev);
-
-	if (dev)
-		mutex_unlock(&dev->mutex);
-}
-
-static void adb_closed_callback(void)
-{
-	struct adb_data *data = adb_function.config;
-	struct android_dev *dev = adb_function.android_dev;
-
-	/* In case new composition is without ADB, use saved one */
-	if (!dev)
-		dev = data->dev;
-
-	if (!dev)
-		pr_err("adb_closed_callback: data->dev is NULL");
-
-	if (dev)
-		mutex_lock(&dev->mutex);
-
-	data->opened = false;
-
-	if (data->enabled && dev)
-		android_disable(dev);
-
-	data->dev = NULL;
-
-	if (dev)
-		mutex_unlock(&dev->mutex);
-}
-
-#ifdef CONFIG_SND_RAWMIDI
-static int midi_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	struct midi_alsa_config *config;
-	config = kzalloc(sizeof(struct midi_alsa_config), GFP_KERNEL);
-	f->config = config;
-	if (!config)
-		return -ENOMEM;
-	config->card = -1;
-	config->device = -1;
-	return 0;
-}
-
-static void midi_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-}
-
-static int midi_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct midi_alsa_config *config = f->config;
-
-	return  f_midi_bind_config(c, SNDRV_DEFAULT_IDX1, SNDRV_DEFAULT_STR1,
-			MIDI_INPUT_PORTS, MIDI_OUTPUT_PORTS, MIDI_BUFFER_SIZE,
-			MIDI_QUEUE_LENGTH, config);
-}
-
-static ssize_t midi_alsa_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct midi_alsa_config *config = f->config;
-
-	/* print ALSA card and device numbers */
-	return sprintf(buf, "%d %d\n", config->card, config->device);
-}
-
-static DEVICE_ATTR(alsa, S_IRUGO, midi_alsa_show, NULL);
-
-static struct device_attribute *midi_function_attributes[] = {
-	&dev_attr_alsa,
-	NULL
-};
-
-static struct android_usb_function midi_function = {
-	.name		= "midi",
-	.init		= midi_function_init,
-	.cleanup	= midi_function_cleanup,
-	.bind_config	= midi_function_bind_config,
-	.attributes	= midi_function_attributes,
-};
-#endif
-/*-------------------------------------------------------------------------*/
-/* Supported functions initialization */
-
-/* ACM */
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-#define MAX_ACM_INSTANCES 4
-struct acm_function_config {
-	int instances;
-};
-
-static int acm_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	int ret;
-
-	f->config = kzalloc(sizeof(struct acm_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	ret = gserial_setup(cdev->gadget, MAX_ACM_INSTANCES);
-
-	return ret;
-}
-
-static void acm_function_cleanup(struct android_usb_function *f)
-{
-	gserial_cleanup();
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int acm_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	int i;
-	int ret = 0;
-	struct acm_function_config *config = f->config;
-
-	for (i = 0; i < config->instances; i++) {
-		ret = acm_bind_config(c, i);
-		if (ret) {
-			pr_err("Could not bind acm%u config\n", i);
-			break;
-		}
-	}
-	return ret;
-}
-
-static ssize_t acm_instances_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct acm_function_config *config = f->config;
-	return sprintf(buf, "%d\n", config->instances);
-}
-
-static ssize_t acm_instances_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct acm_function_config *config = f->config;
-	int value;
-
-	sscanf(buf, "%d", &value);
-	if (value > MAX_ACM_INSTANCES)
-		value = MAX_ACM_INSTANCES;
-	config->instances = value;
-	return size;
-}
-
-static DEVICE_ATTR(instances, S_IRUGO | S_IWUSR,
-		acm_instances_show, acm_instances_store);
-static struct device_attribute *acm_function_attributes[]
-		= { &dev_attr_instances, NULL };
-
-static struct android_usb_function acm_function = {
-	.name		= "acm",
-	.init		= acm_function_init,
-	.cleanup	= acm_function_cleanup,
-	.bind_config	= acm_function_bind_config,
-	.attributes	= acm_function_attributes,
-};
-#else
-static char acm_transports[32];	/*enabled ACM ports - "tty[,sdio]"*/
-static ssize_t acm_transports_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(acm_transports, buff, sizeof(acm_transports));
-
-	return size;
-}
-
-static DEVICE_ATTR(acm_transports, S_IWUSR, NULL, acm_transports_store);
-static struct device_attribute *acm_function_attributes[] = {
-		&dev_attr_acm_transports,
-		NULL
-};
-
-static void acm_function_cleanup(struct android_usb_function *f)
-{
-	gserial_cleanup();
-}
-
-static int
-acm_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	char *name;
-	char buf[32], *b;
-	int err = -1, i;
-	static int acm_initialized, ports;
-
-	if (acm_initialized)
-		goto bind_config;
-
-	acm_initialized = 1;
-	strlcpy(buf, acm_transports, sizeof(buf));
-	b = strim(buf);
-
-	while (b) {
-		name = strsep(&b, ",");
-
-		if (name) {
-			err = acm_init_port(ports, name);
-			if (err) {
-				pr_err("acm: Cannot open port '%s'", name);
-				goto out;
-			}
-			ports++;
-		}
-	}
-	err = acm_port_setup(c);
-	if (err) {
-		pr_err("acm: Cannot setup transports");
-		goto out;
-	}
-
-bind_config:
-	for (i = 0; i < ports; i++) {
-		err = acm_bind_config(c, i);
-		if (err) {
-			pr_err("acm: bind_config failed for port %d", i);
-			goto out;
-		}
-	}
-
-out:
-	return err;
-}
-
-static struct android_usb_function acm_function = {
-	.name		= "acm",
-	.cleanup	= acm_function_cleanup,
-	.bind_config	= acm_function_bind_config,
-	.attributes	= acm_function_attributes,
-};
-#endif
-
-/* RMNET_SMD */
-static int rmnet_smd_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return rmnet_smd_bind_config(c);
-}
-
-static struct android_usb_function rmnet_smd_function = {
-	.name		= "rmnet_smd",
-	.bind_config	= rmnet_smd_function_bind_config,
-};
-
-/* RMNET_SDIO */
-static int rmnet_sdio_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return rmnet_sdio_function_add(c);
-}
-
-static struct android_usb_function rmnet_sdio_function = {
-	.name		= "rmnet_sdio",
-	.bind_config	= rmnet_sdio_function_bind_config,
-};
-
-/* RMNET_SMD_SDIO */
-static int rmnet_smd_sdio_function_init(struct android_usb_function *f,
-				 struct usb_composite_dev *cdev)
-{
-	return rmnet_smd_sdio_init();
-}
-
-static void rmnet_smd_sdio_function_cleanup(struct android_usb_function *f)
-{
-	rmnet_smd_sdio_cleanup();
-}
-
-static int rmnet_smd_sdio_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return rmnet_smd_sdio_function_add(c);
-}
-
-static struct device_attribute *rmnet_smd_sdio_attributes[] = {
-					&dev_attr_transport, NULL };
-
-static struct android_usb_function rmnet_smd_sdio_function = {
-	.name		= "rmnet_smd_sdio",
-	.init		= rmnet_smd_sdio_function_init,
-	.cleanup	= rmnet_smd_sdio_function_cleanup,
-	.bind_config	= rmnet_smd_sdio_bind_config,
-	.attributes	= rmnet_smd_sdio_attributes,
-};
-
-/*rmnet transport string format(per port):"ctrl0,data0,ctrl1,data1..." */
-#define MAX_XPORT_STR_LEN 50
-static char rmnet_transports[MAX_XPORT_STR_LEN];
-
-/*rmnet transport name string - "rmnet_hsic[,rmnet_hsusb]" */
-static char rmnet_xport_names[MAX_XPORT_STR_LEN];
-
-static void rmnet_function_cleanup(struct android_usb_function *f)
-{
-	frmnet_cleanup();
-}
-
-static int rmnet_function_bind_config(struct android_usb_function *f,
-					 struct usb_configuration *c)
-{
-	int i;
-	int err = 0;
-	char *ctrl_name;
-	char *data_name;
-	char *tname = NULL;
-	char buf[MAX_XPORT_STR_LEN], *b;
-	char xport_name_buf[MAX_XPORT_STR_LEN], *tb;
-	static int rmnet_initialized, ports;
-
-	if (!rmnet_initialized) {
-		rmnet_initialized = 1;
-		strlcpy(buf, rmnet_transports, sizeof(buf));
-		b = strim(buf);
-
-		strlcpy(xport_name_buf, rmnet_xport_names,
-				sizeof(xport_name_buf));
-		tb = strim(xport_name_buf);
-
-		while (b) {
-			ctrl_name = strsep(&b, ",");
-			data_name = strsep(&b, ",");
-			if (ctrl_name && data_name) {
-				if (tb)
-					tname = strsep(&tb, ",");
-				err = frmnet_init_port(ctrl_name, data_name,
-						tname);
-				if (err) {
-					pr_err("rmnet: Cannot open ctrl port:"
-						"'%s' data port:'%s'\n",
-						ctrl_name, data_name);
-					goto out;
-				}
-				ports++;
-			}
-		}
-
-		err = rmnet_gport_setup();
-		if (err) {
-			pr_err("rmnet: Cannot setup transports");
-			goto out;
-		}
-	}
-
-	for (i = 0; i < ports; i++) {
-		err = frmnet_bind_config(c, i);
-		if (err) {
-			pr_err("Could not bind rmnet%u config\n", i);
-			break;
-		}
-	}
-out:
-	return err;
-}
-
-static ssize_t rmnet_transports_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", rmnet_transports);
-}
-
-static ssize_t rmnet_transports_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(rmnet_transports, buff, sizeof(rmnet_transports));
-
-	return size;
-}
-
-static ssize_t rmnet_xport_names_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", rmnet_xport_names);
-}
-
-static ssize_t rmnet_xport_names_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(rmnet_xport_names, buff, sizeof(rmnet_xport_names));
-
-	return size;
-}
-
-static struct device_attribute dev_attr_rmnet_transports =
-					__ATTR(transports, S_IRUGO | S_IWUSR,
-						rmnet_transports_show,
-						rmnet_transports_store);
-
-static struct device_attribute dev_attr_rmnet_xport_names =
-				__ATTR(transport_names, S_IRUGO | S_IWUSR,
-				rmnet_xport_names_show,
-				rmnet_xport_names_store);
-
-static struct device_attribute *rmnet_function_attributes[] = {
-					&dev_attr_rmnet_transports,
-					&dev_attr_rmnet_xport_names,
-					NULL };
-
-static struct android_usb_function rmnet_function = {
-	.name		= "rmnet",
-	.cleanup	= rmnet_function_cleanup,
-	.bind_config	= rmnet_function_bind_config,
-	.attributes	= rmnet_function_attributes,
-};
-
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-static void gps_function_cleanup(struct android_usb_function *f)
-{
-	gps_cleanup();
-}
-
-static int gps_function_bind_config(struct android_usb_function *f,
-					 struct usb_configuration *c)
-{
-	int err;
-	static int gps_initialized;
-
-	if (!gps_initialized) {
-		gps_initialized = 1;
-		err = gps_init_port();
-		if (err) {
-			pr_err("gps: Cannot init gps port");
-			return err;
-		}
-	}
-
-	err = gps_gport_setup();
-	if (err) {
-		pr_err("gps: Cannot setup transports");
-		return err;
-	}
-	err = gps_bind_config(c);
-	if (err) {
-		pr_err("Could not bind gps config\n");
-		return err;
-	}
-
-	return 0;
-}
-
-static struct android_usb_function gps_function = {
-	.name		= "gps",
-	.cleanup	= gps_function_cleanup,
-	.bind_config	= gps_function_bind_config,
-};
-#endif
-
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-/* ncm */
-struct ncm_function_config {
-	u8      ethaddr[ETH_ALEN];
-};
-static int
-ncm_function_init(struct android_usb_function *f, struct usb_composite_dev *c)
-{
-	f->config = kzalloc(sizeof(struct ncm_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return 0;
-}
-
-static void ncm_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int
-ncm_function_bind_config(struct android_usb_function *f,
-				struct usb_configuration *c)
-{
-	struct ncm_function_config *ncm = f->config;
-	int ret;
-
-	if (!ncm) {
-		pr_err("%s: ncm config is null\n", __func__);
-		return -EINVAL;
-	}
-
-	pr_info("%s MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__,
-		ncm->ethaddr[0], ncm->ethaddr[1], ncm->ethaddr[2],
-		ncm->ethaddr[3], ncm->ethaddr[4], ncm->ethaddr[5]);
-
-	ret = gether_setup_name(c->cdev->gadget, ncm->ethaddr, "ncm");
-	if (ret) {
-		pr_err("%s: gether setup failed err:%d\n", __func__, ret);
-		return ret;
-	}
-
-	ret = ncm_bind_config(c, ncm->ethaddr);
-	if (ret) {
-		pr_err("%s: ncm bind config failed err:%d", __func__, ret);
-		gether_cleanup();
-		return ret;
-	}
-
-	return ret;
-}
-
-static void ncm_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_cleanup();
-}
-
-static ssize_t ncm_ethaddr_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ncm_function_config *ncm = f->config;
-	return snprintf(buf, PAGE_SIZE, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		ncm->ethaddr[0], ncm->ethaddr[1], ncm->ethaddr[2],
-		ncm->ethaddr[3], ncm->ethaddr[4], ncm->ethaddr[5]);
-}
-
-static ssize_t ncm_ethaddr_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ncm_function_config *ncm = f->config;
-
-	if (sscanf(buf, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		    (int *)&ncm->ethaddr[0], (int *)&ncm->ethaddr[1],
-		    (int *)&ncm->ethaddr[2], (int *)&ncm->ethaddr[3],
-		    (int *)&ncm->ethaddr[4], (int *)&ncm->ethaddr[5]) == 6)
-		return size;
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(ncm_ethaddr, S_IRUGO | S_IWUSR, ncm_ethaddr_show,
-					       ncm_ethaddr_store);
-static struct device_attribute *ncm_function_attributes[] = {
-	&dev_attr_ncm_ethaddr,
-	NULL
-};
-
-static struct android_usb_function ncm_function = {
-	.name		= "ncm",
-	.init		= ncm_function_init,
-	.cleanup	= ncm_function_cleanup,
-	.bind_config	= ncm_function_bind_config,
-	.unbind_config	= ncm_function_unbind_config,
-	.attributes	= ncm_function_attributes,
-};
-#endif
-/* ecm transport string */
-static char ecm_transports[MAX_XPORT_STR_LEN];
-
-struct ecm_function_config {
-	u8      ethaddr[ETH_ALEN];
-};
-
-static int ecm_function_init(struct android_usb_function *f,
-				struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct ecm_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-	return 0;
-}
-
-static void ecm_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int ecm_qc_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int ret;
-	char *trans;
-	struct ecm_function_config *ecm = f->config;
-
-	if (!ecm) {
-		pr_err("%s: ecm_pdata\n", __func__);
-		return -EINVAL;
-	}
-
-	pr_debug("%s: ecm_transport is %s", __func__, ecm_transports);
-
-	trans = strim(ecm_transports);
-	if (strcmp("BAM2BAM_IPA", trans)) {
-		ret = gether_qc_setup_name(c->cdev->gadget,
-						ecm->ethaddr, "ecm");
-		if (ret) {
-			pr_err("%s: gether_setup failed\n", __func__);
-			return ret;
-		}
-	}
-
-	return ecm_qc_bind_config(c, ecm->ethaddr, trans);
-}
-
-static void ecm_qc_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	char *trans = strim(ecm_transports);
-
-	if (strcmp("BAM2BAM_IPA", trans))
-		gether_qc_cleanup_name("ecm0");
-}
-
-static ssize_t ecm_ethaddr_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ecm_function_config *ecm = f->config;
-	return snprintf(buf, PAGE_SIZE, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		ecm->ethaddr[0], ecm->ethaddr[1], ecm->ethaddr[2],
-		ecm->ethaddr[3], ecm->ethaddr[4], ecm->ethaddr[5]);
-}
-
-static ssize_t ecm_ethaddr_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct ecm_function_config *ecm = f->config;
-
-	if (sscanf(buf, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		    (int *)&ecm->ethaddr[0], (int *)&ecm->ethaddr[1],
-		    (int *)&ecm->ethaddr[2], (int *)&ecm->ethaddr[3],
-		    (int *)&ecm->ethaddr[4], (int *)&ecm->ethaddr[5]) == 6)
-		return size;
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(ecm_ethaddr, S_IRUGO | S_IWUSR, ecm_ethaddr_show,
-					       ecm_ethaddr_store);
-
-static ssize_t ecm_transports_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", ecm_transports);
-}
-
-static ssize_t ecm_transports_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	strlcpy(ecm_transports, buf, sizeof(ecm_transports));
-	return size;
-}
-
-static DEVICE_ATTR(ecm_transports, S_IRUGO | S_IWUSR, ecm_transports_show,
-					       ecm_transports_store);
-
-static struct device_attribute *ecm_function_attributes[] = {
-	&dev_attr_ecm_transports,
-	&dev_attr_ecm_ethaddr,
-	NULL
-};
-
-static struct android_usb_function ecm_qc_function = {
-	.name		= "ecm_qc",
-	.init		= ecm_function_init,
-	.cleanup	= ecm_function_cleanup,
-	.bind_config	= ecm_qc_function_bind_config,
-	.unbind_config	= ecm_qc_function_unbind_config,
-	.attributes	= ecm_function_attributes,
-};
-
-/* MBIM - used with BAM */
-#define MAX_MBIM_INSTANCES 1
-
-static int mbim_function_init(struct android_usb_function *f,
-					 struct usb_composite_dev *cdev)
-{
-	return mbim_init(MAX_MBIM_INSTANCES);
-}
-
-static void mbim_function_cleanup(struct android_usb_function *f)
-{
-	fmbim_cleanup();
-}
-
-
-/* mbim transport string */
-static char mbim_transports[MAX_XPORT_STR_LEN];
-
-static int mbim_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	char *trans;
-
-	pr_debug("%s: mbim transport is %s", __func__, mbim_transports);
-	trans = strim(mbim_transports);
-	return mbim_bind_config(c, 0, trans);
-}
-
-static int mbim_function_ctrlrequest(struct android_usb_function *f,
-					struct usb_composite_dev *cdev,
-					const struct usb_ctrlrequest *c)
-{
-	return mbim_ctrlrequest(cdev, c);
-}
-
-static ssize_t mbim_transports_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", mbim_transports);
-}
-
-static ssize_t mbim_transports_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	strlcpy(mbim_transports, buf, sizeof(mbim_transports));
-	return size;
-}
-
-static DEVICE_ATTR(mbim_transports, S_IRUGO | S_IWUSR, mbim_transports_show,
-				   mbim_transports_store);
-
-static struct device_attribute *mbim_function_attributes[] = {
-	&dev_attr_mbim_transports,
-	NULL
-};
-
-static struct android_usb_function mbim_function = {
-	.name		= "usb_mbim",
-	.cleanup	= mbim_function_cleanup,
-	.bind_config	= mbim_function_bind_config,
-	.init		= mbim_function_init,
-	.ctrlrequest	= mbim_function_ctrlrequest,
-	.attributes		= mbim_function_attributes,
-};
-
-#ifdef CONFIG_SND_PCM
-/* PERIPHERAL AUDIO */
-static int audio_function_bind_config(struct android_usb_function *f,
-					  struct usb_configuration *c)
-{
-	return audio_bind_config(c);
-}
-
-static struct android_usb_function audio_function = {
-	.name		= "audio",
-	.bind_config	= audio_function_bind_config,
-};
-#endif
-
-
-/* DIAG */
-static char diag_clients[32];	    /*enabled DIAG clients- "diag[,diag_mdm]" */
-static ssize_t clients_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(diag_clients, buff, sizeof(diag_clients));
-
-	return size;
-}
-
-static DEVICE_ATTR(clients, S_IWUSR, NULL, clients_store);
-static struct device_attribute *diag_function_attributes[] =
-					 { &dev_attr_clients, NULL };
-
-static int diag_function_init(struct android_usb_function *f,
-				 struct usb_composite_dev *cdev)
-{
-	return diag_setup();
-}
-
-static void diag_function_cleanup(struct android_usb_function *f)
-{
-	diag_cleanup();
-}
-
-static int diag_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	char *name;
-	char buf[32], *b;
-	int once = 0, err = -1;
-	int (*notify)(uint32_t, const char *);
-	struct android_dev *dev = cdev_to_android_dev(c->cdev);
-
-	strlcpy(buf, diag_clients, sizeof(buf));
-	b = strim(buf);
-
-	while (b) {
-		notify = NULL;
-		name = strsep(&b, ",");
-		/* Allow only first diag channel to update pid and serial no */
-		if (!once++) {
-			if (dev->pdata && dev->pdata->update_pid_and_serial_num)
-				notify = dev->pdata->update_pid_and_serial_num;
-			else
-				notify = usb_diag_update_pid_and_serial_num;
-		}
-
-		if (name) {
-			err = diag_function_add(c, name, notify);
-			if (err)
-				pr_err("diag: Cannot open channel '%s'", name);
-		}
-	}
-
-	return err;
-}
-
-static struct android_usb_function diag_function = {
-	.name		= "diag",
-	.init		= diag_function_init,
-	.cleanup	= diag_function_cleanup,
-	.bind_config	= diag_function_bind_config,
-	.attributes	= diag_function_attributes,
-};
-
-/* DEBUG */
-static int qdss_function_init(struct android_usb_function *f,
-	struct usb_composite_dev *cdev)
-{
-	return qdss_setup();
-}
-
-static void qdss_function_cleanup(struct android_usb_function *f)
-{
-	qdss_cleanup();
-}
-
-static int qdss_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int  err = -1;
-
-	err = qdss_bind_config(c, "qdss");
-	if (err)
-		pr_err("qdss: Cannot open channel qdss");
-
-	return err;
-}
-
-static struct android_usb_function qdss_function = {
-	.name		= "qdss",
-	.init		= qdss_function_init,
-	.cleanup	= qdss_function_cleanup,
-	.bind_config	= qdss_function_bind_config,
-};
-
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-/* SERIAL */
-static char serial_transports[32];	/*enabled FSERIAL ports - "tty[,sdio]"*/
-static ssize_t serial_transports_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(serial_transports, buff, sizeof(serial_transports));
-
-	return size;
-}
-
-/*enabled FSERIAL transport names - "serial_hsic[,serial_hsusb]"*/
-static char serial_xport_names[32];
-static ssize_t serial_xport_names_store(
-		struct device *device, struct device_attribute *attr,
-		const char *buff, size_t size)
-{
-	strlcpy(serial_xport_names, buff, sizeof(serial_xport_names));
-
-	return size;
-}
-
-static ssize_t serial_xport_names_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	return snprintf(buf, PAGE_SIZE, "%s\n", serial_xport_names);
-}
-
-static DEVICE_ATTR(transports, S_IWUSR, NULL, serial_transports_store);
-static struct device_attribute dev_attr_serial_xport_names =
-				__ATTR(transport_names, S_IRUGO | S_IWUSR,
-				serial_xport_names_show,
-				serial_xport_names_store);
-
-static struct device_attribute *serial_function_attributes[] = {
-					&dev_attr_transports,
-					&dev_attr_serial_xport_names,
-					NULL };
-
-static void serial_function_cleanup(struct android_usb_function *f)
-{
-	gserial_cleanup();
-}
-
-static int serial_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	char *name, *xport_name = NULL;
-	char buf[32], *b, xport_name_buf[32], *tb;
-	int err = -1, i;
-	static int serial_initialized = 0, ports = 0;
-
-	if (serial_initialized)
-		goto bind_config;
-
-	serial_initialized = 1;
-	strlcpy(buf, serial_transports, sizeof(buf));
-	b = strim(buf);
-
-	strlcpy(xport_name_buf, serial_xport_names, sizeof(xport_name_buf));
-	tb = strim(xport_name_buf);
-
-	while (b) {
-		name = strsep(&b, ",");
-
-		if (name) {
-			if (tb)
-				xport_name = strsep(&tb, ",");
-			err = gserial_init_port(ports, name, xport_name);
-			if (err) {
-				pr_err("serial: Cannot open port '%s'", name);
-				goto out;
-			}
-			ports++;
-		}
-	}
-	err = gport_setup(c);
-	if (err) {
-		pr_err("serial: Cannot setup transports");
-		goto out;
-	}
-
-bind_config:
-	for (i = 0; i < ports; i++) {
-		err = gser_bind_config(c, i);
-		if (err) {
-			pr_err("serial: bind_config failed for port %d", i);
-			goto out;
-		}
-	}
-
-out:
-	return err;
-}
-
-static struct android_usb_function serial_function = {
-	.name		= "serial",
-	.cleanup	= serial_function_cleanup,
-	.bind_config	= serial_function_bind_config,
-	.attributes	= serial_function_attributes,
-};
-#endif
-
-/* CCID */
-static int ccid_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	return ccid_setup();
-}
-
-static void ccid_function_cleanup(struct android_usb_function *f)
-{
-	ccid_cleanup();
-}
-
-static int ccid_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	return ccid_bind_config(c);
-}
-
-static struct android_usb_function ccid_function = {
-	.name		= "ccid",
-	.init		= ccid_function_init,
-	.cleanup	= ccid_function_cleanup,
-	.bind_config	= ccid_function_bind_config,
-};
-
-static int
-mtp_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	return mtp_setup();
-}
-
-static void mtp_function_cleanup(struct android_usb_function *f)
-{
-	mtp_cleanup();
-}
-
-static int
-mtp_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	return mtp_bind_config(c, false);
-}
-
-static int
-ptp_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	/* nothing to do - initialization is handled by mtp_function_init */
-	return 0;
-}
-
-static void ptp_function_cleanup(struct android_usb_function *f)
-{
-	/* nothing to do - cleanup is handled by mtp_function_cleanup */
-}
-
-static int
-ptp_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	return mtp_bind_config(c, true);
-}
-
-static int mtp_function_ctrlrequest(struct android_usb_function *f,
-					struct usb_composite_dev *cdev,
-					const struct usb_ctrlrequest *c)
-{
-	return mtp_ctrlrequest(cdev, c);
-}
-
-static struct android_usb_function mtp_function = {
-	.name		= "mtp",
-	.init		= mtp_function_init,
-	.cleanup	= mtp_function_cleanup,
-	.bind_config	= mtp_function_bind_config,
-	.ctrlrequest	= mtp_function_ctrlrequest,
-};
-
-/* PTP function is same as MTP with slightly different interface descriptor */
-static struct android_usb_function ptp_function = {
-	.name		= "ptp",
-	.init		= ptp_function_init,
-	.cleanup	= ptp_function_cleanup,
-	.bind_config	= ptp_function_bind_config,
-	.ctrlrequest 	= mtp_function_ctrlrequest,
-};
-
-
-struct rndis_function_config {
-	u8      ethaddr[ETH_ALEN];
-	u32     vendorID;
-	u8      max_pkt_per_xfer;
-	char	manufacturer[256];
-	/* "Wireless" RNDIS; auto-detected by Windows */
-	bool	wceis;
-};
-
-static int
-rndis_function_init(struct android_usb_function *f,
-		struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct rndis_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-	return 0;
-}
-
-static void rndis_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int rndis_qc_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	f->config = kzalloc(sizeof(struct rndis_function_config), GFP_KERNEL);
-	if (!f->config)
-		return -ENOMEM;
-
-	return rndis_qc_init();
-}
-
-static void rndis_qc_function_cleanup(struct android_usb_function *f)
-{
-	rndis_qc_cleanup();
-	kfree(f->config);
-}
-
-static int
-rndis_function_bind_config(struct android_usb_function *f,
-		struct usb_configuration *c)
-{
-	int ret;
-	struct rndis_function_config *rndis = f->config;
-
-	if (!rndis) {
-		pr_err("%s: rndis_pdata\n", __func__);
-		return -1;
-	}
-
-	pr_info("%s MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__,
-		rndis->ethaddr[0], rndis->ethaddr[1], rndis->ethaddr[2],
-		rndis->ethaddr[3], rndis->ethaddr[4], rndis->ethaddr[5]);
-
-	ret = gether_setup_name(c->cdev->gadget, rndis->ethaddr, "rndis");
-	if (ret) {
-		pr_err("%s: gether_setup failed\n", __func__);
-		return ret;
-	}
-
-	if (rndis->wceis) {
-		/* "Wireless" RNDIS; auto-detected by Windows */
-		rndis_iad_descriptor.bFunctionClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_iad_descriptor.bFunctionSubClass = 0x01;
-		rndis_iad_descriptor.bFunctionProtocol = 0x03;
-		rndis_control_intf.bInterfaceClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_control_intf.bInterfaceSubClass =	 0x01;
-		rndis_control_intf.bInterfaceProtocol =	 0x03;
-	}
-
-	return rndis_bind_config_vendor(c, rndis->ethaddr, rndis->vendorID,
-					   rndis->manufacturer);
-}
-
-static int rndis_qc_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int ret;
-	struct rndis_function_config *rndis = f->config;
-
-	if (!rndis) {
-		pr_err("%s: rndis_pdata\n", __func__);
-		return -EINVAL;
-	}
-
-	pr_info("%s MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__,
-		rndis->ethaddr[0], rndis->ethaddr[1], rndis->ethaddr[2],
-		rndis->ethaddr[3], rndis->ethaddr[4], rndis->ethaddr[5]);
-
-	ret = gether_qc_setup_name(c->cdev->gadget, rndis->ethaddr, "rndis");
-	if (ret) {
-		pr_err("%s: gether_setup failed\n", __func__);
-		return ret;
-	}
-
-	if (rndis->wceis) {
-		/* "Wireless" RNDIS; auto-detected by Windows */
-		rndis_qc_iad_descriptor.bFunctionClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_qc_iad_descriptor.bFunctionSubClass = 0x01;
-		rndis_qc_iad_descriptor.bFunctionProtocol = 0x03;
-		rndis_qc_control_intf.bInterfaceClass =
-						USB_CLASS_WIRELESS_CONTROLLER;
-		rndis_qc_control_intf.bInterfaceSubClass =	 0x01;
-		rndis_qc_control_intf.bInterfaceProtocol =	 0x03;
-	}
-
-	return rndis_qc_bind_config_vendor(c, rndis->ethaddr, rndis->vendorID,
-				    rndis->manufacturer,
-					rndis->max_pkt_per_xfer);
-}
-
-static void rndis_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_cleanup();
-}
-
-static void rndis_qc_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_qc_cleanup_name("rndis0");
-}
-
-static ssize_t rndis_manufacturer_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%s\n", config->manufacturer);
-}
-
-static ssize_t rndis_manufacturer_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	if (size >= sizeof(config->manufacturer))
-		return -EINVAL;
-
-	if (sscanf(buf, "%255s", config->manufacturer) == 1)
-		return size;
-	return -1;
-}
-
-static DEVICE_ATTR(manufacturer, S_IRUGO | S_IWUSR, rndis_manufacturer_show,
-						    rndis_manufacturer_store);
-
-static ssize_t rndis_wceis_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%d\n", config->wceis);
-}
-
-static ssize_t rndis_wceis_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	int value;
-
-	if (sscanf(buf, "%d", &value) == 1) {
-		config->wceis = value;
-		return size;
-	}
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(wceis, S_IRUGO | S_IWUSR, rndis_wceis_show,
-					     rndis_wceis_store);
-
-static ssize_t rndis_ethaddr_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *rndis = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		rndis->ethaddr[0], rndis->ethaddr[1], rndis->ethaddr[2],
-		rndis->ethaddr[3], rndis->ethaddr[4], rndis->ethaddr[5]);
-}
-
-static ssize_t rndis_ethaddr_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *rndis = f->config;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	int i;
-	char *src;
-	for (i = 0; i < ETH_ALEN; i++)
-			rndis->ethaddr[i] = 0;
-	/* create a fake MAC address from our serial number.
-	 * first byte is 0x02 to signify locally administered.
-	 */
-	rndis->ethaddr[0] = 0x02;
-	src = serial_string;
-	for (i = 0; (i < 256) && *src; i++) {
-		/* XOR the USB serial across the remaining bytes */
-		rndis->ethaddr[i % (ETH_ALEN - 1) + 1] ^= *src++;
-	}
-	return size;
-#else
-	if (sscanf(buf, "%02x:%02x:%02x:%02x:%02x:%02x\n",
-		    (int *)&rndis->ethaddr[0], (int *)&rndis->ethaddr[1],
-		    (int *)&rndis->ethaddr[2], (int *)&rndis->ethaddr[3],
-		    (int *)&rndis->ethaddr[4], (int *)&rndis->ethaddr[5]) == 6)
-		return size;
-	return -EINVAL;
-#endif
-}
-
-static DEVICE_ATTR(ethaddr, S_IRUGO | S_IWUSR, rndis_ethaddr_show,
-					       rndis_ethaddr_store);
-
-static ssize_t rndis_vendorID_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-
-	return snprintf(buf, PAGE_SIZE, "%04x\n", config->vendorID);
-}
-
-static ssize_t rndis_vendorID_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	int value;
-
-	if (sscanf(buf, "%04x", &value) == 1) {
-		config->vendorID = value;
-		return size;
-	}
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(vendorID, S_IRUGO | S_IWUSR, rndis_vendorID_show,
-						rndis_vendorID_store);
-
-static ssize_t rndis_max_pkt_per_xfer_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	return snprintf(buf, PAGE_SIZE, "%d\n", config->max_pkt_per_xfer);
-}
-
-static ssize_t rndis_max_pkt_per_xfer_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct rndis_function_config *config = f->config;
-	int value;
-
-	if (sscanf(buf, "%d", &value) == 1) {
-		config->max_pkt_per_xfer = value;
-		return size;
-	}
-	return -EINVAL;
-}
-
-static DEVICE_ATTR(max_pkt_per_xfer, S_IRUGO | S_IWUSR,
-				   rndis_max_pkt_per_xfer_show,
-				   rndis_max_pkt_per_xfer_store);
-
-static struct device_attribute *rndis_function_attributes[] = {
-	&dev_attr_manufacturer,
-	&dev_attr_wceis,
-	&dev_attr_ethaddr,
-	&dev_attr_vendorID,
-	&dev_attr_max_pkt_per_xfer,
-	NULL
-};
-
-static struct android_usb_function rndis_function = {
-	.name		= "rndis",
-	.init		= rndis_function_init,
-	.cleanup	= rndis_function_cleanup,
-	.bind_config	= rndis_function_bind_config,
-	.unbind_config	= rndis_function_unbind_config,
-	.attributes	= rndis_function_attributes,
-};
-
-static struct android_usb_function rndis_qc_function = {
-	.name		= "rndis_qc",
-	.init		= rndis_qc_function_init,
-	.cleanup	= rndis_qc_function_cleanup,
-	.bind_config	= rndis_qc_function_bind_config,
-	.unbind_config	= rndis_qc_function_unbind_config,
-	.attributes	= rndis_function_attributes,
-};
-
-static int ecm_function_bind_config(struct android_usb_function *f,
-					struct usb_configuration *c)
-{
-	int ret;
-	struct ecm_function_config *ecm = f->config;
-
-	if (!ecm) {
-		pr_err("%s: ecm_pdata\n", __func__);
-		return -EINVAL;
-	}
-
-	ret = gether_setup_name(c->cdev->gadget, ecm->ethaddr, "ecm");
-	if (ret) {
-		pr_err("%s: gether_setup failed\n", __func__);
-		return ret;
-	}
-
-	ret = ecm_bind_config(c, ecm->ethaddr);
-	if (ret) {
-		pr_err("%s: ecm_bind_config failed\n", __func__);
-		gether_cleanup();
-	}
-	return ret;
-}
-
-static void ecm_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	gether_cleanup();
-}
-
-static struct android_usb_function ecm_function = {
-	.name		= "ecm",
-	.init		= ecm_function_init,
-	.cleanup	= ecm_function_cleanup,
-	.bind_config	= ecm_function_bind_config,
-	.unbind_config	= ecm_function_unbind_config,
-	.attributes	= ecm_function_attributes,
-};
-
-struct mass_storage_function_config {
-	struct fsg_config fsg;
-	struct fsg_common *common;
-};
-
-static int mass_storage_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-#endif
-	struct mass_storage_function_config *config;
-	struct fsg_common *common;
-	int err;
-	int i;
-	const char *name[3];
-
-	config = kzalloc(sizeof(struct mass_storage_function_config),
-								GFP_KERNEL);
-	if (!config)
-		return -ENOMEM;
-
-	config->fsg.nluns = 1;
-	name[0] = "lun";
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	config->fsg.luns[0].cdrom = 1;
-	config->fsg.luns[0].ro = 0;
-	config->fsg.luns[0].removable = 1;
-#else
-	if (dev->pdata && dev->pdata->cdrom) {
-		config->fsg.luns[config->fsg.nluns].cdrom = 1;
-		config->fsg.luns[config->fsg.nluns].ro = 1;
-		config->fsg.luns[config->fsg.nluns].removable = 0;
-		name[config->fsg.nluns] = "lun0";
-		config->fsg.nluns++;
-	}
-	if (dev->pdata && dev->pdata->internal_ums) {
-		config->fsg.luns[config->fsg.nluns].cdrom = 0;
-		config->fsg.luns[config->fsg.nluns].ro = 0;
-		config->fsg.luns[config->fsg.nluns].removable = 1;
-		name[config->fsg.nluns] = "lun1";
-		config->fsg.nluns++;
-	}
-
-	config->fsg.luns[0].removable = 1;
-#endif
-
-	common = fsg_common_init(NULL, cdev, &config->fsg);
-	if (IS_ERR(common)) {
-		kfree(config);
-		return PTR_ERR(common);
-	}
-
-	for (i = 0; i < config->fsg.nluns; i++) {
-		err = sysfs_create_link(&f->dev->kobj,
-					&common->luns[i].dev.kobj,
-					name[i]);
-		if (err)
-			goto error;
-	}
-
-	config->common = common;
-	f->config = config;
-	return 0;
-error:
-	for (; i > 0 ; i--)
-		sysfs_remove_link(&f->dev->kobj, name[i-1]);
-
-	fsg_common_release(&common->ref);
-	kfree(config);
-	return err;
-}
-
-static void mass_storage_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-	f->config = NULL;
-}
-
-static int mass_storage_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct mass_storage_function_config *config = f->config;
-	return fsg_bind_config(c->cdev, c, config->common);
-}
-
-static ssize_t mass_storage_inquiry_show(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	return snprintf(buf, PAGE_SIZE, "%s\n", config->common->inquiry_string);
-}
-
-static ssize_t mass_storage_inquiry_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	if (size >= sizeof(config->common->inquiry_string))
-		return -EINVAL;
-	if (sscanf(buf, "%28s", config->common->inquiry_string) != 1)
-		return -EINVAL;
-	return size;
-}
-
-static DEVICE_ATTR(inquiry_string, S_IRUGO | S_IWUSR,
-					mass_storage_inquiry_show,
-					mass_storage_inquiry_store);
-
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-static ssize_t mass_storage_vendor_show(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	return sprintf(buf, "%s\n", config->common->vendor_string);
-}
-
-static ssize_t mass_storage_vendor_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-
-	if (size >= sizeof(config->common->vendor_string))
-		return -EINVAL;
-	if (sscanf(buf, "%s", config->common->vendor_string) != 1)
-		return -EINVAL;
-
-	printk(KERN_DEBUG "%s: vendor %s", __func__,
-				config->common->vendor_string);
-	return size;
-}
-
-static DEVICE_ATTR(vendor_string, S_IRUGO | S_IWUSR,
-					mass_storage_vendor_show,
-					mass_storage_vendor_store);
-
-static ssize_t mass_storage_product_show(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	return sprintf(buf, "%s\n", config->common->product_string);
-}
-
-static ssize_t mass_storage_product_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-
-	if (size >= sizeof(config->common->product_string))
-		return -EINVAL;
-	if (sscanf(buf, "%s", config->common->product_string) != 1)
-		return -EINVAL;
-
-	printk(KERN_DEBUG "%s: product %s", __func__,
-				config->common->product_string);
-	return size;
-}
-
-static DEVICE_ATTR(product_string, S_IRUGO | S_IWUSR,
-					mass_storage_product_show,
-					mass_storage_product_store);
-
-static ssize_t sua_version_info_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	int ret;
-
-	ret = sprintf(buf, "%s\r\n",config->common-> version_string);
-	printk(KERN_DEBUG "usb: %s version %s\n", __func__, buf);
-	return ret;
-}
-
-/*
- /sys/class/android_usb/android0/f_mass_storage/sua_version_info
-*/
-static ssize_t sua_version_info_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t size)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct mass_storage_function_config *config = f->config;
-	int len=0;
-
-	if (size < sizeof(config->common-> version_string))
-		memcpy(config->common-> version_string,buf,size);
-	else
-	{
-		len=sizeof(config->common-> version_string);
-		memcpy(config->common-> version_string,buf,len-1);
-	}
-	printk(KERN_DEBUG "usb: %s buf=%s[%d], %s\n", __func__, buf,sizeof(buf),config->common-> version_string);
-	return size;
-}
-
-static DEVICE_ATTR(sua_version_info,  S_IRUGO | S_IWUSR,
-		sua_version_info_show, sua_version_info_store);
-#endif
-
-static struct device_attribute *mass_storage_function_attributes[] = {
-	&dev_attr_inquiry_string,
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	&dev_attr_vendor_string,
-	&dev_attr_product_string,
-	&dev_attr_sua_version_info,
-#endif
-	NULL
-};
-
-static struct android_usb_function mass_storage_function = {
-	.name		= "mass_storage",
-	.init		= mass_storage_function_init,
-	.cleanup	= mass_storage_function_cleanup,
-	.bind_config	= mass_storage_function_bind_config,
-	.attributes	= mass_storage_function_attributes,
-};
-
-
-static int accessory_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	return acc_setup();
-}
-
-static void accessory_function_cleanup(struct android_usb_function *f)
-{
-	acc_cleanup();
-}
-
-static int accessory_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	return acc_bind_config(c);
-}
-
-static int accessory_function_ctrlrequest(struct android_usb_function *f,
-						struct usb_composite_dev *cdev,
-						const struct usb_ctrlrequest *c)
-{
-	return acc_ctrlrequest(cdev, c);
-}
-
-static struct android_usb_function accessory_function = {
-	.name		= "accessory",
-	.init		= accessory_function_init,
-	.cleanup	= accessory_function_cleanup,
-	.bind_config	= accessory_function_bind_config,
-	.ctrlrequest	= accessory_function_ctrlrequest,
-};
-
-#ifdef CONFIG_SND_PCM
-static int audio_source_function_init(struct android_usb_function *f,
-			struct usb_composite_dev *cdev)
-{
-	struct audio_source_config *config;
-
-	config = kzalloc(sizeof(struct audio_source_config), GFP_KERNEL);
-	if (!config)
-		return -ENOMEM;
-	config->card = -1;
-	config->device = -1;
-	f->config = config;
-	return 0;
-}
-
-static void audio_source_function_cleanup(struct android_usb_function *f)
-{
-	kfree(f->config);
-}
-
-static int audio_source_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct audio_source_config *config = f->config;
-
-	return audio_source_bind_config(c, config);
-}
-
-static void audio_source_function_unbind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	struct audio_source_config *config = f->config;
-
-	config->card = -1;
-	config->device = -1;
-}
-
-static ssize_t audio_source_pcm_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_usb_function *f = dev_get_drvdata(dev);
-	struct audio_source_config *config = f->config;
-
-	/* print PCM card and device numbers */
-	return snprintf(buf, PAGE_SIZE,
-			"%d %d\n", config->card, config->device);
-}
-
-static DEVICE_ATTR(pcm, S_IRUGO | S_IWUSR, audio_source_pcm_show, NULL);
-
-static struct device_attribute *audio_source_function_attributes[] = {
-	&dev_attr_pcm,
-	NULL
-};
-
-static struct android_usb_function audio_source_function = {
-	.name		= "audio_source",
-	.init		= audio_source_function_init,
-	.cleanup	= audio_source_function_cleanup,
-	.bind_config	= audio_source_function_bind_config,
-	.unbind_config	= audio_source_function_unbind_config,
-	.attributes	= audio_source_function_attributes,
-};
-#endif
-
-static int android_uasp_connect_cb(bool connect)
-{
-	/*
-	 * TODO
-	 * We may have to disable gadget till UASP configfs nodes
-	 * are configured which includes mapping LUN with the
-	 * backing file. It is a fundamental difference between
-	 * f_mass_storage and f_tcp. That means UASP can not be
-	 * in default composition.
-	 *
-	 * For now, assume that UASP configfs nodes are configured
-	 * before enabling android gadget. Or cable should be
-	 * reconnected after mapping the LUN.
-	 *
-	 * Also consider making UASP to respond to Host requests when
-	 * Lun is not mapped.
-	 */
-	pr_debug("UASP %s\n", connect ? "connect" : "disconnect");
-
-	return 0;
-}
-
-static int uasp_function_init(struct android_usb_function *f,
-					struct usb_composite_dev *cdev)
-{
-	return f_tcm_init(&android_uasp_connect_cb);
-}
-
-static void uasp_function_cleanup(struct android_usb_function *f)
-{
-	f_tcm_exit();
-}
-
-static int uasp_function_bind_config(struct android_usb_function *f,
-						struct usb_configuration *c)
-{
-	return tcm_bind_config(c);
-}
-
-static struct android_usb_function uasp_function = {
-	.name		= "uasp",
-	.init		= uasp_function_init,
-	.cleanup	= uasp_function_cleanup,
-	.bind_config	= uasp_function_bind_config,
-};
-
-static struct android_usb_function *supported_functions[] = {
-	&ffs_function,
-	&mbim_function,
-	&ecm_qc_function,
-#ifdef CONFIG_SND_PCM
-	&audio_function,
-#endif
-	&rmnet_smd_function,
-	&rmnet_sdio_function,
-	&rmnet_smd_sdio_function,
-	&rmnet_function,
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	&gps_function,
-#endif
-	&diag_function,
-	&qdss_function,
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	&serial_function,
-#endif
-	&adb_function,
-#ifdef CONFIG_SND_RAWMIDI
-	&midi_function,
-#endif
-	&ccid_function,
-	&acm_function,
-	&mtp_function,
-	&ptp_function,
-	&rndis_function,
-	&rndis_qc_function,
-	&ecm_function,
-	&ncm_function,
-	&mass_storage_function,
-	&accessory_function,
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_SIDESYNC
-	&conn_gadget_function,
-#endif
-#ifdef CONFIG_SND_PCM
-	&audio_source_function,
-#endif
-	&uasp_function,
-	NULL
-};
-
-static void android_cleanup_functions(struct android_usb_function **functions)
-{
-	struct android_usb_function *f;
-	struct device_attribute **attrs;
-	struct device_attribute *attr;
-
-	while (*functions) {
-		f = *functions++;
-
-		if (f->dev) {
-			device_destroy(android_class, f->dev->devt);
-			kfree(f->dev_name);
-		} else
-			continue;
-
-		if (f->cleanup)
-			f->cleanup(f);
-
-		attrs = f->attributes;
-		if (attrs) {
-			while ((attr = *attrs++))
-				device_remove_file(f->dev, attr);
-		}
-	}
-}
-
-static int android_init_functions(struct android_usb_function **functions,
-				  struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	struct android_usb_function *f;
-	struct device_attribute **attrs;
-	struct device_attribute *attr;
-	int err = 0;
-	int index = 1; /* index 0 is for android0 device */
-
-	for (; (f = *functions++); index++) {
-		f->dev_name = kasprintf(GFP_KERNEL, "f_%s", f->name);
-		f->android_dev = NULL;
-		if (!f->dev_name) {
-			err = -ENOMEM;
-			goto err_out;
-		}
-		f->dev = device_create(android_class, dev->dev,
-				MKDEV(0, index), f, f->dev_name);
-		if (IS_ERR(f->dev)) {
-			pr_err("%s: Failed to create dev %s", __func__,
-							f->dev_name);
-			err = PTR_ERR(f->dev);
-			f->dev = NULL;
-			goto err_create;
-		}
-
-		if (f->init) {
-			err = f->init(f, cdev);
-			if (err) {
-				pr_err("%s: Failed to init %s", __func__,
-								f->name);
-				goto err_init;
-			}
-		}
-
-		attrs = f->attributes;
-		if (attrs) {
-			while ((attr = *attrs++) && !err)
-				err = device_create_file(f->dev, attr);
-		}
-		if (err) {
-			pr_err("%s: Failed to create function %s attributes",
-					__func__, f->name);
-			goto err_attrs;
-		}
-	}
-	return 0;
-
-err_attrs:
-	for (attr = *(attrs -= 2); attrs != f->attributes; attr = *(attrs--))
-		device_remove_file(f->dev, attr);
-	if (f->cleanup)
-		f->cleanup(f);
-err_init:
-	device_destroy(android_class, f->dev->devt);
-err_create:
-	f->dev = NULL;
-	kfree(f->dev_name);
-err_out:
-	android_cleanup_functions(dev->functions);
-	return err;
-}
-
-static int
-android_bind_enabled_functions(struct android_dev *dev,
-			       struct usb_configuration *c)
-{
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration *conf =
-		container_of(c, struct android_configuration, usb_config);
-	int ret;
-
-	list_for_each_entry(f_holder, &conf->enabled_functions, enabled_list) {
-		ret = f_holder->f->bind_config(f_holder->f, c);
-		if (ret) {
-			pr_err("%s: %s failed\n", __func__, f_holder->f->name);
-			while (!list_empty(&c->functions)) {
-				struct usb_function		*f;
-
-				f = list_first_entry(&c->functions,
-					struct usb_function, list);
-				list_del(&f->list);
-				if (f->unbind)
-					f->unbind(c, f);
-			}
-			if (c->unbind)
-				c->unbind(c);
-			return ret;
-		}
-	}
-	return 0;
-}
-
-static void
-android_unbind_enabled_functions(struct android_dev *dev,
-			       struct usb_configuration *c)
-{
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration *conf =
-		container_of(c, struct android_configuration, usb_config);
-
-	list_for_each_entry(f_holder, &conf->enabled_functions, enabled_list) {
-		if (f_holder->f->unbind_config)
-			f_holder->f->unbind_config(f_holder->f, c);
-	}
-}
-
-static inline void check_streaming_func(struct usb_gadget *gadget,
-		struct android_usb_platform_data *pdata,
-		char *name)
-{
-	int i;
-
-	for (i = 0; i < pdata->streaming_func_count; i++) {
-		if (!strcmp(name,
-			pdata->streaming_func[i])) {
-			pr_debug("set streaming_enabled to true\n");
-			gadget->streaming_enabled = true;
-			break;
-		}
-	}
-}
-
-static int android_enable_function(struct android_dev *dev,
-				   struct android_configuration *conf,
-				   char *name)
-{
-	struct android_usb_function **functions = dev->functions;
-	struct android_usb_function *f;
-	struct android_usb_function_holder *f_holder;
-	struct android_usb_platform_data *pdata = dev->pdata;
-	struct usb_gadget *gadget = dev->cdev->gadget;
-
-	while ((f = *functions++)) {
-		if (!strcmp(name, f->name)) {
-			if (f->android_dev && f->android_dev != dev)
-				pr_err("%s is enabled in other device\n",
-					f->name);
-			else {
-				f_holder = kzalloc(sizeof(*f_holder),
-						GFP_KERNEL);
-				if (!f_holder) {
-					pr_err("Failed to alloc f_holder\n");
-					return -ENOMEM;
-				}
-
-				f->android_dev = dev;
-				f_holder->f = f;
-				list_add_tail(&f_holder->enabled_list,
-					      &conf->enabled_functions);
-				pr_debug("func:%s is enabled.\n", f->name);
-				/*
-				 * compare enable function with streaming func
-				 * list and based on the same request streaming.
-				 */
-				check_streaming_func(gadget, pdata, f->name);
-
-				return 0;
-			}
-		}
-	}
-	return -EINVAL;
-}
-
-/*-------------------------------------------------------------------------*/
-/* /sys/class/android_usb/android%d/ interface */
-
-static ssize_t remote_wakeup_show(struct device *pdev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct android_configuration *conf;
-
-	/*
-	 * Show the wakeup attribute of the first configuration,
-	 * since all configurations have the same wakeup attribute
-	 */
-	if (dev->configs_num == 0)
-		return 0;
-	conf = list_entry(dev->configs.next,
-			  struct android_configuration,
-			  list_item);
-
-	return snprintf(buf, PAGE_SIZE, "%d\n",
-			!!(conf->usb_config.bmAttributes &
-				USB_CONFIG_ATT_WAKEUP));
-}
-
-static ssize_t remote_wakeup_store(struct device *pdev,
-		struct device_attribute *attr, const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct android_configuration *conf;
-	int enable = 0;
-
-	sscanf(buff, "%d", &enable);
-
-	pr_debug("android_usb: %s remote wakeup\n",
-			enable ? "enabling" : "disabling");
-
-	list_for_each_entry(conf, &dev->configs, list_item)
-		if (enable)
-			conf->usb_config.bmAttributes |=
-					USB_CONFIG_ATT_WAKEUP;
-		else
-			conf->usb_config.bmAttributes &=
-					~USB_CONFIG_ATT_WAKEUP;
-
-	return size;
-}
-
-static ssize_t
-functions_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct android_configuration *conf;
-	struct android_usb_function_holder *f_holder;
-	char *buff = buf;
-
-	mutex_lock(&dev->mutex);
-
-	list_for_each_entry(conf, &dev->configs, list_item) {
-		if (buff != buf)
-			*(buff-1) = ':';
-		list_for_each_entry(f_holder, &conf->enabled_functions,
-					enabled_list)
-			buff += snprintf(buff, PAGE_SIZE, "%s,",
-					f_holder->f->name);
-	}
-
-	mutex_unlock(&dev->mutex);
-
-	if (buff != buf)
-		*(buff-1) = '\n';
-	return buff - buf;
-}
-
-static ssize_t
-functions_store(struct device *pdev, struct device_attribute *attr,
-			       const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct list_head *curr_conf = &dev->configs;
-	struct android_configuration *conf;
-	char *conf_str;
-	struct android_usb_function_holder *f_holder;
-	char *name;
-	char buf[256], *b;
-	char aliases[256], *a;
-	int err;
-	int is_ffs;
-	int ffs_enabled = 0;
-
-	mutex_lock(&dev->mutex);
-
-	if (dev->enabled) {
-		mutex_unlock(&dev->mutex);
-		return -EBUSY;
-	}
-
-	/* Clear previous enabled list */
-	list_for_each_entry(conf, &dev->configs, list_item) {
-		while (conf->enabled_functions.next !=
-				&conf->enabled_functions) {
-			f_holder = list_entry(conf->enabled_functions.next,
-					typeof(*f_holder),
-					enabled_list);
-			f_holder->f->android_dev = NULL;
-			list_del(&f_holder->enabled_list);
-			kfree(f_holder);
-		}
-		INIT_LIST_HEAD(&conf->enabled_functions);
-	}
-
-	strlcpy(buf, buff, sizeof(buf));
-	b = strim(buf);
-
-	while (b) {
-		conf_str = strsep(&b, ":");
-		if (conf_str) {
-			/* If the next not equal to the head, take it */
-			if (curr_conf->next != &dev->configs)
-				conf = list_entry(curr_conf->next,
-						  struct android_configuration,
-						  list_item);
-			else
-				conf = alloc_android_config(dev);
-
-			curr_conf = curr_conf->next;
-		}
-
-		while (conf_str) {
-			name = strsep(&conf_str, ",");
-
-			is_ffs = 0;
-			strlcpy(aliases, dev->ffs_aliases, sizeof(aliases));
-			a = aliases;
-
-
-			while (a) {
-				char *alias = strsep(&a, ",");
-				if (alias && !strcmp(name, alias)) {
-					is_ffs = 1;
-					break;
-				}
-			}
-
-			if (is_ffs) {
-				if (ffs_enabled)
-					continue;
-				err = android_enable_function(dev, conf, "ffs");
-				if (err)
-					pr_err("android_usb: Cannot enable ffs (%d)",
-						err);
-				else
-					ffs_enabled = 1;
-				continue;
-			}
-
-			err = android_enable_function(dev, conf, name);
-			if (err)
-				pr_err("android_usb: Cannot enable '%s' (%d)",
-								   name, err);
-		}
-	}
-
-	/* Free uneeded configurations if exists */
-	while (curr_conf->next != &dev->configs) {
-		conf = list_entry(curr_conf->next,
-				  struct android_configuration, list_item);
-		free_android_config(dev, conf);
-	}
-
-	mutex_unlock(&dev->mutex);
-
-	return size;
-}
-
-static ssize_t enable_show(struct device *pdev, struct device_attribute *attr,
-			   char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	printk(KERN_DEBUG "usb: %s dev->enabled=%d\n", __func__,  dev->enabled);
-	return snprintf(buf, PAGE_SIZE, "%d\n", dev->enabled);
-}
-
-static ssize_t enable_store(struct device *pdev, struct device_attribute *attr,
-			    const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct usb_composite_dev *cdev = dev->cdev;
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration *conf;
-	int enabled = 0;
-	bool audio_enabled = false;
-	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
-	int err = 0;
-
-	if (!cdev)
-		return -ENODEV;
-
-	mutex_lock(&dev->mutex);
-
-	sscanf(buff, "%d", &enabled);
-	printk(KERN_INFO "usb: enabled: %d, dev->enabled: %d\n",
-			enabled, dev->enabled);
-	if (enabled && !dev->enabled) {
-		/*
-		 * Update values in composite driver's copy of
-		 * device descriptor.
-		 */
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-		cdev->next_string_id = composite_string_index;
-		strncpy(manufacturer_string, "SAMSUNG",
-				sizeof(manufacturer_string) - 1);
-		strncpy(product_string, "SAMSUNG_Android",
-				sizeof(product_string) - 1);
-#else
-		cdev->next_string_id = 0;
-#endif
-		cdev->desc.idVendor = device_desc.idVendor;
-		cdev->desc.idProduct = device_desc.idProduct;
-		cdev->desc.bcdDevice = device_desc.bcdDevice;
-		cdev->desc.bDeviceClass = device_desc.bDeviceClass;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-		list_for_each_entry(conf, &dev->configs, list_item)
-			list_for_each_entry(f_holder, &conf->enabled_functions,
-						enabled_list) {
-				printk(KERN_DEBUG "usb: %s f_holder->f:%s\n",
-					__func__, f_holder->f->name);
-				if (!strcmp(f_holder->f->name, "acm")) {
-					printk(KERN_DEBUG "usb: acm is enabled. (bcdDevice=0x400)\n");
-					/* Samsung KIES needs fixed bcdDevice number */
-					cdev->desc.bcdDevice = cpu_to_le16(0x0400);
-				}
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_SIDESYNC
-				if (!strcmp(f_holder->f->name, "conn_gadget")) {
-					if(cdev->desc.bcdDevice == cpu_to_le16(0x0400))	{
-						printk(KERN_DEBUG "usb: conn_gadget + kies (bcdDevice=0xC00)\n");
-						cdev->desc.bcdDevice = cpu_to_le16(0x0C00);
-					} else {
-						printk(KERN_DEBUG "usb: conn_gadget only (bcdDevice=0x800)\n");
-						cdev->desc.bcdDevice = cpu_to_le16(0x0800);
-					}
-				}
-#endif
-			}
-		strncpy(manufacturer_string, "SAMSUNG", sizeof(manufacturer_string) - 1);
-		strncpy(product_string, "SAMSUNG_Android", sizeof(product_string) - 1);
-#endif
-		cdev->desc.bDeviceSubClass = device_desc.bDeviceSubClass;
-		cdev->desc.bDeviceProtocol = device_desc.bDeviceProtocol;
-
-		printk(KERN_DEBUG "usb: %s vendor=%x,product=%x,bcdDevice=%x",
-				__func__, cdev->desc.idVendor,
-				cdev->desc.idProduct, cdev->desc.bcdDevice);
-		printk(KERN_DEBUG ",Class=%x,SubClass=%x,Protocol=%x\n",
-				cdev->desc.bDeviceClass,
-				cdev->desc.bDeviceSubClass,
-				cdev->desc.bDeviceProtocol);
-		printk(KERN_DEBUG "usb: %s next cmd : usb_add_config\n",
-				__func__);
-
-		/* Audio dock accessory is unable to enumerate device if
-		 * pull-up is enabled immediately. The enumeration is
-		 * reliable with 100 msec delay.
-		 */
-		list_for_each_entry(conf, &dev->configs, list_item)
-			list_for_each_entry(f_holder, &conf->enabled_functions,
-						enabled_list) {
-				if (f_holder->f->enable)
-					f_holder->f->enable(f_holder->f);
-				if (!strncmp(f_holder->f->name,
-						"audio_source", 12))
-					audio_enabled = true;
-			}
-#ifndef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-		if (audio_enabled)
-			msleep(100);
-#endif
-		err = android_enable(dev);
-		if (err < 0) {
-			pr_err("%s: android_enable failed\n", __func__);
-			dev->connected = 0;
-			dev->enabled = false;
-			mutex_unlock(&dev->mutex);
-			return size;
-		}
-		dev->enabled = true;
-	} else if (!enabled && dev->enabled) {
-		android_disable(dev);
-		list_for_each_entry(conf, &dev->configs, list_item)
-			list_for_each_entry(f_holder, &conf->enabled_functions,
-						enabled_list) {
-				if (f_holder->f->disable)
-					f_holder->f->disable(f_holder->f);
-			}
-		dev->enabled = false;
-	} else if (!enabled) {
-		usb_gadget_disconnect(cdev->gadget);
-		dev->enabled = false;
-	} else if (__ratelimit(&rl)) {
-		pr_err("android_usb: already %s\n",
-				dev->enabled ? "enabled" : "disabled");
-	}
-
-	mutex_unlock(&dev->mutex);
-
-	return size;
-}
-
-static ssize_t pm_qos_show(struct device *pdev,
-			   struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	return snprintf(buf, PAGE_SIZE, "%s\n", dev->pm_qos);
-}
-
-static ssize_t pm_qos_store(struct device *pdev,
-			   struct device_attribute *attr,
-			   const char *buff, size_t size)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	strlcpy(dev->pm_qos, buff, sizeof(dev->pm_qos));
-
-	return size;
-}
-
-static ssize_t state_show(struct device *pdev, struct device_attribute *attr,
-			   char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct usb_composite_dev *cdev = dev->cdev;
-	char *state = "DISCONNECTED";
-	unsigned long flags;
-
-	if (!cdev)
-		goto out;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (cdev->config)
-		state = "CONFIGURED";
-	else if (dev->connected)
-		state = "CONNECTED";
-	spin_unlock_irqrestore(&cdev->lock, flags);
-out:
-	printk(KERN_DEBUG "usb: %s buf=%s\n", __func__, state);
-	return snprintf(buf, PAGE_SIZE, "%s\n", state);
-}
-
-#define DESCRIPTOR_ATTR(field, format_string)				\
-static ssize_t								\
-field ## _show(struct device *dev, struct device_attribute *attr,	\
-		char *buf)						\
-{									\
-	return snprintf(buf, PAGE_SIZE,					\
-			format_string, device_desc.field);		\
-}									\
-static ssize_t								\
-field ## _store(struct device *dev, struct device_attribute *attr,	\
-		const char *buf, size_t size)				\
-{									\
-	int value;							\
-	if (sscanf(buf, format_string, &value) == 1) {			\
-		device_desc.field = value;				\
-		return size;						\
-	}								\
-	return -1;							\
-}									\
-static DEVICE_ATTR(field, S_IRUGO | S_IWUSR, field ## _show, field ## _store);
-
-#define DESCRIPTOR_STRING_ATTR(field, buffer)				\
-static ssize_t								\
-field ## _show(struct device *dev, struct device_attribute *attr,	\
-		char *buf)						\
-{									\
-	return snprintf(buf, PAGE_SIZE, "%s", buffer);			\
-}									\
-static ssize_t								\
-field ## _store(struct device *dev, struct device_attribute *attr,	\
-		const char *buf, size_t size)				\
-{									\
-	if (size >= sizeof(buffer))					\
-		return -EINVAL;						\
-	strlcpy(buffer, buf, sizeof(buffer));				\
-	strim(buffer);							\
-	return size;							\
-}									\
-static DEVICE_ATTR(field, S_IRUGO | S_IWUSR, field ## _show, field ## _store);
-
-
-DESCRIPTOR_ATTR(idVendor, "%04x\n")
-DESCRIPTOR_ATTR(idProduct, "%04x\n")
-DESCRIPTOR_ATTR(bcdDevice, "%04x\n")
-DESCRIPTOR_ATTR(bDeviceClass, "%d\n")
-DESCRIPTOR_ATTR(bDeviceSubClass, "%d\n")
-DESCRIPTOR_ATTR(bDeviceProtocol, "%d\n")
-DESCRIPTOR_STRING_ATTR(iManufacturer, manufacturer_string)
-DESCRIPTOR_STRING_ATTR(iProduct, product_string)
-DESCRIPTOR_STRING_ATTR(iSerial, serial_string)
-
-static ssize_t
-bcdUSB_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	if(dev->cdev) {
-		return sprintf(buf, "%04x\n", dev->cdev->desc.bcdUSB);
-	} else {
-		return sprintf(buf, "%04x\n", device_desc.bcdUSB);
-	}
-}
-
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-static ssize_t
-usb30en_show(struct device *pdev, struct device_attribute *attr, char *buf)
-{
-	return sprintf(buf, "%01x\n", usb30en);
-}
-
-extern void set_redriver_power(int on);
-static ssize_t usb30en_store (struct device *pdev,
-			struct device_attribute *attr,
-			const char *buf, size_t size)
-{
-	int value;
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	if(get_host_os_type() == 0) {
-		usb30en = 0;
-		printk(KERN_ERR "usb: %s MAC host is always disabled \n", __func__);
-		return size;
-	}
-	if (sscanf(buf, "%d", &value) == 1) {
-		if (dev->cdev ) {
-			if(usb30en == value){
-				printk(KERN_INFO "usb: %s ignore!! usb30en(%d), value(%d)\n",
-						__func__, usb30en, value);
-				return size;
-			}
-			usb30en = value;
-			usb_gadget_disconnect(dev->cdev->gadget);
-			sec_set_speedlimit(dev->cdev->gadget,
-					(usb30en ? USB_SPEED_SUPER : USB_SPEED_HIGH));
-			printk(KERN_DEBUG "usb: %s B4 disconectng gadget\n", __func__);
-			msleep(200);
-#if defined(CONFIG_SEC_H_PROJECT)
-			if (!usb30en)
-				schedule_usb_gadget_connect_work(dev);
-			else
-#endif
-			usb_gadget_connect(dev->cdev->gadget);
-			printk(KERN_DEBUG "usb: %s after usb_gadget_connect\n",	__func__);
-			return size;
-		}
-	}
-	printk(KERN_ERR "usb: %s Failed to set the usb30_en value\n", __func__);
-	return -1;
-}
-
-static ssize_t ss_host_available_show(struct device *pdev,
-				struct device_attribute *attr, char *buf)
-{
-	int value = 0;
-	int ss_host_available;
-	int windowsos;
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	if (dev->cdev ) {
-		ss_host_available = sec_get_ss_host_available(dev->cdev->gadget);
-		windowsos = get_host_os_type();
-		if((ss_host_available == 1) && ( windowsos == 1)) {
-			printk(KERN_ERR "usb: %s superspeed available \n", __func__);
-			value = 1;
-		}
-		printk(KERN_ERR "usb: %s ss_host_available(%d), windowsos(%d)\n",
-			__func__, ss_host_available, windowsos);
-	} else {
-		printk(KERN_ERR "usb: %s gadget not available \n", __func__);
-		value = -1;
-	}
-	return sprintf(buf, "%d\n", value);
-}
-
-static ssize_t macos_show(struct device *pdev,
-			struct device_attribute *attr, char *buf)
-{
-	int value = 1;
-	int ss_host_available;
-	int windowsos;
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	if (dev->cdev ) {
-		ss_host_available = sec_get_ss_host_available(dev->cdev->gadget);
-		windowsos = get_host_os_type();
-		if((ss_host_available == 1) && ( windowsos == 1)) {
-			printk(KERN_ERR "usb: %s superspeed available \n", __func__);
-			value = 0;
-		}
-		printk(KERN_ERR "usb: %s ss_host_available(%d), windowsos(%d)\n",
-			__func__, ss_host_available, windowsos);
-	} else {
-		printk(KERN_ERR "usb: %s gadget not available \n", __func__);
-		value = -1;
-	}
-	return sprintf(buf, "%d\n", value);
-}
-#endif
-
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-static ssize_t show_usb_device_lock_state(struct device *pdev,
-		struct device_attribute *attr, char *buf)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-
-	if (!dev->usb_lock)
-		return snprintf(buf, PAGE_SIZE, "USB_UNLOCK\n");
-	else
-		return snprintf(buf, PAGE_SIZE, "USB_LOCK\n");
-}
-
-static ssize_t store_usb_device_lock_state(struct device *pdev,
-		struct device_attribute *attr, const char *buff, size_t count)
-{
-	struct android_dev *dev = dev_get_drvdata(pdev);
-	struct power_supply *psy;
-
-	psy = power_supply_get_by_name("dwc-usb");
-
-	if (!psy) {
-		pr_info("%s: couldn't get usb power supply\n", __func__);
-		return -EINVAL;
-	}
-
-	if (!strncmp(buff, "0", 1)){
-		mutex_lock(&dev->mutex);
-		dev->usb_lock = 0;
-		android_enable(dev);
-		mutex_unlock(&dev->mutex);
-	} else if (!strncmp(buff, "1", 1)){
-		mutex_lock(&dev->mutex);
-		dev->usb_lock = 1;
-		android_disable(dev);
-		mutex_unlock(&dev->mutex);
-	} else {
-		pr_warn("%s: Wrong command\n", __func__);
-		return count;
-	}
-
-	if(dev->usb_lock) {
-		power_supply_set_present(psy, 0);
-		pr_info("[%s][%d] : usb disconnect for support MDM\n",
-			__func__,__LINE__);
-	}
-
-	return count;
-}
-#endif
-
-
-static DEVICE_ATTR(bcdUSB, S_IRUGO | S_IWUSR, bcdUSB_show, NULL);
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-static DEVICE_ATTR(usb30en,S_IRUGO | S_IWUSR, usb30en_show, usb30en_store);
-static DEVICE_ATTR(ss_host_available,S_IRUGO | S_IWUSR, ss_host_available_show, NULL);
-static DEVICE_ATTR(macos,S_IRUGO | S_IWUSR, macos_show, NULL);
-#endif
-static DEVICE_ATTR(functions, S_IRUGO | S_IWUSR, functions_show,
-						 functions_store);
-static DEVICE_ATTR(enable, S_IRUGO | S_IWUSR, enable_show, enable_store);
-static DEVICE_ATTR(pm_qos, S_IRUGO | S_IWUSR,
-		pm_qos_show, pm_qos_store);
-static DEVICE_ATTR(state, S_IRUGO, state_show, NULL);
-static DEVICE_ATTR(remote_wakeup, S_IRUGO | S_IWUSR,
-		remote_wakeup_show, remote_wakeup_store);
-
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-static DEVICE_ATTR(usb_lock, S_IRUGO | S_IWUSR,
-		show_usb_device_lock_state, store_usb_device_lock_state);
-#endif
-
-static struct device_attribute *android_usb_attributes[] = {
-	&dev_attr_idVendor,
-	&dev_attr_idProduct,
-	&dev_attr_bcdDevice,
-	&dev_attr_bDeviceClass,
-	&dev_attr_bDeviceSubClass,
-	&dev_attr_bDeviceProtocol,
-	&dev_attr_iManufacturer,
-	&dev_attr_iProduct,
-	&dev_attr_iSerial,
-	&dev_attr_functions,
-	&dev_attr_enable,
-	&dev_attr_pm_qos,
-	&dev_attr_state,
-	&dev_attr_bcdUSB,
-#if defined(CONFIG_SEC_H_PROJECT) || defined(CONFIG_SEC_F_PROJECT) || defined(CONFIG_SEC_K_PROJECT)
-	&dev_attr_usb30en,
-	&dev_attr_ss_host_available,
-	&dev_attr_macos,
-#endif
-	&dev_attr_remote_wakeup,
-#ifdef CONFIG_USB_LOCK_SUPPORT_FOR_MDM
-	&dev_attr_usb_lock,
-#endif
-	NULL
-};
-
-/*-------------------------------------------------------------------------*/
-/* Composite driver */
-
-static int android_bind_config(struct usb_configuration *c)
-{
-	struct android_dev *dev = cdev_to_android_dev(c->cdev);
-	int ret = 0;
-
-	ret = android_bind_enabled_functions(dev, c);
-	if (ret)
-		return ret;
-
-	return 0;
-}
-
-static void android_unbind_config(struct usb_configuration *c)
-{
-	struct android_dev *dev = cdev_to_android_dev(c->cdev);
-
-	if (c->cdev->gadget->streaming_enabled) {
-		c->cdev->gadget->streaming_enabled = false;
-		pr_debug("setting streaming_enabled to false.\n");
-	}
-	android_unbind_enabled_functions(dev, c);
-}
-
-static int android_bind(struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev;
-	struct usb_gadget	*gadget = cdev->gadget;
-	struct android_configuration *conf;
-	int			gcnum, id, ret;
-
-	/* Bind to the last android_dev that was probed */
-	dev = list_entry(android_dev_list.prev, struct android_dev, list_item);
-
-	dev->cdev = cdev;
-
-	printk(KERN_DEBUG "usb: %s disconnect\n", __func__);
-	/*
-	 * Start disconnected. Userspace will connect the gadget once
-	 * it is done configuring the functions.
-	 */
-	usb_gadget_disconnect(gadget);
-
-	/* Init the supported functions only once, on the first android_dev */
-	if (android_dev_count == 1) {
-		ret = android_init_functions(dev->functions, cdev);
-		if (ret)
-			return ret;
-	}
-
-	/* Allocate string descriptor numbers ... note that string
-	 * contents can be overridden by the composite_dev glue.
-	 */
-	id = usb_string_id(cdev);
-	if (id < 0)
-		return id;
-	strings_dev[STRING_MANUFACTURER_IDX].id = id;
-	device_desc.iManufacturer = id;
-
-	id = usb_string_id(cdev);
-	if (id < 0)
-		return id;
-	strings_dev[STRING_PRODUCT_IDX].id = id;
-	device_desc.iProduct = id;
-
-	/* Default strings - should be updated by userspace */
-	strlcpy(manufacturer_string, "Android",
-		sizeof(manufacturer_string) - 1);
-	strlcpy(product_string, "Android", sizeof(product_string) - 1);
-	strlcpy(serial_string, "0123456789ABCDEF", sizeof(serial_string) - 1);
-
-	id = usb_string_id(cdev);
-	if (id < 0)
-		return id;
-	strings_dev[STRING_SERIAL_IDX].id = id;
-	device_desc.iSerialNumber = id;
-
-	if (gadget_is_otg(cdev->gadget))
-		list_for_each_entry(conf, &dev->configs, list_item)
-			conf->usb_config.descriptors = otg_desc;
-
-	gcnum = usb_gadget_controller_number(gadget);
-	if (gcnum >= 0)
-		device_desc.bcdDevice = cpu_to_le16(0x0200 + gcnum);
-	else {
-		pr_warning("%s: controller '%s' not recognized\n",
-			longname, gadget->name);
-		device_desc.bcdDevice = __constant_cpu_to_le16(0x9999);
-	}
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	composite_string_index = 4;
-#endif
-	return 0;
-}
-
-static int android_usb_unbind(struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-
-	printk(KERN_DEBUG "usb: %s\n", __func__);
-
-	manufacturer_string[0] = '\0';
-	product_string[0] = '\0';
-	serial_string[0] = '0';
-	cancel_work_sync(&dev->work);
-	android_cleanup_functions(dev->functions);
-	return 0;
-}
-
-static struct usb_composite_driver android_usb_driver = {
-	.name		= "android_usb",
-	.dev		= &device_desc,
-	.strings	= dev_strings,
-	.unbind		= android_usb_unbind,
-#if defined(CONFIG_SEC_LT03_PROJECT) || defined(CONFIG_SEC_MONDRIAN_PROJECT)\
-	|| defined(CONFIG_SEC_KS01_PROJECT) || defined(CONFIG_SEC_PICASSO_PROJECT)\
-	|| defined(CONFIG_SEC_KACTIVE_PROJECT) || defined(CONFIG_SEC_FRESCO_PROJECT)\
-	|| defined(CONFIG_SEC_KSPORTS_PROJECT) || defined(CONFIG_SEC_JACTIVE_PROJECT)\
-	|| defined(CONFIG_SEC_S_PROJECT) || defined(CONFIG_SEC_PATEK_PROJECT)\
-	|| defined(CONFIG_SEC_CHAGALL_PROJECT) || defined(CONFIG_SEC_KLIMT_PROJECT)\
-	|| defined(CONFIG_MACH_JS01LTEDCM) ||defined(CONFIG_MACH_JSGLTE_CHN_CMCC)
-	.max_speed	= USB_SPEED_HIGH
-#else
-	.max_speed	= USB_SPEED_SUPER
-#endif
-};
-
-static int
-android_setup(struct usb_gadget *gadget, const struct usb_ctrlrequest *c)
-{
-	struct usb_composite_dev	*cdev = get_gadget_data(gadget);
-	struct android_dev		*dev = cdev_to_android_dev(cdev);
-	struct usb_request		*req = cdev->req;
-	struct android_usb_function	*f;
-	struct android_usb_function_holder *f_holder;
-	struct android_configuration	*conf;
-	int value = -EOPNOTSUPP;
-	unsigned long flags;
-	bool do_work = false;
-	bool prev_configured = false;
-
-	req->zero = 0;
-	req->complete = composite_setup_complete;
-	req->length = 0;
-	gadget->ep0->driver_data = cdev;
-
-	list_for_each_entry(conf, &dev->configs, list_item)
-		list_for_each_entry(f_holder,
-				    &conf->enabled_functions,
-				    enabled_list) {
-			f = f_holder->f;
-			if (f->ctrlrequest) {
-				value = f->ctrlrequest(f, cdev, c);
-				if (value >= 0)
-					break;
-			}
-		}
-
-
-	/*
-	 * skip the  work when 2nd set config arrives
-	 * with same value from the host.
-	 */
-	if (cdev->config)
-		prev_configured = true;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	if (value < 0)
-		value = terminal_ctrl_request(cdev, c);
-#endif
-	/* Special case the accessory function.
-	 * It needs to handle control requests before it is enabled.
-	 */
-	if (value < 0)
-		value = acc_ctrlrequest(cdev, c);
-
-	if (value < 0)
-		value = composite_setup(gadget, c);
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (!dev->connected) {
-		dev->connected = 1;
-		do_work = true;
-	} else if (c->bRequest == USB_REQ_SET_CONFIGURATION &&
-						cdev->config) {
-		if (!prev_configured)
-			do_work = true;
-	}
-	spin_unlock_irqrestore(&cdev->lock, flags);
-	if (do_work)
-		schedule_work(&dev->work);
-	return value;
-}
-
-static void android_disconnect(struct usb_gadget *gadget)
-{
-	struct usb_composite_dev *cdev = get_gadget_data(gadget);
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	unsigned long flags;
-
-	composite_disconnect(gadget);
-	/* accessory HID support can be active while the
-	   accessory function is not actually enabled,
-	   so we need to inform it when we are disconnected.
-	 */
-	acc_disconnect();
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	dev->connected = 0;
-	schedule_work(&dev->work);
-	spin_unlock_irqrestore(&cdev->lock, flags);
-}
-
-static void android_suspend(struct usb_gadget *gadget)
-{
-	struct usb_composite_dev *cdev = get_gadget_data(gadget);
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	unsigned long flags;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (!dev->suspended) {
-		dev->suspended = 1;
-		schedule_work(&dev->work);
-	}
-	spin_unlock_irqrestore(&cdev->lock, flags);
-
-	composite_suspend(gadget);
-}
-
-static void android_resume(struct usb_gadget *gadget)
-{
-	struct usb_composite_dev *cdev = get_gadget_data(gadget);
-	struct android_dev *dev = cdev_to_android_dev(cdev);
-	unsigned long flags;
-
-	spin_lock_irqsave(&cdev->lock, flags);
-	if (dev->suspended) {
-		dev->suspended = 0;
-		schedule_work(&dev->work);
-	}
-	spin_unlock_irqrestore(&cdev->lock, flags);
-
-	composite_resume(gadget);
-}
-
-
-static int android_create_device(struct android_dev *dev, u8 usb_core_id)
-{
-	struct device_attribute **attrs = android_usb_attributes;
-	struct device_attribute *attr;
-	char device_node_name[ANDROID_DEVICE_NODE_NAME_LENGTH];
-	int err;
-
-	/*
-	 * The primary usb core should always have usb_core_id=0, since
-	 * Android user space is currently interested in android0 events.
-	 */
-	snprintf(device_node_name, ANDROID_DEVICE_NODE_NAME_LENGTH,
-		 "android%d", usb_core_id);
-	dev->dev = device_create(android_class, NULL,
-					MKDEV(0, 0), NULL, device_node_name);
-	if (IS_ERR(dev->dev))
-		return PTR_ERR(dev->dev);
-
-	dev_set_drvdata(dev->dev, dev);
-
-	while ((attr = *attrs++)) {
-		err = device_create_file(dev->dev, attr);
-		if (err) {
-			device_destroy(android_class, dev->dev->devt);
-			return err;
-		}
-	}
-	return 0;
-}
-
-static void android_destroy_device(struct android_dev *dev)
-{
-	struct device_attribute **attrs = android_usb_attributes;
-	struct device_attribute *attr;
-
-	while ((attr = *attrs++))
-		device_remove_file(dev->dev, attr);
-	device_destroy(android_class, dev->dev->devt);
-}
-
-static struct android_dev *cdev_to_android_dev(struct usb_composite_dev *cdev)
-{
-	struct android_dev *dev = NULL;
-
-	/* Find the android dev from the list */
-	list_for_each_entry(dev, &android_dev_list, list_item) {
-		if (dev->cdev == cdev)
-			break;
-	}
-
-	return dev;
-}
-
-static struct android_configuration *alloc_android_config
-						(struct android_dev *dev)
-{
-	struct android_configuration *conf;
-
-	conf = kzalloc(sizeof(*conf), GFP_KERNEL);
-	if (!conf) {
-		pr_err("%s(): Failed to alloc memory for android conf\n",
-			__func__);
-		return ERR_PTR(-ENOMEM);
-	}
-
-	dev->configs_num++;
-	conf->usb_config.label = dev->name;
-	conf->usb_config.unbind = android_unbind_config;
-	conf->usb_config.bConfigurationValue = dev->configs_num;
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	conf->usb_config.bmAttributes
-		= USB_CONFIG_ATT_ONE | USB_CONFIG_ATT_SELFPOWER;
-	conf->usb_config.bMaxPower = 0x30; /* 96ma */
-#endif
-	INIT_LIST_HEAD(&conf->enabled_functions);
-
-	list_add_tail(&conf->list_item, &dev->configs);
-
-	return conf;
-}
-
-static void free_android_config(struct android_dev *dev,
-			     struct android_configuration *conf)
-{
-	list_del(&conf->list_item);
-	dev->configs_num--;
-	kfree(conf);
-}
-
-static int usb_diag_update_pid_and_serial_num(u32 pid, const char *snum)
-{
-	struct dload_struct local_diag_dload = { 0 };
-	int *src, *dst, i;
-
-	if (!diag_dload) {
-		pr_debug("%s: unable to update PID and serial_no\n", __func__);
-		return -ENODEV;
-	}
-
-	pr_debug("%s: dload:%pK pid:%x serial_num:%s\n",
-				__func__, diag_dload, pid, snum);
-
-	/* update pid */
-	local_diag_dload.magic_struct.pid = PID_MAGIC_ID;
-	local_diag_dload.pid = pid;
-
-	/* update serial number */
-	if (!snum) {
-		local_diag_dload.magic_struct.serial_num = 0;
-		memset(&local_diag_dload.serial_number, 0,
-				SERIAL_NUMBER_LENGTH);
-	} else {
-		local_diag_dload.magic_struct.serial_num = SERIAL_NUM_MAGIC_ID;
-		strlcpy((char *)&local_diag_dload.serial_number, snum,
-				SERIAL_NUMBER_LENGTH);
-	}
-
-	/* Copy to shared struct (accesses need to be 32 bit aligned) */
-	src = (int *)&local_diag_dload;
-	dst = (int *)diag_dload;
-
-	for (i = 0; i < sizeof(*diag_dload) / 4; i++)
-		*dst++ = *src++;
-
-	return 0;
-}
-
-static int __devinit android_probe(struct platform_device *pdev)
-{
-	struct android_usb_platform_data *pdata;
-	struct android_dev *android_dev;
-	struct resource *res;
-	int ret = 0, i, len = 0;
-
-	if (pdev->dev.of_node) {
-		dev_dbg(&pdev->dev, "device tree enabled\n");
-		pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
-		if (!pdata) {
-			pr_err("unable to allocate platform data\n");
-			return -ENOMEM;
-		}
-
-		of_property_read_u32(pdev->dev.of_node,
-				"qcom,android-usb-swfi-latency",
-				&pdata->swfi_latency);
-		pdata->cdrom = of_property_read_bool(pdev->dev.of_node,
-				"qcom,android-usb-cdrom");
-		pdata->internal_ums = of_property_read_bool(pdev->dev.of_node,
-				"qcom,android-usb-internal-ums");
-		len = of_property_count_strings(pdev->dev.of_node,
-				"qcom,streaming-func");
-		if (len > MAX_STREAMING_FUNCS) {
-			pr_err("Invalid number of functions used.\n");
-			return -EINVAL;
-		}
-
-		for (i = 0; i < len; i++) {
-			const char *name = NULL;
-
-			of_property_read_string_index(pdev->dev.of_node,
-				"qcom,streaming-func", i, &name);
-			if (!name)
-				continue;
-
-			if (sizeof(name) > FUNC_NAME_LEN) {
-				pr_err("Function name is bigger than allowed.\n");
-				continue;
-			}
-
-			strlcpy(pdata->streaming_func[i], name,
-				sizeof(pdata->streaming_func[i]));
-			pr_debug("name of streaming function:%s\n",
-				pdata->streaming_func[i]);
-		}
-
-		pdata->streaming_func_count = len;
-	} else {
-		pdata = pdev->dev.platform_data;
-	}
-
-	if (!android_class) {
-		android_class = class_create(THIS_MODULE, "android_usb");
-		if (IS_ERR(android_class))
-			return PTR_ERR(android_class);
-	}
-
-	android_dev = kzalloc(sizeof(*android_dev), GFP_KERNEL);
-	if (!android_dev) {
-		pr_err("%s(): Failed to alloc memory for android_dev\n",
-			__func__);
-		ret = -ENOMEM;
-		goto err_alloc;
-	}
-
-	android_dev->name = pdev->name;
-	android_dev->disable_depth = 1;
-	android_dev->functions = supported_functions;
-	android_dev->configs_num = 0;
-	INIT_LIST_HEAD(&android_dev->configs);
-	INIT_WORK(&android_dev->work, android_work);
-#if defined(CONFIG_SEC_H_PROJECT)
-	INIT_DELAYED_WORK(&android_dev->usb_connection_work, usb_gadget_connect_work);
-#endif
-	mutex_init(&android_dev->mutex);
-
-	android_dev->pdata = pdata;
-
-	list_add_tail(&android_dev->list_item, &android_dev_list);
-	android_dev_count++;
-
-	if (pdata)
-		composite_driver.usb_core_id = pdata->usb_core_id;
-	else
-		composite_driver.usb_core_id = 0; /*To backward compatibility*/
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (res) {
-		diag_dload = devm_ioremap(&pdev->dev, res->start,
-							resource_size(res));
-		if (!diag_dload) {
-			dev_err(&pdev->dev, "ioremap failed\n");
-			ret = -ENOMEM;
-			goto err_dev;
-		}
-	} else {
-		dev_dbg(&pdev->dev, "failed to get mem resource\n");
-	}
-
-	ret = android_create_device(android_dev, composite_driver.usb_core_id);
-	if (ret) {
-		pr_err("%s(): android_create_device failed\n", __func__);
-		goto err_dev;
-	}
-#ifdef CONFIG_USB_ANDROID_SAMSUNG_COMPOSITE
-	/* Create below sysfs
-	 *   /sys/class/android_usb/android0/terminal_version
-	 */
-	ret = create_terminal_attribute(&android_dev->dev);
-	if (ret) {
-		printk(KERN_ERR "usb: %s To create terminal_atttrr is failed\n",
-				__func__);
-		return ret;
-	}
-#endif
-	ret = usb_composite_probe(&android_usb_driver, android_bind);
-	if (ret) {
-		pr_err("%s(): Failed to register android "
-				 "composite driver\n", __func__);
-		goto err_probe;
-	}
-
-	/* pm qos request to prevent apps idle power collapse */
-	if (pdata && pdata->swfi_latency)
-		pm_qos_add_request(&android_dev->pm_qos_req_dma,
-			PM_QOS_CPU_DMA_LATENCY, PM_QOS_DEFAULT_VALUE);
-	strlcpy(android_dev->pm_qos, "high", sizeof(android_dev->pm_qos));
-
-#ifdef CONFIG_USB_DUN_SUPPORT
-		ret = modem_misc_register();
-		if (ret) {
-			printk(KERN_ERR "usb: %s modem misc register is failed\n",
-					 __func__);
-			goto err_probe;
-		}
-#endif
-
-	return ret;
-err_probe:
-	android_destroy_device(android_dev);
-err_dev:
-	list_del(&android_dev->list_item);
-	android_dev_count--;
-	kfree(android_dev);
-err_alloc:
-	if (list_empty(&android_dev_list)) {
-		class_destroy(android_class);
-		android_class = NULL;
-	}
-	return ret;
-}
-
-static int android_remove(struct platform_device *pdev)
-{
-	struct android_dev *dev = NULL;
-	struct android_usb_platform_data *pdata = pdev->dev.platform_data;
-	int usb_core_id = 0;
-
-	if (pdata)
-		usb_core_id = pdata->usb_core_id;
-
-	/* Find the android dev from the list */
-	list_for_each_entry(dev, &android_dev_list, list_item) {
-		if (!dev->pdata)
-			break; /*To backward compatibility*/
-		if (dev->pdata->usb_core_id == usb_core_id)
-			break;
-	}
-
-	if (dev) {
-		android_destroy_device(dev);
-		if (pdata && pdata->swfi_latency)
-			pm_qos_remove_request(&dev->pm_qos_req_dma);
-		list_del(&dev->list_item);
-		android_dev_count--;
-		kfree(dev);
-	}
-
-	if (list_empty(&android_dev_list)) {
-		class_destroy(android_class);
-		android_class = NULL;
-		usb_composite_unregister(&android_usb_driver);
-	}
-
-	return 0;
-}
-
-static const struct platform_device_id android_id_table[] __devinitconst = {
-	{
-		.name = "android_usb",
-	},
-	{
-		.name = "android_usb_hsic",
-	},
-};
-
-static struct of_device_id usb_android_dt_match[] = {
-	{	.compatible = "qcom,android-usb",
-	},
-	{}
-};
-
-static struct platform_driver android_platform_driver = {
-	.driver = {
-		.name = "android_usb",
-		.of_match_table = usb_android_dt_match,
-	},
-	.probe = android_probe,
-	.remove = android_remove,
-	.id_table = android_id_table,
-};
-
-static int __init init(void)
-{
-	int ret;
-
-	/* Override composite driver functions */
-	composite_driver.setup = android_setup;
-	composite_driver.disconnect = android_disconnect;
-	composite_driver.suspend = android_suspend;
-	composite_driver.resume = android_resume;
-
-	INIT_LIST_HEAD(&android_dev_list);
-	android_dev_count = 0;
-
-	ret = platform_driver_register(&android_platform_driver);
-	if (ret) {
-		pr_err("%s(): Failed to register android"
-				 "platform driver\n", __func__);
-	}
-
-	return ret;
-}
-module_init(init);
-
-static void __exit cleanup(void)
-{
-	platform_driver_unregister(&android_platform_driver);
-}
-module_exit(cleanup);
diff --git a/drivers/usb/gadget/android.o_shipped b/drivers/usb/gadget/android.o_shipped
new file mode 100644
index 0000000000000000000000000000000000000000..97ddf97c8abb68a0c781ba5fa76f217bad783981
GIT binary patch
literal 620000
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
WZ7J;8FExgnykTDUu7(JTaQ^{>dO(N(

literal 0
HcmV?d00001

diff --git a/fs/f2fs/segment.c b/fs/f2fs/segment.c
deleted file mode 100644
index 34a1c1394f1d..000000000000
--- a/fs/f2fs/segment.c
+++ /dev/null
@@ -1,2754 +0,0 @@
-/*
- * fs/f2fs/segment.c
- *
- * Copyright (c) 2012 Samsung Electronics Co., Ltd.
- *             http://www.samsung.com/
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-#include <linux/fs.h>
-#include <linux/f2fs_fs.h>
-#include <linux/bio.h>
-#include <linux/blkdev.h>
-#include <linux/prefetch.h>
-#include <linux/kthread.h>
-#include <linux/swap.h>
-#include <linux/timer.h>
-
-#include "f2fs.h"
-#include "segment.h"
-#include "node.h"
-#include "trace.h"
-#include <trace/events/f2fs.h>
-
-#define __reverse_ffz(x) __reverse_ffs(~(x))
-
-static struct kmem_cache *discard_entry_slab;
-static struct kmem_cache *sit_entry_set_slab;
-static struct kmem_cache *inmem_entry_slab;
-
-static unsigned long __reverse_ulong(unsigned char *str)
-{
-	unsigned long tmp = 0;
-	int shift = 24, idx = 0;
-
-#if BITS_PER_LONG == 64
-	shift = 56;
-#endif
-	while (shift >= 0) {
-		tmp |= (unsigned long)str[idx++] << shift;
-		shift -= BITS_PER_BYTE;
-	}
-	return tmp;
-}
-
-/**
- * Copied from latest lib/llist.c
- * llist_for_each_entry_safe - iterate over some deleted entries of
- *                             lock-less list of given type
- *			       safe against removal of list entry
- * @pos:	the type * to use as a loop cursor.
- * @n:		another type * to use as temporary storage
- * @node:	the first entry of deleted list entries.
- * @member:	the name of the llist_node with the struct.
- *
- * In general, some entries of the lock-less list can be traversed
- * safely only after being removed from list, so start with an entry
- * instead of list head.
- *
- * If being used on entries deleted from lock-less list directly, the
- * traverse order is from the newest to the oldest added entry.  If
- * you want to traverse from the oldest to the newest, you must
- * reverse the order by yourself before traversing.
- */
-#define llist_for_each_entry_safe(pos, n, node, member)			       \
-	for (pos = llist_entry((node), typeof(*pos), member);		       \
-		&pos->member != NULL &&					       \
-		(n = llist_entry(pos->member.next, typeof(*n), member), true); \
-		pos = n)
-
-/**
- * Copied from latest lib/llist.c
- * llist_reverse_order - reverse order of a llist chain
- * @head:	first item of the list to be reversed
- *
- * Reverse the order of a chain of llist entries and return the
- * new first entry.
- */
-struct llist_node *llist_reverse_order(struct llist_node *head)
-{
-	struct llist_node *new_head = NULL;
-
-	while (head) {
-		struct llist_node *tmp = head;
-		head = head->next;
-		tmp->next = new_head;
-		new_head = tmp;
-	}
-
-	return new_head;
-}
-
-/**
- * Copied from latest linux/list.h
- * list_last_entry - get the last element from a list
- * @ptr:        the list head to take the element from.
- * @type:       the type of the struct this is embedded in.
- * @member:     the name of the list_struct within the struct.
- *
- * Note, that list is expected to be not empty.
- */
-#define list_last_entry(ptr, type, member) \
-	list_entry((ptr)->prev, type, member)
-
-/*
- * __reverse_ffs is copied from include/asm-generic/bitops/__ffs.h since
- * MSB and LSB are reversed in a byte by f2fs_set_bit.
- */
-static inline unsigned long __reverse_ffs(unsigned long word)
-{
-	int num = 0;
-
-#if BITS_PER_LONG == 64
-	if ((word & 0xffffffff00000000UL) == 0)
-		num += 32;
-	else
-		word >>= 32;
-#endif
-	if ((word & 0xffff0000) == 0)
-		num += 16;
-	else
-		word >>= 16;
-
-	if ((word & 0xff00) == 0)
-		num += 8;
-	else
-		word >>= 8;
-
-	if ((word & 0xf0) == 0)
-		num += 4;
-	else
-		word >>= 4;
-
-	if ((word & 0xc) == 0)
-		num += 2;
-	else
-		word >>= 2;
-
-	if ((word & 0x2) == 0)
-		num += 1;
-	return num;
-}
-
-/*
- * __find_rev_next(_zero)_bit is copied from lib/find_next_bit.c because
- * f2fs_set_bit makes MSB and LSB reversed in a byte.
- * @size must be integral times of unsigned long.
- * Example:
- *                             MSB <--> LSB
- *   f2fs_set_bit(0, bitmap) => 1000 0000
- *   f2fs_set_bit(7, bitmap) => 0000 0001
- */
-static unsigned long __find_rev_next_bit(const unsigned long *addr,
-			unsigned long size, unsigned long offset)
-{
-	const unsigned long *p = addr + BIT_WORD(offset);
-	unsigned long result = size;
-	unsigned long tmp;
-
-	if (offset >= size)
-		return size;
-
-	size -= (offset & ~(BITS_PER_LONG - 1));
-	offset %= BITS_PER_LONG;
-
-	while (1) {
-		if (*p == 0)
-			goto pass;
-
-		tmp = __reverse_ulong((unsigned char *)p);
-
-		tmp &= ~0UL >> offset;
-		if (size < BITS_PER_LONG)
-			tmp &= (~0UL << (BITS_PER_LONG - size));
-		if (tmp)
-			goto found;
-pass:
-		if (size <= BITS_PER_LONG)
-			break;
-		size -= BITS_PER_LONG;
-		offset = 0;
-		p++;
-	}
-	return result;
-found:
-	return result - size + __reverse_ffs(tmp);
-}
-
-static unsigned long __find_rev_next_zero_bit(const unsigned long *addr,
-			unsigned long size, unsigned long offset)
-{
-	const unsigned long *p = addr + BIT_WORD(offset);
-	unsigned long result = size;
-	unsigned long tmp;
-
-	if (offset >= size)
-		return size;
-
-	size -= (offset & ~(BITS_PER_LONG - 1));
-	offset %= BITS_PER_LONG;
-
-	while (1) {
-		if (*p == ~0UL)
-			goto pass;
-
-		tmp = __reverse_ulong((unsigned char *)p);
-
-		if (offset)
-			tmp |= ~0UL << (BITS_PER_LONG - offset);
-		if (size < BITS_PER_LONG)
-			tmp |= ~0UL >> size;
-		if (tmp != ~0UL)
-			goto found;
-pass:
-		if (size <= BITS_PER_LONG)
-			break;
-		size -= BITS_PER_LONG;
-		offset = 0;
-		p++;
-	}
-	return result;
-found:
-	return result - size + __reverse_ffz(tmp);
-}
-
-void register_inmem_page(struct inode *inode, struct page *page)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct inmem_pages *new;
-
-	f2fs_trace_pid(page);
-
-	set_page_private(page, (unsigned long)ATOMIC_WRITTEN_PAGE);
-	SetPagePrivate(page);
-
-	new = f2fs_kmem_cache_alloc(inmem_entry_slab, GFP_NOFS);
-
-	/* add atomic page indices to the list */
-	new->page = page;
-	INIT_LIST_HEAD(&new->list);
-
-	/* increase reference count with clean state */
-	mutex_lock(&fi->inmem_lock);
-	get_page(page);
-	list_add_tail(&new->list, &fi->inmem_pages);
-	inc_page_count(F2FS_I_SB(inode), F2FS_INMEM_PAGES);
-	mutex_unlock(&fi->inmem_lock);
-
-	trace_f2fs_register_inmem_page(page, INMEM);
-}
-
-static int __revoke_inmem_pages(struct inode *inode,
-				struct list_head *head, bool drop, bool recover)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct inmem_pages *cur, *tmp;
-	int err = 0;
-
-	list_for_each_entry_safe(cur, tmp, head, list) {
-		struct page *page = cur->page;
-
-		if (drop)
-			trace_f2fs_commit_inmem_page(page, INMEM_DROP);
-
-		lock_page(page);
-
-		if (recover) {
-			struct dnode_of_data dn;
-			struct node_info ni;
-
-			trace_f2fs_commit_inmem_page(page, INMEM_REVOKE);
-
-			set_new_dnode(&dn, inode, NULL, NULL, 0);
-			if (get_dnode_of_data(&dn, page->index, LOOKUP_NODE)) {
-				err = -EAGAIN;
-				goto next;
-			}
-			get_node_info(sbi, dn.nid, &ni);
-			f2fs_replace_block(sbi, &dn, dn.data_blkaddr,
-					cur->old_addr, ni.version, true, true);
-			f2fs_put_dnode(&dn);
-		}
-next:
-		/* we don't need to invalidate this in the sccessful status */
-		if (drop || recover)
-			ClearPageUptodate(page);
-		set_page_private(page, 0);
-		ClearPagePrivate(page);
-		f2fs_put_page(page, 1);
-
-		list_del(&cur->list);
-		kmem_cache_free(inmem_entry_slab, cur);
-		dec_page_count(F2FS_I_SB(inode), F2FS_INMEM_PAGES);
-	}
-	return err;
-}
-
-void drop_inmem_pages(struct inode *inode)
-{
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-
-	clear_inode_flag(inode, FI_ATOMIC_FILE);
-
-	mutex_lock(&fi->inmem_lock);
-	__revoke_inmem_pages(inode, &fi->inmem_pages, true, false);
-	mutex_unlock(&fi->inmem_lock);
-}
-
-static int __commit_inmem_pages(struct inode *inode,
-					struct list_head *revoke_list)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct inmem_pages *cur, *tmp;
-	struct f2fs_io_info fio = {
-		.sbi = sbi,
-		.type = DATA,
-		.rw = WRITE_SYNC | REQ_PRIO,
-		.encrypted_page = NULL,
-	};
-	bool submit_bio = false;
-	int err = 0;
-
-	list_for_each_entry_safe(cur, tmp, &fi->inmem_pages, list) {
-		struct page *page = cur->page;
-
-		lock_page(page);
-		if (page->mapping == inode->i_mapping) {
-			trace_f2fs_commit_inmem_page(page, INMEM);
-
-			set_page_dirty(page);
-			f2fs_wait_on_page_writeback(page, DATA, true);
-			if (clear_page_dirty_for_io(page)) {
-				inode_dec_dirty_pages(inode);
-				remove_dirty_inode(inode);
-			}
-
-			fio.page = page;
-			err = do_write_data_page(&fio);
-			if (err) {
-				unlock_page(page);
-				break;
-			}
-
-			/* record old blkaddr for revoking */
-			cur->old_addr = fio.old_blkaddr;
-
-			submit_bio = true;
-		}
-		unlock_page(page);
-		list_move_tail(&cur->list, revoke_list);
-	}
-
-	if (submit_bio)
-		f2fs_submit_merged_bio_cond(sbi, inode, NULL, 0, DATA, WRITE);
-
-	if (!err)
-		__revoke_inmem_pages(inode, revoke_list, false, false);
-
-	return err;
-}
-
-int commit_inmem_pages(struct inode *inode)
-{
-	struct f2fs_sb_info *sbi = F2FS_I_SB(inode);
-	struct f2fs_inode_info *fi = F2FS_I(inode);
-	struct list_head revoke_list;
-	int err;
-
-	INIT_LIST_HEAD(&revoke_list);
-	f2fs_balance_fs(sbi, true);
-	f2fs_lock_op(sbi);
-
-	mutex_lock(&fi->inmem_lock);
-	err = __commit_inmem_pages(inode, &revoke_list);
-	if (err) {
-		int ret;
-		/*
-		 * try to revoke all committed pages, but still we could fail
-		 * due to no memory or other reason, if that happened, EAGAIN
-		 * will be returned, which means in such case, transaction is
-		 * already not integrity, caller should use journal to do the
-		 * recovery or rewrite & commit last transaction. For other
-		 * error number, revoking was done by filesystem itself.
-		 */
-		ret = __revoke_inmem_pages(inode, &revoke_list, false, true);
-		if (ret)
-			err = ret;
-
-		/* drop all uncommitted pages */
-		__revoke_inmem_pages(inode, &fi->inmem_pages, true, false);
-	}
-	mutex_unlock(&fi->inmem_lock);
-
-	f2fs_unlock_op(sbi);
-	return err;
-}
-
-/*
- * This function balances dirty node and dentry pages.
- * In addition, it controls garbage collection.
- */
-void f2fs_balance_fs(struct f2fs_sb_info *sbi, bool need)
-{
-#ifdef CONFIG_F2FS_FAULT_INJECTION
-	if (time_to_inject(sbi, FAULT_CHECKPOINT))
-		f2fs_stop_checkpoint(sbi, false);
-#endif
-
-	if (!need)
-		return;
-
-	/* balance_fs_bg is able to be pending */
-	if (excess_cached_nats(sbi))
-		f2fs_balance_fs_bg(sbi);
-
-	/*
-	 * We should do GC or end up with checkpoint, if there are so many dirty
-	 * dir/node pages without enough free segments.
-	 */
-	if (has_not_enough_free_secs(sbi, 0, 0)) {
-		mutex_lock(&sbi->gc_mutex);
-		f2fs_gc(sbi, false, false);
-	}
-}
-
-void f2fs_balance_fs_bg(struct f2fs_sb_info *sbi)
-{
-	/* try to shrink extent cache when there is no enough memory */
-	if (!available_free_memory(sbi, EXTENT_CACHE))
-		f2fs_shrink_extent_tree(sbi, EXTENT_CACHE_SHRINK_NUMBER);
-
-	/* check the # of cached NAT entries */
-	if (!available_free_memory(sbi, NAT_ENTRIES))
-		try_to_free_nats(sbi, NAT_ENTRY_PER_BLOCK);
-
-	if (!available_free_memory(sbi, FREE_NIDS))
-		try_to_free_nids(sbi, MAX_FREE_NIDS);
-	else
-		build_free_nids(sbi, false);
-
-	if (!is_idle(sbi))
-		return;
-
-	/* checkpoint is the only way to shrink partial cached entries */
-	if (!available_free_memory(sbi, NAT_ENTRIES) ||
-			!available_free_memory(sbi, INO_ENTRIES) ||
-			excess_prefree_segs(sbi) ||
-			excess_dirty_nats(sbi) ||
-			f2fs_time_over(sbi, CP_TIME)) {
-		if (test_opt(sbi, DATA_FLUSH)) {
-			struct blk_plug plug;
-
-			blk_start_plug(&plug);
-			sync_dirty_inodes(sbi, FILE_INODE);
-			blk_finish_plug(&plug);
-		}
-		f2fs_sync_fs(sbi->sb, true);
-		stat_inc_bg_cp_count(sbi->stat_info);
-	}
-}
-
-struct __submit_bio_ret {
-	struct completion event;
-	int error;
-};
-
-static void __submit_bio_wait_endio(struct bio *bio, int error)
-{
-	struct __submit_bio_ret *ret = bio->bi_private;
-
-	ret->error = error;
-	complete(&ret->event);
-}
-
-static int __submit_bio_wait(int rw, struct bio *bio)
-{
-	struct __submit_bio_ret ret;
-
-	rw |= REQ_SYNC;
-	init_completion(&ret.event);
-	bio->bi_private = &ret;
-	bio->bi_end_io = __submit_bio_wait_endio;
-	submit_bio(rw, bio);
-	wait_for_completion(&ret.event);
-
-	return ret.error;
-}
-
-static int issue_flush_thread(void *data)
-{
-	struct f2fs_sb_info *sbi = data;
-	struct flush_cmd_control *fcc = SM_I(sbi)->cmd_control_info;
-	wait_queue_head_t *q = &fcc->flush_wait_queue;
-repeat:
-	if (kthread_should_stop())
-		return 0;
-
-	if (!llist_empty(&fcc->issue_list)) {
-		struct bio *bio;
-		struct flush_cmd *cmd, *next;
-		int ret;
-
-		bio = f2fs_bio_alloc(0);
-
-		fcc->dispatch_list = llist_del_all(&fcc->issue_list);
-		fcc->dispatch_list = llist_reverse_order(fcc->dispatch_list);
-
-		bio->bi_bdev = sbi->sb->s_bdev;
-		ret = __submit_bio_wait(WRITE_FLUSH, bio);
-
-		llist_for_each_entry_safe(cmd, next,
-					  fcc->dispatch_list, llnode) {
-			cmd->ret = ret;
-			complete(&cmd->wait);
-		}
-		bio_put(bio);
-		fcc->dispatch_list = NULL;
-	}
-
-	wait_event_interruptible(*q,
-		kthread_should_stop() || !llist_empty(&fcc->issue_list));
-	goto repeat;
-}
-
-int f2fs_issue_flush(struct f2fs_sb_info *sbi)
-{
-	struct flush_cmd_control *fcc = SM_I(sbi)->cmd_control_info;
-	struct flush_cmd cmd;
-
-	trace_f2fs_issue_flush(sbi->sb, test_opt(sbi, NOBARRIER),
-					test_opt(sbi, FLUSH_MERGE));
-
-	if (test_opt(sbi, NOBARRIER))
-		return 0;
-
-	if (!test_opt(sbi, FLUSH_MERGE) || !atomic_read(&fcc->submit_flush)) {
-		struct bio *bio = f2fs_bio_alloc(0);
-		int ret;
-
-		atomic_inc(&fcc->submit_flush);
-		bio->bi_bdev = sbi->sb->s_bdev;
-		ret = __submit_bio_wait(WRITE_FLUSH, bio);
-		atomic_dec(&fcc->submit_flush);
-		bio_put(bio);
-		return ret;
-	}
-
-	init_completion(&cmd.wait);
-
-	atomic_inc(&fcc->submit_flush);
-	llist_add(&cmd.llnode, &fcc->issue_list);
-
-	if (!fcc->dispatch_list)
-		wake_up(&fcc->flush_wait_queue);
-
-	if (fcc->f2fs_issue_flush) {
-		wait_for_completion(&cmd.wait);
-		atomic_dec(&fcc->submit_flush);
-	} else {
-		llist_del_all(&fcc->issue_list);
-		atomic_set(&fcc->submit_flush, 0);
-	}
-
-	return cmd.ret;
-}
-
-int create_flush_cmd_control(struct f2fs_sb_info *sbi)
-{
-	dev_t dev = sbi->sb->s_bdev->bd_dev;
-	struct flush_cmd_control *fcc;
-	int err = 0;
-
-	if (SM_I(sbi)->cmd_control_info) {
-		fcc = SM_I(sbi)->cmd_control_info;
-		goto init_thread;
-	}
-
-	fcc = kzalloc(sizeof(struct flush_cmd_control), GFP_KERNEL);
-	if (!fcc)
-		return -ENOMEM;
-	atomic_set(&fcc->submit_flush, 0);
-	init_waitqueue_head(&fcc->flush_wait_queue);
-	init_llist_head(&fcc->issue_list);
-	SM_I(sbi)->cmd_control_info = fcc;
-	if (!test_opt(sbi, FLUSH_MERGE))
-		return err;
-
-init_thread:
-	fcc->f2fs_issue_flush = kthread_run(issue_flush_thread, sbi,
-				"f2fs_flush-%u:%u", MAJOR(dev), MINOR(dev));
-	if (IS_ERR(fcc->f2fs_issue_flush)) {
-		err = PTR_ERR(fcc->f2fs_issue_flush);
-		kfree(fcc);
-		SM_I(sbi)->cmd_control_info = NULL;
-		return err;
-	}
-
-	return err;
-}
-
-void destroy_flush_cmd_control(struct f2fs_sb_info *sbi, bool free)
-{
-	struct flush_cmd_control *fcc = SM_I(sbi)->cmd_control_info;
-
-	if (fcc && fcc->f2fs_issue_flush) {
-		struct task_struct *flush_thread = fcc->f2fs_issue_flush;
-
-		fcc->f2fs_issue_flush = NULL;
-		kthread_stop(flush_thread);
-	}
-	if (free) {
-		kfree(fcc);
-		SM_I(sbi)->cmd_control_info = NULL;
-	}
-}
-
-static void __locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	/* need not be added */
-	if (IS_CURSEG(sbi, segno))
-		return;
-
-	if (!test_and_set_bit(segno, dirty_i->dirty_segmap[dirty_type]))
-		dirty_i->nr_dirty[dirty_type]++;
-
-	if (dirty_type == DIRTY) {
-		struct seg_entry *sentry = get_seg_entry(sbi, segno);
-		enum dirty_type t = sentry->type;
-
-		if (unlikely(t >= DIRTY)) {
-			f2fs_bug_on(sbi, 1);
-			return;
-		}
-		if (!test_and_set_bit(segno, dirty_i->dirty_segmap[t]))
-			dirty_i->nr_dirty[t]++;
-	}
-}
-
-static void __remove_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	if (test_and_clear_bit(segno, dirty_i->dirty_segmap[dirty_type]))
-		dirty_i->nr_dirty[dirty_type]--;
-
-	if (dirty_type == DIRTY) {
-		struct seg_entry *sentry = get_seg_entry(sbi, segno);
-		enum dirty_type t = sentry->type;
-
-		if (test_and_clear_bit(segno, dirty_i->dirty_segmap[t]))
-			dirty_i->nr_dirty[t]--;
-
-		if (get_valid_blocks(sbi, segno, sbi->segs_per_sec) == 0)
-			clear_bit(GET_SECNO(sbi, segno),
-						dirty_i->victim_secmap);
-	}
-}
-
-/*
- * Should not occur error such as -ENOMEM.
- * Adding dirty entry into seglist is not critical operation.
- * If a given segment is one of current working segments, it won't be added.
- */
-static void locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned short valid_blocks;
-
-	if (segno == NULL_SEGNO || IS_CURSEG(sbi, segno))
-		return;
-
-	mutex_lock(&dirty_i->seglist_lock);
-
-	valid_blocks = get_valid_blocks(sbi, segno, 0);
-
-	if (valid_blocks == 0) {
-		__locate_dirty_segment(sbi, segno, PRE);
-		__remove_dirty_segment(sbi, segno, DIRTY);
-	} else if (valid_blocks < sbi->blocks_per_seg) {
-		__locate_dirty_segment(sbi, segno, DIRTY);
-	} else {
-		/* Recovery routine with SSR needs this */
-		__remove_dirty_segment(sbi, segno, DIRTY);
-	}
-
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-#ifdef CONFIG_BLK_DEV_ZONED
-static int f2fs_issue_discard_zone(struct f2fs_sb_info *sbi,
-					block_t blkstart, block_t blklen)
-{
-	sector_t sector = SECTOR_FROM_BLOCK(blkstart);
-	sector_t nr_sects = SECTOR_FROM_BLOCK(blklen);
-	struct block_device *bdev = sbi->sb->s_bdev;
-
-	if (sector & (bdev_zone_size(bdev) - 1) ||
-				nr_sects != bdev_zone_size(bdev)) {
-		f2fs_msg(sbi->sb, KERN_INFO,
-			 "Unaligned discard attempted (sector %llu + %llu)",
-			 (unsigned long long)sector,
-			 (unsigned long long)nr_sects);
-		return -EIO;
-	}
-
-	/*
-	 * We need to know the type of the zone: for conventional zones,
-	 * use regular discard if the drive supports it. For sequential
-	 * zones, reset the zone write pointer.
-	 */
-	switch (get_blkz_type(sbi, blkstart)) {
-
-	case BLK_ZONE_TYPE_CONVENTIONAL:
-		if (!blk_queue_discard(bdev_get_queue(bdev)))
-			return 0;
-		return blkdev_issue_discard(bdev, sector, nr_sects,
-						GFP_NOFS, 0);
-	case BLK_ZONE_TYPE_SEQWRITE_REQ:
-	case BLK_ZONE_TYPE_SEQWRITE_PREF:
-		trace_f2fs_issue_reset_zone(sbi->sb, blkstart);
-		return blkdev_reset_zones(bdev, sector,
-					  nr_sects, GFP_NOFS);
-	default:
-		/* Unknown zone type: broken device ? */
-		return -EIO;
-	}
-}
-#endif
-
-static int f2fs_issue_discard(struct f2fs_sb_info *sbi,
-				block_t blkstart, block_t blklen)
-{
-	sector_t start = SECTOR_FROM_BLOCK(blkstart);
-	sector_t len = SECTOR_FROM_BLOCK(blklen);
-	struct seg_entry *se;
-	unsigned int offset;
-	block_t i;
-
-	for (i = blkstart; i < blkstart + blklen; i++) {
-		se = get_seg_entry(sbi, GET_SEGNO(sbi, i));
-		offset = GET_BLKOFF_FROM_SEG0(sbi, i);
-
-		if (!f2fs_test_and_set_bit(offset, se->discard_map))
-			sbi->discard_blks--;
-	}
-	trace_f2fs_issue_discard(sbi->sb, blkstart, blklen);
-
-#ifdef CONFIG_BLK_DEV_ZONED
-	if (f2fs_sb_mounted_blkzoned(sbi->sb))
-		return f2fs_issue_discard_zone(sbi, blkstart, blklen);
-#endif
-	return blkdev_issue_discard(sbi->sb->s_bdev, start, len, GFP_NOFS, 0);
-}
-
-static void __add_discard_entry(struct f2fs_sb_info *sbi,
-		struct cp_control *cpc, struct seg_entry *se,
-		unsigned int start, unsigned int end)
-{
-	struct list_head *head = &SM_I(sbi)->discard_list;
-	struct discard_entry *new, *last;
-
-	if (!list_empty(head)) {
-		last = list_last_entry(head, struct discard_entry, list);
-		if (START_BLOCK(sbi, cpc->trim_start) + start ==
-						last->blkaddr + last->len) {
-			last->len += end - start;
-			goto done;
-		}
-	}
-
-	new = f2fs_kmem_cache_alloc(discard_entry_slab, GFP_NOFS);
-	INIT_LIST_HEAD(&new->list);
-	new->blkaddr = START_BLOCK(sbi, cpc->trim_start) + start;
-	new->len = end - start;
-	list_add_tail(&new->list, head);
-done:
-	SM_I(sbi)->nr_discards += end - start;
-}
-
-static void add_discard_addrs(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	int entries = SIT_VBLOCK_MAP_SIZE / sizeof(unsigned long);
-	int max_blocks = sbi->blocks_per_seg;
-	struct seg_entry *se = get_seg_entry(sbi, cpc->trim_start);
-	unsigned long *cur_map = (unsigned long *)se->cur_valid_map;
-	unsigned long *ckpt_map = (unsigned long *)se->ckpt_valid_map;
-	unsigned long *discard_map = (unsigned long *)se->discard_map;
-	unsigned long *dmap = SIT_I(sbi)->tmp_map;
-	unsigned int start = 0, end = -1;
-	bool force = (cpc->reason == CP_DISCARD);
-	int i;
-
-	if (se->valid_blocks == max_blocks || !f2fs_discard_en(sbi))
-		return;
-
-	if (!force) {
-		if (!test_opt(sbi, DISCARD) || !se->valid_blocks ||
-		    SM_I(sbi)->nr_discards >= SM_I(sbi)->max_discards)
-			return;
-	}
-
-	/* SIT_VBLOCK_MAP_SIZE should be multiple of sizeof(unsigned long) */
-	for (i = 0; i < entries; i++)
-		dmap[i] = force ? ~ckpt_map[i] & ~discard_map[i] :
-				(cur_map[i] ^ ckpt_map[i]) & ckpt_map[i];
-
-	while (force || SM_I(sbi)->nr_discards <= SM_I(sbi)->max_discards) {
-		start = __find_rev_next_bit(dmap, max_blocks, end + 1);
-		if (start >= max_blocks)
-			break;
-
-		end = __find_rev_next_zero_bit(dmap, max_blocks, start + 1);
-		if (force && start && end != max_blocks
-					&& (end - start) < cpc->trim_minlen)
-			continue;
-
-		__add_discard_entry(sbi, cpc, se, start, end);
-	}
-}
-
-void release_discard_addrs(struct f2fs_sb_info *sbi)
-{
-	struct list_head *head = &(SM_I(sbi)->discard_list);
-	struct discard_entry *entry, *this;
-
-	/* drop caches */
-	list_for_each_entry_safe(entry, this, head, list) {
-		list_del(&entry->list);
-		kmem_cache_free(discard_entry_slab, entry);
-	}
-}
-
-/*
- * Should call clear_prefree_segments after checkpoint is done.
- */
-static void set_prefree_as_free_segments(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned int segno;
-
-	mutex_lock(&dirty_i->seglist_lock);
-	for_each_set_bit(segno, dirty_i->dirty_segmap[PRE], MAIN_SEGS(sbi))
-		__set_test_and_free(sbi, segno);
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-void clear_prefree_segments(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	struct list_head *head = &(SM_I(sbi)->discard_list);
-	struct discard_entry *entry, *this;
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned long *prefree_map = dirty_i->dirty_segmap[PRE];
-	unsigned int start = 0, end = -1;
-	unsigned int secno, start_segno;
-	bool force = (cpc->reason == CP_DISCARD);
-
-	mutex_lock(&dirty_i->seglist_lock);
-
-	while (1) {
-		int i;
-		start = find_next_bit(prefree_map, MAIN_SEGS(sbi), end + 1);
-		if (start >= MAIN_SEGS(sbi))
-			break;
-		end = find_next_zero_bit(prefree_map, MAIN_SEGS(sbi),
-								start + 1);
-
-		for (i = start; i < end; i++)
-			clear_bit(i, prefree_map);
-
-		dirty_i->nr_dirty[PRE] -= end - start;
-
-		if (force || !test_opt(sbi, DISCARD))
-			continue;
-
-		if (!test_opt(sbi, LFS) || sbi->segs_per_sec == 1) {
-			f2fs_issue_discard(sbi, START_BLOCK(sbi, start),
-				(end - start) << sbi->log_blocks_per_seg);
-			continue;
-		}
-next:
-		secno = GET_SECNO(sbi, start);
-		start_segno = secno * sbi->segs_per_sec;
-		if (!IS_CURSEC(sbi, secno) &&
-			!get_valid_blocks(sbi, start, sbi->segs_per_sec))
-			f2fs_issue_discard(sbi, START_BLOCK(sbi, start_segno),
-				sbi->segs_per_sec << sbi->log_blocks_per_seg);
-
-		start = start_segno + sbi->segs_per_sec;
-		if (start < end)
-			goto next;
-	}
-	mutex_unlock(&dirty_i->seglist_lock);
-
-	/* send small discards */
-	list_for_each_entry_safe(entry, this, head, list) {
-		if (force && entry->len < cpc->trim_minlen)
-			goto skip;
-		f2fs_issue_discard(sbi, entry->blkaddr, entry->len);
-		cpc->trimmed += entry->len;
-skip:
-		list_del(&entry->list);
-		SM_I(sbi)->nr_discards -= entry->len;
-		kmem_cache_free(discard_entry_slab, entry);
-	}
-}
-
-static bool __mark_sit_entry_dirty(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-
-	if (!__test_and_set_bit(segno, sit_i->dirty_sentries_bitmap)) {
-		sit_i->dirty_sentries++;
-		return false;
-	}
-
-	return true;
-}
-
-static void __set_sit_entry_type(struct f2fs_sb_info *sbi, int type,
-					unsigned int segno, int modified)
-{
-	struct seg_entry *se = get_seg_entry(sbi, segno);
-	se->type = type;
-	if (modified)
-		__mark_sit_entry_dirty(sbi, segno);
-}
-
-static void update_sit_entry(struct f2fs_sb_info *sbi, block_t blkaddr, int del)
-{
-	struct seg_entry *se;
-	unsigned int segno, offset;
-	long int new_vblocks;
-
-	segno = GET_SEGNO(sbi, blkaddr);
-
-	se = get_seg_entry(sbi, segno);
-	new_vblocks = se->valid_blocks + del;
-	offset = GET_BLKOFF_FROM_SEG0(sbi, blkaddr);
-
-	f2fs_bug_on(sbi, (new_vblocks >> (sizeof(unsigned short) << 3) ||
-				(new_vblocks > sbi->blocks_per_seg)));
-
-	se->valid_blocks = new_vblocks;
-	se->mtime = get_mtime(sbi);
-	SIT_I(sbi)->max_mtime = se->mtime;
-
-	/* Update valid block bitmap */
-	if (del > 0) {
-		if (f2fs_test_and_set_bit(offset, se->cur_valid_map))
-			f2fs_bug_on(sbi, 1);
-		if (f2fs_discard_en(sbi) &&
-			!f2fs_test_and_set_bit(offset, se->discard_map))
-			sbi->discard_blks--;
-	} else {
-		if (!f2fs_test_and_clear_bit(offset, se->cur_valid_map))
-			f2fs_bug_on(sbi, 1);
-		if (f2fs_discard_en(sbi) &&
-			f2fs_test_and_clear_bit(offset, se->discard_map))
-			sbi->discard_blks++;
-	}
-	if (!f2fs_test_bit(offset, se->ckpt_valid_map))
-		se->ckpt_valid_blocks += del;
-
-	__mark_sit_entry_dirty(sbi, segno);
-
-	/* update total number of valid blocks to be written in ckpt area */
-	SIT_I(sbi)->written_valid_blocks += del;
-
-	if (sbi->segs_per_sec > 1)
-		get_sec_entry(sbi, segno)->valid_blocks += del;
-}
-
-void refresh_sit_entry(struct f2fs_sb_info *sbi, block_t old, block_t new)
-{
-	update_sit_entry(sbi, new, 1);
-	if (GET_SEGNO(sbi, old) != NULL_SEGNO)
-		update_sit_entry(sbi, old, -1);
-
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, old));
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, new));
-}
-
-void invalidate_blocks(struct f2fs_sb_info *sbi, block_t addr)
-{
-	unsigned int segno = GET_SEGNO(sbi, addr);
-	struct sit_info *sit_i = SIT_I(sbi);
-
-	f2fs_bug_on(sbi, addr == NULL_ADDR);
-	if (addr == NEW_ADDR)
-		return;
-
-	/* add it into sit main buffer */
-	mutex_lock(&sit_i->sentry_lock);
-
-	update_sit_entry(sbi, addr, -1);
-
-	/* add it into dirty seglist */
-	locate_dirty_segment(sbi, segno);
-
-	mutex_unlock(&sit_i->sentry_lock);
-}
-
-bool is_checkpointed_data(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int segno, offset;
-	struct seg_entry *se;
-	bool is_cp = false;
-
-	if (blkaddr == NEW_ADDR || blkaddr == NULL_ADDR)
-		return true;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	segno = GET_SEGNO(sbi, blkaddr);
-	se = get_seg_entry(sbi, segno);
-	offset = GET_BLKOFF_FROM_SEG0(sbi, blkaddr);
-
-	if (f2fs_test_bit(offset, se->ckpt_valid_map))
-		is_cp = true;
-
-	mutex_unlock(&sit_i->sentry_lock);
-
-	return is_cp;
-}
-
-/*
- * This function should be resided under the curseg_mutex lock
- */
-static void __add_sum_entry(struct f2fs_sb_info *sbi, int type,
-					struct f2fs_summary *sum)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	void *addr = curseg->sum_blk;
-	addr += curseg->next_blkoff * sizeof(struct f2fs_summary);
-	memcpy(addr, sum, sizeof(struct f2fs_summary));
-}
-
-/*
- * Calculate the number of current summary pages for writing
- */
-int npages_for_summary_flush(struct f2fs_sb_info *sbi, bool for_ra)
-{
-	int valid_sum_count = 0;
-	int i, sum_in_page;
-
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		if (sbi->ckpt->alloc_type[i] == SSR)
-			valid_sum_count += sbi->blocks_per_seg;
-		else {
-			if (for_ra)
-				valid_sum_count += le16_to_cpu(
-					F2FS_CKPT(sbi)->cur_data_blkoff[i]);
-			else
-				valid_sum_count += curseg_blkoff(sbi, i);
-		}
-	}
-
-	sum_in_page = (PAGE_SIZE - 2 * SUM_JOURNAL_SIZE -
-			SUM_FOOTER_SIZE) / SUMMARY_SIZE;
-	if (valid_sum_count <= sum_in_page)
-		return 1;
-	else if ((valid_sum_count - sum_in_page) <=
-		(PAGE_SIZE - SUM_FOOTER_SIZE) / SUMMARY_SIZE)
-		return 2;
-	return 3;
-}
-
-/*
- * Caller should put this summary page
- */
-struct page *get_sum_page(struct f2fs_sb_info *sbi, unsigned int segno)
-{
-	return get_meta_page(sbi, GET_SUM_BLOCK(sbi, segno));
-}
-
-void update_meta_page(struct f2fs_sb_info *sbi, void *src, block_t blk_addr)
-{
-	struct page *page = grab_meta_page(sbi, blk_addr);
-	void *dst = page_address(page);
-
-	if (src)
-		memcpy(dst, src, PAGE_SIZE);
-	else
-		memset(dst, 0, PAGE_SIZE);
-	set_page_dirty(page);
-	f2fs_put_page(page, 1);
-}
-
-static void write_sum_page(struct f2fs_sb_info *sbi,
-			struct f2fs_summary_block *sum_blk, block_t blk_addr)
-{
-	update_meta_page(sbi, (void *)sum_blk, blk_addr);
-}
-
-static void write_current_sum_page(struct f2fs_sb_info *sbi,
-						int type, block_t blk_addr)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	struct page *page = grab_meta_page(sbi, blk_addr);
-	struct f2fs_summary_block *src = curseg->sum_blk;
-	struct f2fs_summary_block *dst;
-
-	dst = (struct f2fs_summary_block *)page_address(page);
-
-	mutex_lock(&curseg->curseg_mutex);
-
-	down_read(&curseg->journal_rwsem);
-	memcpy(&dst->journal, curseg->journal, SUM_JOURNAL_SIZE);
-	up_read(&curseg->journal_rwsem);
-
-	memcpy(dst->entries, src->entries, SUM_ENTRY_SIZE);
-	memcpy(&dst->footer, &src->footer, SUM_FOOTER_SIZE);
-
-	mutex_unlock(&curseg->curseg_mutex);
-
-	set_page_dirty(page);
-	f2fs_put_page(page, 1);
-}
-
-static int is_next_segment_free(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int segno = curseg->segno + 1;
-	struct free_segmap_info *free_i = FREE_I(sbi);
-
-	if (segno < MAIN_SEGS(sbi) && segno % sbi->segs_per_sec)
-		return !test_bit(segno, free_i->free_segmap);
-	return 0;
-}
-
-/*
- * Find a new segment from the free segments bitmap to right order
- * This function should be returned with success, otherwise BUG
- */
-static void get_new_segment(struct f2fs_sb_info *sbi,
-			unsigned int *newseg, bool new_sec, int dir)
-{
-	struct free_segmap_info *free_i = FREE_I(sbi);
-	unsigned int segno, secno, zoneno;
-	unsigned int total_zones = MAIN_SECS(sbi) / sbi->secs_per_zone;
-	unsigned int hint = *newseg / sbi->segs_per_sec;
-	unsigned int old_zoneno = GET_ZONENO_FROM_SEGNO(sbi, *newseg);
-	unsigned int left_start = hint;
-	bool init = true;
-	int go_left = 0;
-	int i;
-
-	spin_lock(&free_i->segmap_lock);
-
-	if (!new_sec && ((*newseg + 1) % sbi->segs_per_sec)) {
-		segno = find_next_zero_bit(free_i->free_segmap,
-				(hint + 1) * sbi->segs_per_sec, *newseg + 1);
-		if (segno < (hint + 1) * sbi->segs_per_sec)
-			goto got_it;
-	}
-find_other_zone:
-	secno = find_next_zero_bit(free_i->free_secmap, MAIN_SECS(sbi), hint);
-	if (secno >= MAIN_SECS(sbi)) {
-		if (dir == ALLOC_RIGHT) {
-			secno = find_next_zero_bit(free_i->free_secmap,
-							MAIN_SECS(sbi), 0);
-			f2fs_bug_on(sbi, secno >= MAIN_SECS(sbi));
-		} else {
-			go_left = 1;
-			left_start = hint - 1;
-		}
-	}
-	if (go_left == 0)
-		goto skip_left;
-
-	while (test_bit(left_start, free_i->free_secmap)) {
-		if (left_start > 0) {
-			left_start--;
-			continue;
-		}
-		left_start = find_next_zero_bit(free_i->free_secmap,
-							MAIN_SECS(sbi), 0);
-		f2fs_bug_on(sbi, left_start >= MAIN_SECS(sbi));
-		break;
-	}
-	secno = left_start;
-skip_left:
-	hint = secno;
-	segno = secno * sbi->segs_per_sec;
-	zoneno = secno / sbi->secs_per_zone;
-
-	/* give up on finding another zone */
-	if (!init)
-		goto got_it;
-	if (sbi->secs_per_zone == 1)
-		goto got_it;
-	if (zoneno == old_zoneno)
-		goto got_it;
-	if (dir == ALLOC_LEFT) {
-		if (!go_left && zoneno + 1 >= total_zones)
-			goto got_it;
-		if (go_left && zoneno == 0)
-			goto got_it;
-	}
-	for (i = 0; i < NR_CURSEG_TYPE; i++)
-		if (CURSEG_I(sbi, i)->zone == zoneno)
-			break;
-
-	if (i < NR_CURSEG_TYPE) {
-		/* zone is in user, try another */
-		if (go_left)
-			hint = zoneno * sbi->secs_per_zone - 1;
-		else if (zoneno + 1 >= total_zones)
-			hint = 0;
-		else
-			hint = (zoneno + 1) * sbi->secs_per_zone;
-		init = false;
-		goto find_other_zone;
-	}
-got_it:
-	/* set it as dirty segment in free segmap */
-	f2fs_bug_on(sbi, test_bit(segno, free_i->free_segmap));
-	__set_inuse(sbi, segno);
-	*newseg = segno;
-	spin_unlock(&free_i->segmap_lock);
-}
-
-static void reset_curseg(struct f2fs_sb_info *sbi, int type, int modified)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	struct summary_footer *sum_footer;
-
-	curseg->segno = curseg->next_segno;
-	curseg->zone = GET_ZONENO_FROM_SEGNO(sbi, curseg->segno);
-	curseg->next_blkoff = 0;
-	curseg->next_segno = NULL_SEGNO;
-
-	sum_footer = &(curseg->sum_blk->footer);
-	memset(sum_footer, 0, sizeof(struct summary_footer));
-	if (IS_DATASEG(type))
-		SET_SUM_TYPE(sum_footer, SUM_TYPE_DATA);
-	if (IS_NODESEG(type))
-		SET_SUM_TYPE(sum_footer, SUM_TYPE_NODE);
-	__set_sit_entry_type(sbi, type, curseg->segno, modified);
-}
-
-/*
- * Allocate a current working segment.
- * This function always allocates a free segment in LFS manner.
- */
-static void new_curseg(struct f2fs_sb_info *sbi, int type, bool new_sec)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int segno = curseg->segno;
-	int dir = ALLOC_LEFT;
-
-	write_sum_page(sbi, curseg->sum_blk,
-				GET_SUM_BLOCK(sbi, segno));
-	if (type == CURSEG_WARM_DATA || type == CURSEG_COLD_DATA)
-		dir = ALLOC_RIGHT;
-
-	if (test_opt(sbi, NOHEAP))
-		dir = ALLOC_RIGHT;
-
-	get_new_segment(sbi, &segno, new_sec, dir);
-	curseg->next_segno = segno;
-	reset_curseg(sbi, type, 1);
-	curseg->alloc_type = LFS;
-}
-
-static void __next_free_blkoff(struct f2fs_sb_info *sbi,
-			struct curseg_info *seg, block_t start)
-{
-	struct seg_entry *se = get_seg_entry(sbi, seg->segno);
-	int entries = SIT_VBLOCK_MAP_SIZE / sizeof(unsigned long);
-	unsigned long *target_map = SIT_I(sbi)->tmp_map;
-	unsigned long *ckpt_map = (unsigned long *)se->ckpt_valid_map;
-	unsigned long *cur_map = (unsigned long *)se->cur_valid_map;
-	int i, pos;
-
-	for (i = 0; i < entries; i++)
-		target_map[i] = ckpt_map[i] | cur_map[i];
-
-	pos = __find_rev_next_zero_bit(target_map, sbi->blocks_per_seg, start);
-
-	seg->next_blkoff = pos;
-}
-
-/*
- * If a segment is written by LFS manner, next block offset is just obtained
- * by increasing the current block offset. However, if a segment is written by
- * SSR manner, next block offset obtained by calling __next_free_blkoff
- */
-static void __refresh_next_blkoff(struct f2fs_sb_info *sbi,
-				struct curseg_info *seg)
-{
-	if (seg->alloc_type == SSR)
-		__next_free_blkoff(sbi, seg, seg->next_blkoff + 1);
-	else
-		seg->next_blkoff++;
-}
-
-/*
- * This function always allocates a used segment(from dirty seglist) by SSR
- * manner, so it should recover the existing segment information of valid blocks
- */
-static void change_curseg(struct f2fs_sb_info *sbi, int type, bool reuse)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	unsigned int new_segno = curseg->next_segno;
-	struct f2fs_summary_block *sum_node;
-	struct page *sum_page;
-
-	write_sum_page(sbi, curseg->sum_blk,
-				GET_SUM_BLOCK(sbi, curseg->segno));
-	__set_test_and_inuse(sbi, new_segno);
-
-	mutex_lock(&dirty_i->seglist_lock);
-	__remove_dirty_segment(sbi, new_segno, PRE);
-	__remove_dirty_segment(sbi, new_segno, DIRTY);
-	mutex_unlock(&dirty_i->seglist_lock);
-
-	reset_curseg(sbi, type, 1);
-	curseg->alloc_type = SSR;
-	__next_free_blkoff(sbi, curseg, 0);
-
-	if (reuse) {
-		sum_page = get_sum_page(sbi, new_segno);
-		sum_node = (struct f2fs_summary_block *)page_address(sum_page);
-		memcpy(curseg->sum_blk, sum_node, SUM_ENTRY_SIZE);
-		f2fs_put_page(sum_page, 1);
-	}
-}
-
-static int get_ssr_segment(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	const struct victim_selection *v_ops = DIRTY_I(sbi)->v_ops;
-
-	if (IS_NODESEG(type) || !has_not_enough_free_secs(sbi, 0, 0))
-		return v_ops->get_victim(sbi,
-				&(curseg)->next_segno, BG_GC, type, SSR);
-
-	/* For data segments, let's do SSR more intensively */
-	for (; type >= CURSEG_HOT_DATA; type--)
-		if (v_ops->get_victim(sbi, &(curseg)->next_segno,
-						BG_GC, type, SSR))
-			return 1;
-	return 0;
-}
-
-/*
- * flush out current segment and replace it with new segment
- * This function should be returned with success, otherwise BUG
- */
-static void allocate_segment_by_default(struct f2fs_sb_info *sbi,
-						int type, bool force)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-
-	if (force)
-		new_curseg(sbi, type, true);
-	else if (type == CURSEG_WARM_NODE)
-		new_curseg(sbi, type, false);
-	else if (curseg->alloc_type == LFS && is_next_segment_free(sbi, type))
-		new_curseg(sbi, type, false);
-	else if (need_SSR(sbi) && get_ssr_segment(sbi, type))
-		change_curseg(sbi, type, true);
-	else
-		new_curseg(sbi, type, false);
-
-	stat_inc_seg_type(sbi, curseg);
-}
-
-void allocate_new_segments(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *curseg;
-	unsigned int old_segno;
-	int i;
-
-	if (test_opt(sbi, LFS))
-		return;
-
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		curseg = CURSEG_I(sbi, i);
-		old_segno = curseg->segno;
-		SIT_I(sbi)->s_ops->allocate_segment(sbi, i, true);
-		locate_dirty_segment(sbi, old_segno);
-	}
-}
-
-static const struct segment_allocation default_salloc_ops = {
-	.allocate_segment = allocate_segment_by_default,
-};
-
-int f2fs_trim_fs(struct f2fs_sb_info *sbi, struct fstrim_range *range)
-{
-	__u64 start = F2FS_BYTES_TO_BLK(range->start);
-	__u64 end = start + F2FS_BYTES_TO_BLK(range->len) - 1;
-	unsigned int start_segno, end_segno;
-	struct cp_control cpc;
-	int err = 0;
-
-	if (start >= MAX_BLKADDR(sbi) || range->len < sbi->blocksize)
-		return -EINVAL;
-
-	cpc.trimmed = 0;
-	if (end <= MAIN_BLKADDR(sbi))
-		goto out;
-
-	if (is_sbi_flag_set(sbi, SBI_NEED_FSCK)) {
-		f2fs_msg(sbi->sb, KERN_WARNING,
-			"Found FS corruption, run fsck to fix.");
-		goto out;
-	}
-
-	/* start/end segment number in main_area */
-	start_segno = (start <= MAIN_BLKADDR(sbi)) ? 0 : GET_SEGNO(sbi, start);
-	end_segno = (end >= MAX_BLKADDR(sbi)) ? MAIN_SEGS(sbi) - 1 :
-						GET_SEGNO(sbi, end);
-	cpc.reason = CP_DISCARD;
-	cpc.trim_minlen = max_t(__u64, 1, F2FS_BYTES_TO_BLK(range->minlen));
-
-	/* do checkpoint to issue discard commands safely */
-	for (; start_segno <= end_segno; start_segno = cpc.trim_end + 1) {
-		cpc.trim_start = start_segno;
-
-		if (sbi->discard_blks == 0)
-			break;
-		else if (sbi->discard_blks < BATCHED_TRIM_BLOCKS(sbi))
-			cpc.trim_end = end_segno;
-		else
-			cpc.trim_end = min_t(unsigned int,
-				rounddown(start_segno +
-				BATCHED_TRIM_SEGMENTS(sbi),
-				sbi->segs_per_sec) - 1, end_segno);
-
-		mutex_lock(&sbi->gc_mutex);
-		err = write_checkpoint(sbi, &cpc);
-		mutex_unlock(&sbi->gc_mutex);
-		if (err)
-			break;
-
-		schedule();
-	}
-out:
-	range->len = F2FS_BLK_TO_BYTES(cpc.trimmed);
-	return err;
-}
-
-static bool __has_curseg_space(struct f2fs_sb_info *sbi, int type)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-	if (curseg->next_blkoff < sbi->blocks_per_seg)
-		return true;
-	return false;
-}
-
-static int __get_segment_type_2(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA)
-		return CURSEG_HOT_DATA;
-	else
-		return CURSEG_HOT_NODE;
-}
-
-static int __get_segment_type_4(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA) {
-		struct inode *inode = page->mapping->host;
-
-		if (S_ISDIR(inode->i_mode))
-			return CURSEG_HOT_DATA;
-		else
-			return CURSEG_COLD_DATA;
-	} else {
-		if (IS_DNODE(page) && is_cold_node(page))
-			return CURSEG_WARM_NODE;
-		else
-			return CURSEG_COLD_NODE;
-	}
-}
-
-static int __get_segment_type_6(struct page *page, enum page_type p_type)
-{
-	if (p_type == DATA) {
-		struct inode *inode = page->mapping->host;
-
-		if (S_ISDIR(inode->i_mode))
-			return CURSEG_HOT_DATA;
-		else if (is_cold_data(page) || file_is_cold(inode))
-			return CURSEG_COLD_DATA;
-		else
-			return CURSEG_WARM_DATA;
-	} else {
-		if (IS_DNODE(page))
-			return is_cold_node(page) ? CURSEG_WARM_NODE :
-						CURSEG_HOT_NODE;
-		else
-			return CURSEG_COLD_NODE;
-	}
-}
-
-static int __get_segment_type(struct page *page, enum page_type p_type)
-{
-	switch (F2FS_P_SB(page)->active_logs) {
-	case 2:
-		return __get_segment_type_2(page, p_type);
-	case 4:
-		return __get_segment_type_4(page, p_type);
-	}
-	/* NR_CURSEG_TYPE(6) logs by default */
-	f2fs_bug_on(F2FS_P_SB(page),
-		F2FS_P_SB(page)->active_logs != NR_CURSEG_TYPE);
-	return __get_segment_type_6(page, p_type);
-}
-
-void allocate_data_block(struct f2fs_sb_info *sbi, struct page *page,
-		block_t old_blkaddr, block_t *new_blkaddr,
-		struct f2fs_summary *sum, int type)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, type);
-
-	mutex_lock(&curseg->curseg_mutex);
-	mutex_lock(&sit_i->sentry_lock);
-
-	*new_blkaddr = NEXT_FREE_BLKADDR(sbi, curseg);
-
-	/*
-	 * __add_sum_entry should be resided under the curseg_mutex
-	 * because, this function updates a summary entry in the
-	 * current summary block.
-	 */
-	__add_sum_entry(sbi, type, sum);
-
-	__refresh_next_blkoff(sbi, curseg);
-
-	stat_inc_block_count(sbi, curseg);
-
-	if (!__has_curseg_space(sbi, type))
-		sit_i->s_ops->allocate_segment(sbi, type, false);
-	/*
-	 * SIT information should be updated before segment allocation,
-	 * since SSR needs latest valid block information.
-	 */
-	refresh_sit_entry(sbi, old_blkaddr, *new_blkaddr);
-
-	mutex_unlock(&sit_i->sentry_lock);
-
-	if (page && IS_NODESEG(type))
-		fill_node_footer_blkaddr(page, NEXT_FREE_BLKADDR(sbi, curseg));
-
-	mutex_unlock(&curseg->curseg_mutex);
-}
-
-static void do_write_page(struct f2fs_summary *sum, struct f2fs_io_info *fio)
-{
-	int type = __get_segment_type(fio->page, fio->type);
-
-	if (fio->type == NODE || fio->type == DATA)
-		mutex_lock(&fio->sbi->wio_mutex[fio->type]);
-
-	allocate_data_block(fio->sbi, fio->page, fio->old_blkaddr,
-					&fio->new_blkaddr, sum, type);
-
-	/* writeout dirty page into bdev */
-	f2fs_submit_page_mbio(fio);
-
-	if (fio->type == NODE || fio->type == DATA)
-		mutex_unlock(&fio->sbi->wio_mutex[fio->type]);
-}
-
-void write_meta_page(struct f2fs_sb_info *sbi, struct page *page)
-{
-	struct f2fs_io_info fio = {
-		.sbi = sbi,
-		.type = META,
-		.rw = WRITE_SYNC | REQ_META | REQ_PRIO,
-		.old_blkaddr = page->index,
-		.new_blkaddr = page->index,
-		.page = page,
-		.encrypted_page = NULL,
-	};
-
-	if (unlikely(page->index >= MAIN_BLKADDR(sbi)))
-		fio.rw &= ~REQ_META;
-
-	set_page_writeback(page);
-	f2fs_submit_page_mbio(&fio);
-}
-
-void write_node_page(unsigned int nid, struct f2fs_io_info *fio)
-{
-	struct f2fs_summary sum;
-
-	set_summary(&sum, nid, 0, 0);
-	do_write_page(&sum, fio);
-}
-
-void write_data_page(struct dnode_of_data *dn, struct f2fs_io_info *fio)
-{
-	struct f2fs_sb_info *sbi = fio->sbi;
-	struct f2fs_summary sum;
-	struct node_info ni;
-
-	f2fs_bug_on(sbi, dn->data_blkaddr == NULL_ADDR);
-	get_node_info(sbi, dn->nid, &ni);
-	set_summary(&sum, dn->nid, dn->ofs_in_node, ni.version);
-	do_write_page(&sum, fio);
-	f2fs_update_data_blkaddr(dn, fio->new_blkaddr);
-}
-
-void rewrite_data_page(struct f2fs_io_info *fio)
-{
-	fio->new_blkaddr = fio->old_blkaddr;
-	stat_inc_inplace_blocks(fio->sbi);
-	f2fs_submit_page_mbio(fio);
-}
-
-void __f2fs_replace_block(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,
-				block_t old_blkaddr, block_t new_blkaddr,
-				bool recover_curseg, bool recover_newaddr)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg;
-	unsigned int segno, old_cursegno;
-	struct seg_entry *se;
-	int type;
-	unsigned short old_blkoff;
-
-	segno = GET_SEGNO(sbi, new_blkaddr);
-	se = get_seg_entry(sbi, segno);
-	type = se->type;
-
-	if (!recover_curseg) {
-		/* for recovery flow */
-		if (se->valid_blocks == 0 && !IS_CURSEG(sbi, segno)) {
-			if (old_blkaddr == NULL_ADDR)
-				type = CURSEG_COLD_DATA;
-			else
-				type = CURSEG_WARM_DATA;
-		}
-	} else {
-		if (!IS_CURSEG(sbi, segno))
-			type = CURSEG_WARM_DATA;
-	}
-
-	curseg = CURSEG_I(sbi, type);
-
-	mutex_lock(&curseg->curseg_mutex);
-	mutex_lock(&sit_i->sentry_lock);
-
-	old_cursegno = curseg->segno;
-	old_blkoff = curseg->next_blkoff;
-
-	/* change the current segment */
-	if (segno != curseg->segno) {
-		curseg->next_segno = segno;
-		change_curseg(sbi, type, true);
-	}
-
-	curseg->next_blkoff = GET_BLKOFF_FROM_SEG0(sbi, new_blkaddr);
-	__add_sum_entry(sbi, type, sum);
-
-	if (!recover_curseg || recover_newaddr)
-		update_sit_entry(sbi, new_blkaddr, 1);
-	if (GET_SEGNO(sbi, old_blkaddr) != NULL_SEGNO)
-		update_sit_entry(sbi, old_blkaddr, -1);
-
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, old_blkaddr));
-	locate_dirty_segment(sbi, GET_SEGNO(sbi, new_blkaddr));
-
-	locate_dirty_segment(sbi, old_cursegno);
-
-	if (recover_curseg) {
-		if (old_cursegno != curseg->segno) {
-			curseg->next_segno = old_cursegno;
-			change_curseg(sbi, type, true);
-		}
-		curseg->next_blkoff = old_blkoff;
-	}
-
-	mutex_unlock(&sit_i->sentry_lock);
-	mutex_unlock(&curseg->curseg_mutex);
-}
-
-void f2fs_replace_block(struct f2fs_sb_info *sbi, struct dnode_of_data *dn,
-				block_t old_addr, block_t new_addr,
-				unsigned char version, bool recover_curseg,
-				bool recover_newaddr)
-{
-	struct f2fs_summary sum;
-
-	set_summary(&sum, dn->nid, dn->ofs_in_node, version);
-
-	__f2fs_replace_block(sbi, &sum, old_addr, new_addr,
-					recover_curseg, recover_newaddr);
-
-	f2fs_update_data_blkaddr(dn, new_addr);
-}
-
-void f2fs_wait_on_page_writeback(struct page *page,
-				enum page_type type, bool ordered)
-{
-	if (PageWriteback(page)) {
-		struct f2fs_sb_info *sbi = F2FS_P_SB(page);
-
-		f2fs_submit_merged_bio_cond(sbi, NULL, page, 0, type, WRITE);
-		if (ordered)
-			wait_on_page_writeback(page);
-		else
-			/* wait_for_stable_page(page) doesn't support */
-			wait_on_page_writeback(page);
-	}
-}
-
-void f2fs_wait_on_encrypted_page_writeback(struct f2fs_sb_info *sbi,
-							block_t blkaddr)
-{
-	struct page *cpage;
-
-	if (blkaddr == NEW_ADDR || blkaddr == NULL_ADDR)
-		return;
-
-	cpage = find_lock_page(META_MAPPING(sbi), blkaddr);
-	if (cpage) {
-		f2fs_wait_on_page_writeback(cpage, DATA, true);
-		f2fs_put_page(cpage, 1);
-	}
-}
-
-static int read_compacted_summaries(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct curseg_info *seg_i;
-	unsigned char *kaddr;
-	struct page *page;
-	block_t start;
-	int i, j, offset;
-
-	start = start_sum_block(sbi);
-
-	page = get_meta_page(sbi, start++);
-	kaddr = (unsigned char *)page_address(page);
-
-	/* Step 1: restore nat cache */
-	seg_i = CURSEG_I(sbi, CURSEG_HOT_DATA);
-	memcpy(seg_i->journal, kaddr, SUM_JOURNAL_SIZE);
-
-	/* Step 2: restore sit cache */
-	seg_i = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	memcpy(seg_i->journal, kaddr + SUM_JOURNAL_SIZE, SUM_JOURNAL_SIZE);
-	offset = 2 * SUM_JOURNAL_SIZE;
-
-	/* Step 3: restore summary entries */
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		unsigned short blk_off;
-		unsigned int segno;
-
-		seg_i = CURSEG_I(sbi, i);
-		segno = le32_to_cpu(ckpt->cur_data_segno[i]);
-		blk_off = le16_to_cpu(ckpt->cur_data_blkoff[i]);
-		seg_i->next_segno = segno;
-		reset_curseg(sbi, i, 0);
-		seg_i->alloc_type = ckpt->alloc_type[i];
-		seg_i->next_blkoff = blk_off;
-
-		if (seg_i->alloc_type == SSR)
-			blk_off = sbi->blocks_per_seg;
-
-		for (j = 0; j < blk_off; j++) {
-			struct f2fs_summary *s;
-			s = (struct f2fs_summary *)(kaddr + offset);
-			seg_i->sum_blk->entries[j] = *s;
-			offset += SUMMARY_SIZE;
-			if (offset + SUMMARY_SIZE <= PAGE_SIZE -
-						SUM_FOOTER_SIZE)
-				continue;
-
-			f2fs_put_page(page, 1);
-			page = NULL;
-
-			page = get_meta_page(sbi, start++);
-			kaddr = (unsigned char *)page_address(page);
-			offset = 0;
-		}
-	}
-	f2fs_put_page(page, 1);
-	return 0;
-}
-
-static int read_normal_summaries(struct f2fs_sb_info *sbi, int type)
-{
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct f2fs_summary_block *sum;
-	struct curseg_info *curseg;
-	struct page *new;
-	unsigned short blk_off;
-	unsigned int segno = 0;
-	block_t blk_addr = 0;
-
-	/* get segment number and block addr */
-	if (IS_DATASEG(type)) {
-		segno = le32_to_cpu(ckpt->cur_data_segno[type]);
-		blk_off = le16_to_cpu(ckpt->cur_data_blkoff[type -
-							CURSEG_HOT_DATA]);
-		if (__exist_node_summaries(sbi))
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_TYPE, type);
-		else
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_DATA_TYPE, type);
-	} else {
-		segno = le32_to_cpu(ckpt->cur_node_segno[type -
-							CURSEG_HOT_NODE]);
-		blk_off = le16_to_cpu(ckpt->cur_node_blkoff[type -
-							CURSEG_HOT_NODE]);
-		if (__exist_node_summaries(sbi))
-			blk_addr = sum_blk_addr(sbi, NR_CURSEG_NODE_TYPE,
-							type - CURSEG_HOT_NODE);
-		else
-			blk_addr = GET_SUM_BLOCK(sbi, segno);
-	}
-
-	new = get_meta_page(sbi, blk_addr);
-	sum = (struct f2fs_summary_block *)page_address(new);
-
-	if (IS_NODESEG(type)) {
-		if (__exist_node_summaries(sbi)) {
-			struct f2fs_summary *ns = &sum->entries[0];
-			int i;
-			for (i = 0; i < sbi->blocks_per_seg; i++, ns++) {
-				ns->version = 0;
-				ns->ofs_in_node = 0;
-			}
-		} else {
-			int err;
-
-			err = restore_node_summary(sbi, segno, sum);
-			if (err) {
-				f2fs_put_page(new, 1);
-				return err;
-			}
-		}
-	}
-
-	/* set uncompleted segment to curseg */
-	curseg = CURSEG_I(sbi, type);
-	mutex_lock(&curseg->curseg_mutex);
-
-	/* update journal info */
-	down_write(&curseg->journal_rwsem);
-	memcpy(curseg->journal, &sum->journal, SUM_JOURNAL_SIZE);
-	up_write(&curseg->journal_rwsem);
-
-	memcpy(curseg->sum_blk->entries, sum->entries, SUM_ENTRY_SIZE);
-	memcpy(&curseg->sum_blk->footer, &sum->footer, SUM_FOOTER_SIZE);
-	curseg->next_segno = segno;
-	reset_curseg(sbi, type, 0);
-	curseg->alloc_type = ckpt->alloc_type[type];
-	curseg->next_blkoff = blk_off;
-	mutex_unlock(&curseg->curseg_mutex);
-	f2fs_put_page(new, 1);
-	return 0;
-}
-
-static int restore_curseg_summaries(struct f2fs_sb_info *sbi)
-{
-	int type = CURSEG_HOT_DATA;
-	int err;
-
-	if (is_set_ckpt_flags(sbi, CP_COMPACT_SUM_FLAG)) {
-		int npages = npages_for_summary_flush(sbi, true);
-
-		if (npages >= 2)
-			ra_meta_pages(sbi, start_sum_block(sbi), npages,
-							META_CP, true);
-
-		/* restore for compacted data summary */
-		if (read_compacted_summaries(sbi))
-			return -EINVAL;
-		type = CURSEG_HOT_NODE;
-	}
-
-	if (__exist_node_summaries(sbi))
-		ra_meta_pages(sbi, sum_blk_addr(sbi, NR_CURSEG_TYPE, type),
-					NR_CURSEG_TYPE - type, META_CP, true);
-
-	for (; type <= CURSEG_COLD_NODE; type++) {
-		err = read_normal_summaries(sbi, type);
-		if (err)
-			return err;
-	}
-
-	return 0;
-}
-
-static void write_compacted_summaries(struct f2fs_sb_info *sbi, block_t blkaddr)
-{
-	struct page *page;
-	unsigned char *kaddr;
-	struct f2fs_summary *summary;
-	struct curseg_info *seg_i;
-	int written_size = 0;
-	int i, j;
-
-	page = grab_meta_page(sbi, blkaddr++);
-	kaddr = (unsigned char *)page_address(page);
-
-	/* Step 1: write nat cache */
-	seg_i = CURSEG_I(sbi, CURSEG_HOT_DATA);
-	memcpy(kaddr, seg_i->journal, SUM_JOURNAL_SIZE);
-	written_size += SUM_JOURNAL_SIZE;
-
-	/* Step 2: write sit cache */
-	seg_i = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	memcpy(kaddr + written_size, seg_i->journal, SUM_JOURNAL_SIZE);
-	written_size += SUM_JOURNAL_SIZE;
-
-	/* Step 3: write summary entries */
-	for (i = CURSEG_HOT_DATA; i <= CURSEG_COLD_DATA; i++) {
-		unsigned short blkoff;
-		seg_i = CURSEG_I(sbi, i);
-		if (sbi->ckpt->alloc_type[i] == SSR)
-			blkoff = sbi->blocks_per_seg;
-		else
-			blkoff = curseg_blkoff(sbi, i);
-
-		for (j = 0; j < blkoff; j++) {
-			if (!page) {
-				page = grab_meta_page(sbi, blkaddr++);
-				kaddr = (unsigned char *)page_address(page);
-				written_size = 0;
-			}
-			summary = (struct f2fs_summary *)(kaddr + written_size);
-			*summary = seg_i->sum_blk->entries[j];
-			written_size += SUMMARY_SIZE;
-
-			if (written_size + SUMMARY_SIZE <= PAGE_SIZE -
-							SUM_FOOTER_SIZE)
-				continue;
-
-			set_page_dirty(page);
-			f2fs_put_page(page, 1);
-			page = NULL;
-		}
-	}
-	if (page) {
-		set_page_dirty(page);
-		f2fs_put_page(page, 1);
-	}
-}
-
-static void write_normal_summaries(struct f2fs_sb_info *sbi,
-					block_t blkaddr, int type)
-{
-	int i, end;
-	if (IS_DATASEG(type))
-		end = type + NR_CURSEG_DATA_TYPE;
-	else
-		end = type + NR_CURSEG_NODE_TYPE;
-
-	for (i = type; i < end; i++)
-		write_current_sum_page(sbi, i, blkaddr + (i - type));
-}
-
-void write_data_summaries(struct f2fs_sb_info *sbi, block_t start_blk)
-{
-	if (is_set_ckpt_flags(sbi, CP_COMPACT_SUM_FLAG))
-		write_compacted_summaries(sbi, start_blk);
-	else
-		write_normal_summaries(sbi, start_blk, CURSEG_HOT_DATA);
-}
-
-void write_node_summaries(struct f2fs_sb_info *sbi, block_t start_blk)
-{
-	write_normal_summaries(sbi, start_blk, CURSEG_HOT_NODE);
-}
-
-int lookup_journal_in_cursum(struct f2fs_journal *journal, int type,
-					unsigned int val, int alloc)
-{
-	int i;
-
-	if (type == NAT_JOURNAL) {
-		for (i = 0; i < nats_in_cursum(journal); i++) {
-			if (le32_to_cpu(nid_in_journal(journal, i)) == val)
-				return i;
-		}
-		if (alloc && __has_cursum_space(journal, 1, NAT_JOURNAL))
-			return update_nats_in_cursum(journal, 1);
-	} else if (type == SIT_JOURNAL) {
-		for (i = 0; i < sits_in_cursum(journal); i++)
-			if (le32_to_cpu(segno_in_journal(journal, i)) == val)
-				return i;
-		if (alloc && __has_cursum_space(journal, 1, SIT_JOURNAL))
-			return update_sits_in_cursum(journal, 1);
-	}
-	return -1;
-}
-
-static struct page *get_current_sit_page(struct f2fs_sb_info *sbi,
-					unsigned int segno)
-{
-	return get_meta_page(sbi, current_sit_addr(sbi, segno));
-}
-
-static struct page *get_next_sit_page(struct f2fs_sb_info *sbi,
-					unsigned int start)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct page *src_page, *dst_page;
-	pgoff_t src_off, dst_off;
-	void *src_addr, *dst_addr;
-
-	src_off = current_sit_addr(sbi, start);
-	dst_off = next_sit_addr(sbi, src_off);
-
-	/* get current sit block page without lock */
-	src_page = get_meta_page(sbi, src_off);
-	dst_page = grab_meta_page(sbi, dst_off);
-	f2fs_bug_on(sbi, PageDirty(src_page));
-
-	src_addr = page_address(src_page);
-	dst_addr = page_address(dst_page);
-	memcpy(dst_addr, src_addr, PAGE_SIZE);
-
-	set_page_dirty(dst_page);
-	f2fs_put_page(src_page, 1);
-
-	set_to_next_sit(sit_i, start);
-
-	return dst_page;
-}
-
-static struct sit_entry_set *grab_sit_entry_set(void)
-{
-	struct sit_entry_set *ses =
-			f2fs_kmem_cache_alloc(sit_entry_set_slab, GFP_NOFS);
-
-	ses->entry_cnt = 0;
-	INIT_LIST_HEAD(&ses->set_list);
-	return ses;
-}
-
-static void release_sit_entry_set(struct sit_entry_set *ses)
-{
-	list_del(&ses->set_list);
-	kmem_cache_free(sit_entry_set_slab, ses);
-}
-
-static void adjust_sit_entry_set(struct sit_entry_set *ses,
-						struct list_head *head)
-{
-	struct sit_entry_set *next = ses;
-
-	if (list_is_last(&ses->set_list, head))
-		return;
-
-	list_for_each_entry_continue(next, head, set_list)
-		if (ses->entry_cnt <= next->entry_cnt)
-			break;
-
-	list_move_tail(&ses->set_list, &next->set_list);
-}
-
-static void add_sit_entry(unsigned int segno, struct list_head *head)
-{
-	struct sit_entry_set *ses;
-	unsigned int start_segno = START_SEGNO(segno);
-
-	list_for_each_entry(ses, head, set_list) {
-		if (ses->start_segno == start_segno) {
-			ses->entry_cnt++;
-			adjust_sit_entry_set(ses, head);
-			return;
-		}
-	}
-
-	ses = grab_sit_entry_set();
-
-	ses->start_segno = start_segno;
-	ses->entry_cnt++;
-	list_add(&ses->set_list, head);
-}
-
-static void add_sits_in_set(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_sm_info *sm_info = SM_I(sbi);
-	struct list_head *set_list = &sm_info->sit_entry_set;
-	unsigned long *bitmap = SIT_I(sbi)->dirty_sentries_bitmap;
-	unsigned int segno;
-
-	for_each_set_bit(segno, bitmap, MAIN_SEGS(sbi))
-		add_sit_entry(segno, set_list);
-}
-
-static void remove_sits_in_journal(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	int i;
-
-	down_write(&curseg->journal_rwsem);
-	for (i = 0; i < sits_in_cursum(journal); i++) {
-		unsigned int segno;
-		bool dirtied;
-
-		segno = le32_to_cpu(segno_in_journal(journal, i));
-		dirtied = __mark_sit_entry_dirty(sbi, segno);
-
-		if (!dirtied)
-			add_sit_entry(segno, &SM_I(sbi)->sit_entry_set);
-	}
-	update_sits_in_cursum(journal, -i);
-	up_write(&curseg->journal_rwsem);
-}
-
-/*
- * CP calls this function, which flushes SIT entries including sit_journal,
- * and moves prefree segs to free segs.
- */
-void flush_sit_entries(struct f2fs_sb_info *sbi, struct cp_control *cpc)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned long *bitmap = sit_i->dirty_sentries_bitmap;
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	struct sit_entry_set *ses, *tmp;
-	struct list_head *head = &SM_I(sbi)->sit_entry_set;
-	bool to_journal = true;
-	struct seg_entry *se;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	if (!sit_i->dirty_sentries)
-		goto out;
-
-	/*
-	 * add and account sit entries of dirty bitmap in sit entry
-	 * set temporarily
-	 */
-	add_sits_in_set(sbi);
-
-	/*
-	 * if there are no enough space in journal to store dirty sit
-	 * entries, remove all entries from journal and add and account
-	 * them in sit entry set.
-	 */
-	if (!__has_cursum_space(journal, sit_i->dirty_sentries, SIT_JOURNAL))
-		remove_sits_in_journal(sbi);
-
-	/*
-	 * there are two steps to flush sit entries:
-	 * #1, flush sit entries to journal in current cold data summary block.
-	 * #2, flush sit entries to sit page.
-	 */
-	list_for_each_entry_safe(ses, tmp, head, set_list) {
-		struct page *page = NULL;
-		struct f2fs_sit_block *raw_sit = NULL;
-		unsigned int start_segno = ses->start_segno;
-		unsigned int end = min(start_segno + SIT_ENTRY_PER_BLOCK,
-						(unsigned long)MAIN_SEGS(sbi));
-		unsigned int segno = start_segno;
-
-		if (to_journal &&
-			!__has_cursum_space(journal, ses->entry_cnt, SIT_JOURNAL))
-			to_journal = false;
-
-		if (to_journal) {
-			down_write(&curseg->journal_rwsem);
-		} else {
-			page = get_next_sit_page(sbi, start_segno);
-			raw_sit = page_address(page);
-		}
-
-		/* flush dirty sit entries in region of current sit set */
-		for_each_set_bit_from(segno, bitmap, end) {
-			int offset, sit_offset;
-
-			se = get_seg_entry(sbi, segno);
-
-			/* add discard candidates */
-			if (cpc->reason != CP_DISCARD) {
-				cpc->trim_start = segno;
-				add_discard_addrs(sbi, cpc);
-			}
-
-			if (to_journal) {
-				offset = lookup_journal_in_cursum(journal,
-							SIT_JOURNAL, segno, 1);
-				f2fs_bug_on(sbi, offset < 0);
-				segno_in_journal(journal, offset) =
-							cpu_to_le32(segno);
-				seg_info_to_raw_sit(se,
-					&sit_in_journal(journal, offset));
-			} else {
-				sit_offset = SIT_ENTRY_OFFSET(sit_i, segno);
-				seg_info_to_raw_sit(se,
-						&raw_sit->entries[sit_offset]);
-			}
-
-			__clear_bit(segno, bitmap);
-			sit_i->dirty_sentries--;
-			ses->entry_cnt--;
-		}
-
-		if (to_journal)
-			up_write(&curseg->journal_rwsem);
-		else
-			f2fs_put_page(page, 1);
-
-		f2fs_bug_on(sbi, ses->entry_cnt);
-		release_sit_entry_set(ses);
-	}
-
-	f2fs_bug_on(sbi, !list_empty(head));
-	f2fs_bug_on(sbi, sit_i->dirty_sentries);
-out:
-	if (cpc->reason == CP_DISCARD) {
-		for (; cpc->trim_start <= cpc->trim_end; cpc->trim_start++)
-			add_discard_addrs(sbi, cpc);
-	}
-	mutex_unlock(&sit_i->sentry_lock);
-
-	set_prefree_as_free_segments(sbi);
-}
-
-static int build_sit_info(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_super_block *raw_super = F2FS_RAW_SUPER(sbi);
-	struct sit_info *sit_i;
-	unsigned int sit_segs, start;
-	char *src_bitmap, *dst_bitmap;
-	unsigned int bitmap_size;
-
-	/* allocate memory for SIT information */
-	sit_i = kzalloc(sizeof(struct sit_info), GFP_KERNEL);
-	if (!sit_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->sit_info = sit_i;
-
-	sit_i->sentries = f2fs_kvzalloc(MAIN_SEGS(sbi) *
-					sizeof(struct seg_entry), GFP_KERNEL);
-	if (!sit_i->sentries)
-		return -ENOMEM;
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-	sit_i->dirty_sentries_bitmap = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-	if (!sit_i->dirty_sentries_bitmap)
-		return -ENOMEM;
-
-	for (start = 0; start < MAIN_SEGS(sbi); start++) {
-		sit_i->sentries[start].cur_valid_map
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		sit_i->sentries[start].ckpt_valid_map
-			= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-		if (!sit_i->sentries[start].cur_valid_map ||
-				!sit_i->sentries[start].ckpt_valid_map)
-			return -ENOMEM;
-
-		if (f2fs_discard_en(sbi)) {
-			sit_i->sentries[start].discard_map
-				= kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-			if (!sit_i->sentries[start].discard_map)
-				return -ENOMEM;
-		}
-	}
-
-	sit_i->tmp_map = kzalloc(SIT_VBLOCK_MAP_SIZE, GFP_KERNEL);
-	if (!sit_i->tmp_map)
-		return -ENOMEM;
-
-	if (sbi->segs_per_sec > 1) {
-		sit_i->sec_entries = f2fs_kvzalloc(MAIN_SECS(sbi) *
-					sizeof(struct sec_entry), GFP_KERNEL);
-		if (!sit_i->sec_entries)
-			return -ENOMEM;
-	}
-
-	/* get information related with SIT */
-	sit_segs = le32_to_cpu(raw_super->segment_count_sit) >> 1;
-
-	/* setup SIT bitmap from ckeckpoint pack */
-	bitmap_size = __bitmap_size(sbi, SIT_BITMAP);
-	src_bitmap = __bitmap_ptr(sbi, SIT_BITMAP);
-
-	dst_bitmap = kmemdup(src_bitmap, bitmap_size, GFP_KERNEL);
-	if (!dst_bitmap)
-		return -ENOMEM;
-
-	/* init SIT information */
-	sit_i->s_ops = &default_salloc_ops;
-
-	sit_i->sit_base_addr = le32_to_cpu(raw_super->sit_blkaddr);
-	sit_i->sit_blocks = sit_segs << sbi->log_blocks_per_seg;
-	sit_i->written_valid_blocks = 0;
-	sit_i->sit_bitmap = dst_bitmap;
-	sit_i->bitmap_size = bitmap_size;
-	sit_i->dirty_sentries = 0;
-	sit_i->sents_per_block = SIT_ENTRY_PER_BLOCK;
-	sit_i->elapsed_time = le64_to_cpu(sbi->ckpt->elapsed_time);
-	sit_i->mounted_time = CURRENT_TIME_SEC.tv_sec;
-	mutex_init(&sit_i->sentry_lock);
-	return 0;
-}
-
-static int build_free_segmap(struct f2fs_sb_info *sbi)
-{
-	struct free_segmap_info *free_i;
-	unsigned int bitmap_size, sec_bitmap_size;
-
-	/* allocate memory for free segmap information */
-	free_i = kzalloc(sizeof(struct free_segmap_info), GFP_KERNEL);
-	if (!free_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->free_info = free_i;
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-	free_i->free_segmap = f2fs_kvmalloc(bitmap_size, GFP_KERNEL);
-	if (!free_i->free_segmap)
-		return -ENOMEM;
-
-	sec_bitmap_size = f2fs_bitmap_size(MAIN_SECS(sbi));
-	free_i->free_secmap = f2fs_kvmalloc(sec_bitmap_size, GFP_KERNEL);
-	if (!free_i->free_secmap)
-		return -ENOMEM;
-
-	/* set all segments as dirty temporarily */
-	memset(free_i->free_segmap, 0xff, bitmap_size);
-	memset(free_i->free_secmap, 0xff, sec_bitmap_size);
-
-	/* init free segmap information */
-	free_i->start_segno = GET_SEGNO_FROM_SEG0(sbi, MAIN_BLKADDR(sbi));
-	free_i->free_segments = 0;
-	free_i->free_sections = 0;
-	spin_lock_init(&free_i->segmap_lock);
-	return 0;
-}
-
-static int build_curseg(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *array;
-	int i;
-
-	array = kcalloc(NR_CURSEG_TYPE, sizeof(*array), GFP_KERNEL);
-	if (!array)
-		return -ENOMEM;
-
-	SM_I(sbi)->curseg_array = array;
-
-	for (i = 0; i < NR_CURSEG_TYPE; i++) {
-		mutex_init(&array[i].curseg_mutex);
-		array[i].sum_blk = kzalloc(PAGE_SIZE, GFP_KERNEL);
-		if (!array[i].sum_blk)
-			return -ENOMEM;
-		init_rwsem(&array[i].journal_rwsem);
-		array[i].journal = kzalloc(sizeof(struct f2fs_journal),
-							GFP_KERNEL);
-		if (!array[i].journal)
-			return -ENOMEM;
-		array[i].segno = NULL_SEGNO;
-		array[i].next_blkoff = 0;
-	}
-	return restore_curseg_summaries(sbi);
-}
-
-static void build_sit_entries(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	struct curseg_info *curseg = CURSEG_I(sbi, CURSEG_COLD_DATA);
-	struct f2fs_journal *journal = curseg->journal;
-	struct seg_entry *se;
-	struct f2fs_sit_entry sit;
-	int sit_blk_cnt = SIT_BLK_CNT(sbi);
-	unsigned int i, start, end;
-	unsigned int readed, start_blk = 0;
-
-	do {
-		readed = ra_meta_pages(sbi, start_blk, BIO_MAX_PAGES,
-							META_SIT, true);
-
-		start = start_blk * sit_i->sents_per_block;
-		end = (start_blk + readed) * sit_i->sents_per_block;
-
-		for (; start < end && start < MAIN_SEGS(sbi); start++) {
-			struct f2fs_sit_block *sit_blk;
-			struct page *page;
-
-			se = &sit_i->sentries[start];
-			page = get_current_sit_page(sbi, start);
-			sit_blk = (struct f2fs_sit_block *)page_address(page);
-			sit = sit_blk->entries[SIT_ENTRY_OFFSET(sit_i, start)];
-			f2fs_put_page(page, 1);
-
-			check_block_count(sbi, start, &sit);
-			seg_info_from_raw_sit(se, &sit);
-
-			/* build discard map only one time */
-			if (f2fs_discard_en(sbi)) {
-				memcpy(se->discard_map, se->cur_valid_map,
-							SIT_VBLOCK_MAP_SIZE);
-				sbi->discard_blks += sbi->blocks_per_seg -
-							se->valid_blocks;
-			}
-
-			if (sbi->segs_per_sec > 1)
-				get_sec_entry(sbi, start)->valid_blocks +=
-							se->valid_blocks;
-		}
-		start_blk += readed;
-	} while (start_blk < sit_blk_cnt);
-
-	down_read(&curseg->journal_rwsem);
-	for (i = 0; i < sits_in_cursum(journal); i++) {
-		unsigned int old_valid_blocks;
-
-		start = le32_to_cpu(segno_in_journal(journal, i));
-		se = &sit_i->sentries[start];
-		sit = sit_in_journal(journal, i);
-
-		old_valid_blocks = se->valid_blocks;
-
-		check_block_count(sbi, start, &sit);
-		seg_info_from_raw_sit(se, &sit);
-
-		if (f2fs_discard_en(sbi)) {
-			memcpy(se->discard_map, se->cur_valid_map,
-						SIT_VBLOCK_MAP_SIZE);
-			sbi->discard_blks += old_valid_blocks -
-						se->valid_blocks;
-		}
-
-		if (sbi->segs_per_sec > 1)
-			get_sec_entry(sbi, start)->valid_blocks +=
-				se->valid_blocks - old_valid_blocks;
-	}
-	up_read(&curseg->journal_rwsem);
-}
-
-static void init_free_segmap(struct f2fs_sb_info *sbi)
-{
-	unsigned int start;
-	int type;
-
-	for (start = 0; start < MAIN_SEGS(sbi); start++) {
-		struct seg_entry *sentry = get_seg_entry(sbi, start);
-		if (!sentry->valid_blocks)
-			__set_free(sbi, start);
-		else
-			SIT_I(sbi)->written_valid_blocks +=
-						sentry->valid_blocks;
-	}
-
-	/* set use the current segments */
-	for (type = CURSEG_HOT_DATA; type <= CURSEG_COLD_NODE; type++) {
-		struct curseg_info *curseg_t = CURSEG_I(sbi, type);
-		__set_test_and_inuse(sbi, curseg_t->segno);
-	}
-}
-
-static void init_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	struct free_segmap_info *free_i = FREE_I(sbi);
-	unsigned int segno = 0, offset = 0;
-	unsigned short valid_blocks;
-
-	while (1) {
-		/* find dirty segment based on free segmap */
-		segno = find_next_inuse(free_i, MAIN_SEGS(sbi), offset);
-		if (segno >= MAIN_SEGS(sbi))
-			break;
-		offset = segno + 1;
-		valid_blocks = get_valid_blocks(sbi, segno, 0);
-		if (valid_blocks == sbi->blocks_per_seg || !valid_blocks)
-			continue;
-		if (valid_blocks > sbi->blocks_per_seg) {
-			f2fs_bug_on(sbi, 1);
-			continue;
-		}
-		mutex_lock(&dirty_i->seglist_lock);
-		__locate_dirty_segment(sbi, segno, DIRTY);
-		mutex_unlock(&dirty_i->seglist_lock);
-	}
-}
-
-static int init_victim_secmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	unsigned int bitmap_size = f2fs_bitmap_size(MAIN_SECS(sbi));
-
-	dirty_i->victim_secmap = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-	if (!dirty_i->victim_secmap)
-		return -ENOMEM;
-	return 0;
-}
-
-static int build_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i;
-	unsigned int bitmap_size, i;
-
-	/* allocate memory for dirty segments list information */
-	dirty_i = kzalloc(sizeof(struct dirty_seglist_info), GFP_KERNEL);
-	if (!dirty_i)
-		return -ENOMEM;
-
-	SM_I(sbi)->dirty_info = dirty_i;
-	mutex_init(&dirty_i->seglist_lock);
-
-	bitmap_size = f2fs_bitmap_size(MAIN_SEGS(sbi));
-
-	for (i = 0; i < NR_DIRTY_TYPE; i++) {
-		dirty_i->dirty_segmap[i] = f2fs_kvzalloc(bitmap_size, GFP_KERNEL);
-		if (!dirty_i->dirty_segmap[i])
-			return -ENOMEM;
-	}
-
-	init_dirty_segmap(sbi);
-	return init_victim_secmap(sbi);
-}
-
-/*
- * Update min, max modified time for cost-benefit GC algorithm
- */
-static void init_min_max_mtime(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int segno;
-
-	mutex_lock(&sit_i->sentry_lock);
-
-	sit_i->min_mtime = LLONG_MAX;
-
-	for (segno = 0; segno < MAIN_SEGS(sbi); segno += sbi->segs_per_sec) {
-		unsigned int i;
-		unsigned long long mtime = 0;
-
-		for (i = 0; i < sbi->segs_per_sec; i++)
-			mtime += get_seg_entry(sbi, segno + i)->mtime;
-
-		mtime = div_u64(mtime, sbi->segs_per_sec);
-
-		if (sit_i->min_mtime > mtime)
-			sit_i->min_mtime = mtime;
-	}
-	sit_i->max_mtime = get_mtime(sbi);
-	mutex_unlock(&sit_i->sentry_lock);
-}
-
-int build_segment_manager(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_super_block *raw_super = F2FS_RAW_SUPER(sbi);
-	struct f2fs_checkpoint *ckpt = F2FS_CKPT(sbi);
-	struct f2fs_sm_info *sm_info;
-	int err;
-
-	sm_info = kzalloc(sizeof(struct f2fs_sm_info), GFP_KERNEL);
-	if (!sm_info)
-		return -ENOMEM;
-
-	/* init sm info */
-	sbi->sm_info = sm_info;
-	sm_info->seg0_blkaddr = le32_to_cpu(raw_super->segment0_blkaddr);
-	sm_info->main_blkaddr = le32_to_cpu(raw_super->main_blkaddr);
-	sm_info->segment_count = le32_to_cpu(raw_super->segment_count);
-	sm_info->reserved_segments = le32_to_cpu(ckpt->rsvd_segment_count);
-	sm_info->ovp_segments = le32_to_cpu(ckpt->overprov_segment_count);
-	sm_info->main_segments = le32_to_cpu(raw_super->segment_count_main);
-	sm_info->ssa_blkaddr = le32_to_cpu(raw_super->ssa_blkaddr);
-	sm_info->rec_prefree_segments = sm_info->main_segments *
-					DEF_RECLAIM_PREFREE_SEGMENTS / 100;
-	if (sm_info->rec_prefree_segments > DEF_MAX_RECLAIM_PREFREE_SEGMENTS)
-		sm_info->rec_prefree_segments = DEF_MAX_RECLAIM_PREFREE_SEGMENTS;
-
-	if (!test_opt(sbi, LFS))
-		sm_info->ipu_policy = 1 << F2FS_IPU_FSYNC;
-	sm_info->min_ipu_util = DEF_MIN_IPU_UTIL;
-	sm_info->min_fsync_blocks = DEF_MIN_FSYNC_BLOCKS;
-
-	INIT_LIST_HEAD(&sm_info->discard_list);
-	sm_info->nr_discards = 0;
-	sm_info->max_discards = 0;
-
-	sm_info->trim_sections = DEF_BATCHED_TRIM_SECTIONS;
-
-	INIT_LIST_HEAD(&sm_info->sit_entry_set);
-
-	if (!f2fs_readonly(sbi->sb)) {
-		err = create_flush_cmd_control(sbi);
-		if (err)
-			return err;
-	}
-
-	err = build_sit_info(sbi);
-	if (err)
-		return err;
-	err = build_free_segmap(sbi);
-	if (err)
-		return err;
-	err = build_curseg(sbi);
-	if (err)
-		return err;
-
-	/* reinit free segmap based on SIT */
-	build_sit_entries(sbi);
-
-	init_free_segmap(sbi);
-	err = build_dirty_segmap(sbi);
-	if (err)
-		return err;
-
-	init_min_max_mtime(sbi);
-	return 0;
-}
-
-static void discard_dirty_segmap(struct f2fs_sb_info *sbi,
-		enum dirty_type dirty_type)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-
-	mutex_lock(&dirty_i->seglist_lock);
-	f2fs_kvfree(dirty_i->dirty_segmap[dirty_type]);
-	dirty_i->nr_dirty[dirty_type] = 0;
-	mutex_unlock(&dirty_i->seglist_lock);
-}
-
-static void destroy_victim_secmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	f2fs_kvfree(dirty_i->victim_secmap);
-}
-
-static void destroy_dirty_segmap(struct f2fs_sb_info *sbi)
-{
-	struct dirty_seglist_info *dirty_i = DIRTY_I(sbi);
-	int i;
-
-	if (!dirty_i)
-		return;
-
-	/* discard pre-free/dirty segments list */
-	for (i = 0; i < NR_DIRTY_TYPE; i++)
-		discard_dirty_segmap(sbi, i);
-
-	destroy_victim_secmap(sbi);
-	SM_I(sbi)->dirty_info = NULL;
-	kfree(dirty_i);
-}
-
-static void destroy_curseg(struct f2fs_sb_info *sbi)
-{
-	struct curseg_info *array = SM_I(sbi)->curseg_array;
-	int i;
-
-	if (!array)
-		return;
-	SM_I(sbi)->curseg_array = NULL;
-	for (i = 0; i < NR_CURSEG_TYPE; i++) {
-		kfree(array[i].sum_blk);
-		kfree(array[i].journal);
-	}
-	kfree(array);
-}
-
-static void destroy_free_segmap(struct f2fs_sb_info *sbi)
-{
-	struct free_segmap_info *free_i = SM_I(sbi)->free_info;
-	if (!free_i)
-		return;
-	SM_I(sbi)->free_info = NULL;
-	f2fs_kvfree(free_i->free_segmap);
-	f2fs_kvfree(free_i->free_secmap);
-	kfree(free_i);
-}
-
-static void destroy_sit_info(struct f2fs_sb_info *sbi)
-{
-	struct sit_info *sit_i = SIT_I(sbi);
-	unsigned int start;
-
-	if (!sit_i)
-		return;
-
-	if (sit_i->sentries) {
-		for (start = 0; start < MAIN_SEGS(sbi); start++) {
-			kfree(sit_i->sentries[start].cur_valid_map);
-			kfree(sit_i->sentries[start].ckpt_valid_map);
-			kfree(sit_i->sentries[start].discard_map);
-		}
-	}
-	kfree(sit_i->tmp_map);
-
-	f2fs_kvfree(sit_i->sentries);
-	f2fs_kvfree(sit_i->sec_entries);
-	f2fs_kvfree(sit_i->dirty_sentries_bitmap);
-
-	SM_I(sbi)->sit_info = NULL;
-	kfree(sit_i->sit_bitmap);
-	kfree(sit_i);
-}
-
-void destroy_segment_manager(struct f2fs_sb_info *sbi)
-{
-	struct f2fs_sm_info *sm_info = SM_I(sbi);
-
-	if (!sm_info)
-		return;
-	destroy_flush_cmd_control(sbi, true);
-	destroy_dirty_segmap(sbi);
-	destroy_curseg(sbi);
-	destroy_free_segmap(sbi);
-	destroy_sit_info(sbi);
-	sbi->sm_info = NULL;
-	kfree(sm_info);
-}
-
-int __init create_segment_manager_caches(void)
-{
-	discard_entry_slab = f2fs_kmem_cache_create("discard_entry",
-			sizeof(struct discard_entry));
-	if (!discard_entry_slab)
-		goto fail;
-
-	sit_entry_set_slab = f2fs_kmem_cache_create("sit_entry_set",
-			sizeof(struct sit_entry_set));
-	if (!sit_entry_set_slab)
-		goto destory_discard_entry;
-
-	inmem_entry_slab = f2fs_kmem_cache_create("inmem_page_entry",
-			sizeof(struct inmem_pages));
-	if (!inmem_entry_slab)
-		goto destroy_sit_entry_set;
-	return 0;
-
-destroy_sit_entry_set:
-	kmem_cache_destroy(sit_entry_set_slab);
-destory_discard_entry:
-	kmem_cache_destroy(discard_entry_slab);
-fail:
-	return -ENOMEM;
-}
-
-void destroy_segment_manager_caches(void)
-{
-	kmem_cache_destroy(sit_entry_set_slab);
-	kmem_cache_destroy(discard_entry_slab);
-	kmem_cache_destroy(inmem_entry_slab);
-}
diff --git a/fs/f2fs/segment.o_shipped b/fs/f2fs/segment.o_shipped
new file mode 100644
index 0000000000000000000000000000000000000000..32176ce475d5dd993a0190aa6c6b348adb762781
GIT binary patch
literal 47532
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
WUL{BB?>5BUc2(-~XKDmfyMF*-s8tdG

literal 0
HcmV?d00001

diff --git a/sound/soc/codecs/wcd9320.c b/sound/soc/codecs/wcd9320.c
deleted file mode 100644
index 6713ef7c03cb..000000000000
--- a/sound/soc/codecs/wcd9320.c
+++ /dev/null
@@ -1,7813 +0,0 @@
-/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/firmware.h>
-#include <linux/slab.h>
-#include <linux/platform_device.h>
-#include <linux/device.h>
-#include <linux/printk.h>
-#include <linux/ratelimit.h>
-#include <linux/debugfs.h>
-#include <linux/wait.h>
-#include <linux/mfd/wcd9xxx/core.h>
-#include <linux/mfd/wcd9xxx/wcd9xxx_registers.h>
-#include <linux/mfd/wcd9xxx/wcd9320_registers.h>
-#include <linux/mfd/wcd9xxx/pdata.h>
-#include <linux/regulator/consumer.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-#include <sound/soc-dapm.h>
-#include <sound/tlv.h>
-#include <linux/bitops.h>
-#include <linux/delay.h>
-#include <linux/pm_runtime.h>
-#include <linux/kernel.h>
-#include <linux/gpio.h>
-#include <linux/pm_qos.h>
-#include <linux/pm.h>
-#include <mach/cpuidle.h>
-#include "wcd9320.h"
-#include "wcd9xxx-resmgr.h"
-#include "wcd9xxx-common.h"
-#include "wcdcal-hwdep.h"
-
-#if defined(CONFIG_SND_SOC_ES705)
-#include "audience/es705-export.h"
-#elif defined(CONFIG_SND_SOC_ES325)
-#include "es325-export.h"
-#endif
-
-#if defined(CONFIG_SND_SOC_ES705)
-
-#define CONFIG_SND_SOC_ESXXX
-#define REMOTE_ROUTE_ENABLE_CB  es705_remote_route_enable
-#define SLIM_GET_CHANNEL_MAP_CB es705_slim_get_channel_map
-#define SLIM_SET_CHANNEL_MAP_CB es705_slim_set_channel_map
-#define SLIM_HW_PARAMS_CB       es705_slim_hw_params
-#define REMOTE_CFG_SLIM_RX_CB	es705_remote_cfg_slim_rx
-#define REMOTE_CLOSE_SLIM_RX_CB	es705_remote_close_slim_rx
-#define REMOTE_CFG_SLIM_TX_CB	es705_remote_cfg_slim_tx
-#define REMOTE_CLOSE_SLIM_TX_CB	es705_remote_close_slim_tx
-#define REMOTE_ADD_CODEC_CONTROLS_CB	es705_remote_add_codec_controls
-#endif
-
-#define TAIKO_MAD_SLIMBUS_TX_PORT 12
-#define TAIKO_MAD_AUDIO_FIRMWARE_PATH "wcd9320/wcd9320_mad_audio.bin"
-#define TAIKO_VALIDATE_RX_SBPORT_RANGE(port) ((port >= 16) && (port <= 22))
-#define TAIKO_CONVERT_RX_SBPORT_ID(port) (port - 16) /* RX1 port ID = 0 */
-
-#define TAIKO_HPH_PA_SETTLE_COMP_ON 3000
-#define TAIKO_HPH_PA_SETTLE_COMP_OFF 13000
-
-#define DAPM_MICBIAS2_EXTERNAL_STANDALONE "MIC BIAS2 External Standalone"
-#define DAPM_MICBIAS3_EXTERNAL_STANDALONE "MIC BIAS3 External Standalone"
-
-/* RX_HPH_CNP_WG_TIME increases by 0.24ms */
-#define TAIKO_WG_TIME_FACTOR_US	240
-
-static atomic_t kp_taiko_priv;
-static int spkr_drv_wrnd_param_set(const char *val,
-				   const struct kernel_param *kp);
-static int spkr_drv_wrnd = 1;
-
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-static int sub_mic_rec_delay = 0;
-#endif
-
-static struct kernel_param_ops spkr_drv_wrnd_param_ops = {
-	.set = spkr_drv_wrnd_param_set,
-	.get = param_get_int,
-};
-
-static struct afe_param_slimbus_slave_port_cfg taiko_slimbus_slave_port_cfg = {
-	.minor_version = 1,
-	.slimbus_dev_id = AFE_SLIMBUS_DEVICE_1,
-	.slave_dev_pgd_la = 0,
-	.slave_dev_intfdev_la = 0,
-	.bit_width = 16,
-	.data_format = 0,
-	.num_channels = 1
-};
-
-static struct afe_param_cdc_reg_cfg audio_reg_cfg[] = {
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_MAD_MAIN_CTL_1),
-		HW_MAD_AUDIO_ENABLE, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_MAD_AUDIO_CTL_3),
-		HW_MAD_AUDIO_SLEEP_TIME, 0xF, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_MAD_AUDIO_CTL_4),
-		HW_MAD_TX_AUDIO_SWITCH_OFF, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_DESTN3),
-		MAD_AUDIO_INT_DEST_SELECT_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_MASK3),
-		MAD_AUDIO_INT_MASK_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_STATUS3),
-		MAD_AUDIO_INT_STATUS_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_CLEAR3),
-		MAD_AUDIO_INT_CLEAR_REG, 0x1, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_TX_BASE),
-		SB_PGD_PORT_TX_WATERMARK_N, 0x1E, 8, 0x1
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_TX_BASE),
-		SB_PGD_PORT_TX_ENABLE_N, 0x1, 8, 0x1
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_RX_BASE),
-		SB_PGD_PORT_RX_WATERMARK_N, 0x1E, 8, 0x1
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_SB_PGD_PORT_RX_BASE),
-		SB_PGD_PORT_RX_ENABLE_N, 0x1, 8, 0x1
-	},
-	{	1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_ANC1_IIR_B1_CTL),
-		AANC_FF_GAIN_ADAPTIVE, 0x4, 8, 0
-	},
-	{	1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_ANC1_IIR_B1_CTL),
-		AANC_FFGAIN_ADAPTIVE_EN, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_ANC1_GAIN_CTL),
-		AANC_GAIN_CONTROL, 0xFF, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_DESTN3),
-		MAD_CLIP_INT_DEST_SELECT_REG, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_MASK3),
-		MAD_CLIP_INT_MASK_REG, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_STATUS3),
-		MAD_CLIP_INT_STATUS_REG, 0x8, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_INTR_CLEAR3),
-		MAD_CLIP_INT_CLEAR_REG, 0x8, 8, 0
-	},
-};
-
-static struct afe_param_cdc_reg_cfg clip_reg_cfg[] = {
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_B1_CTL),
-		SPKR_CLIP_PIPE_BANK_SEL, 0x3, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL0),
-		SPKR_CLIPDET_VAL0, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL1),
-		SPKR_CLIPDET_VAL1, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL2),
-		SPKR_CLIPDET_VAL2, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL3),
-		SPKR_CLIPDET_VAL3, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL4),
-		SPKR_CLIPDET_VAL4, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL5),
-		SPKR_CLIPDET_VAL5, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL6),
-		SPKR_CLIPDET_VAL6, 0xff, 8, 0
-	},
-	{
-		1,
-		(TAIKO_REGISTER_START_OFFSET + TAIKO_A_CDC_SPKR_CLIPDET_VAL7),
-		SPKR_CLIPDET_VAL7, 0xff, 8, 0
-	},
-};
-
-static struct afe_param_cdc_reg_cfg_data taiko_audio_reg_cfg = {
-	.num_registers = ARRAY_SIZE(audio_reg_cfg),
-	.reg_data = audio_reg_cfg,
-};
-
-static struct afe_param_cdc_reg_cfg_data taiko_clip_reg_cfg = {
-	.num_registers = ARRAY_SIZE(clip_reg_cfg),
-	.reg_data = clip_reg_cfg,
-};
-
-static struct afe_param_id_cdc_aanc_version taiko_cdc_aanc_version = {
-	.cdc_aanc_minor_version = AFE_API_VERSION_CDC_AANC_VERSION,
-	.aanc_hw_version        = AANC_HW_BLOCK_VERSION_2,
-};
-
-static struct afe_param_id_clip_bank_sel clip_bank_sel = {
-	.minor_version = AFE_API_VERSION_CLIP_BANK_SEL_CFG,
-	.num_banks = AFE_CLIP_MAX_BANKS,
-	.bank_map = {0, 1, 2, 3},
-};
-
-module_param_cb(spkr_drv_wrnd, &spkr_drv_wrnd_param_ops, &spkr_drv_wrnd, 0644);
-MODULE_PARM_DESC(spkr_drv_wrnd,
-	       "Run software workaround to avoid leakage on the speaker drive");
-
-#define WCD9320_RATES (SNDRV_PCM_RATE_8000 | SNDRV_PCM_RATE_16000 |\
-			SNDRV_PCM_RATE_32000 | SNDRV_PCM_RATE_48000 |\
-			SNDRV_PCM_RATE_96000 | SNDRV_PCM_RATE_192000)
-
-#define NUM_DECIMATORS 10
-#define NUM_INTERPOLATORS 7
-#define BITS_PER_REG 8
-#define TAIKO_TX_PORT_NUMBER	16
-#define TAIKO_RX_PORT_START_NUMBER	16
-
-#define TAIKO_I2S_MASTER_MODE_MASK 0x08
-
-#define TAIKO_SLIM_CLOSE_TIMEOUT 1000
-#define TAIKO_SLIM_IRQ_OVERFLOW (1 << 0)
-#define TAIKO_SLIM_IRQ_UNDERFLOW (1 << 1)
-#define TAIKO_SLIM_IRQ_PORT_CLOSED (1 << 2)
-#define TAIKO_MCLK_CLK_12P288MHZ 12288000
-#define TAIKO_MCLK_CLK_9P6MHZ 9600000
-
-#define TAIKO_FORMATS_S16_S24_LE (SNDRV_PCM_FMTBIT_S16_LE | \
-			SNDRV_PCM_FORMAT_S24_LE)
-
-#define TAIKO_FORMATS (SNDRV_PCM_FMTBIT_S16_LE)
-
-#define TAIKO_SLIM_PGD_PORT_INT_TX_EN0 (TAIKO_SLIM_PGD_PORT_INT_EN0 + 2)
-
-enum {
-	AIF1_PB = 0,
-	AIF1_CAP,
-	AIF2_PB,
-	AIF2_CAP,
-	AIF3_PB,
-	AIF3_CAP,
-	AIF4_VIFEED,
-	AIF4_MAD_TX,
-	NUM_CODEC_DAIS,
-};
-
-enum {
-	RX_MIX1_INP_SEL_ZERO = 0,
-	RX_MIX1_INP_SEL_SRC1,
-	RX_MIX1_INP_SEL_SRC2,
-	RX_MIX1_INP_SEL_IIR1,
-	RX_MIX1_INP_SEL_IIR2,
-	RX_MIX1_INP_SEL_RX1,
-	RX_MIX1_INP_SEL_RX2,
-	RX_MIX1_INP_SEL_RX3,
-	RX_MIX1_INP_SEL_RX4,
-	RX_MIX1_INP_SEL_RX5,
-	RX_MIX1_INP_SEL_RX6,
-	RX_MIX1_INP_SEL_RX7,
-	RX_MIX1_INP_SEL_AUXRX,
-};
-
-#define TAIKO_COMP_DIGITAL_GAIN_OFFSET 3
-
-static const DECLARE_TLV_DB_SCALE(digital_gain, 0, 1, 0);
-static const DECLARE_TLV_DB_SCALE(line_gain, 0, 7, 1);
-static const DECLARE_TLV_DB_SCALE(analog_gain, 0, 25, 1);
-static struct snd_soc_dai_driver taiko_dai[];
-static const DECLARE_TLV_DB_SCALE(aux_pga_gain, 0, 2, 0);
-
-/* Codec supports 2 IIR filters */
-enum {
-	IIR1 = 0,
-	IIR2,
-	IIR_MAX,
-};
-/* Codec supports 5 bands */
-enum {
-	BAND1 = 0,
-	BAND2,
-	BAND3,
-	BAND4,
-	BAND5,
-	BAND_MAX,
-};
-
-enum {
-	COMPANDER_0,
-	COMPANDER_1,
-	COMPANDER_2,
-	COMPANDER_MAX,
-};
-
-enum {
-	COMPANDER_FS_8KHZ = 0,
-	COMPANDER_FS_16KHZ,
-	COMPANDER_FS_32KHZ,
-	COMPANDER_FS_48KHZ,
-	COMPANDER_FS_96KHZ,
-	COMPANDER_FS_192KHZ,
-	COMPANDER_FS_MAX,
-};
-
-struct comp_sample_dependent_params {
-	u32 peak_det_timeout;
-	u32 rms_meter_div_fact;
-	u32 rms_meter_resamp_fact;
-};
-
-struct hpf_work {
-	struct taiko_priv *taiko;
-	u32 decimator;
-	u8 tx_hpf_cut_of_freq;
-	struct delayed_work dwork;
-};
-
-static struct hpf_work tx_hpf_work[NUM_DECIMATORS];
-
-static const struct wcd9xxx_ch taiko_rx_chs[TAIKO_RX_MAX] = {
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER, 0),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 1, 1),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 2, 2),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 3, 3),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 4, 4),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 5, 5),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 6, 6),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 7, 7),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 8, 8),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 9, 9),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 10, 10),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 11, 11),
-	WCD9XXX_CH(TAIKO_RX_PORT_START_NUMBER + 12, 12),
-};
-
-static const struct wcd9xxx_ch taiko_tx_chs[TAIKO_TX_MAX] = {
-	WCD9XXX_CH(0, 0),
-	WCD9XXX_CH(1, 1),
-	WCD9XXX_CH(2, 2),
-	WCD9XXX_CH(3, 3),
-	WCD9XXX_CH(4, 4),
-	WCD9XXX_CH(5, 5),
-	WCD9XXX_CH(6, 6),
-	WCD9XXX_CH(7, 7),
-	WCD9XXX_CH(8, 8),
-	WCD9XXX_CH(9, 9),
-	WCD9XXX_CH(10, 10),
-	WCD9XXX_CH(11, 11),
-	WCD9XXX_CH(12, 12),
-	WCD9XXX_CH(13, 13),
-	WCD9XXX_CH(14, 14),
-	WCD9XXX_CH(15, 15),
-};
-
-static const u32 vport_check_table[NUM_CODEC_DAIS] = {
-	0,					/* AIF1_PB */
-	(1 << AIF2_CAP) | (1 << AIF3_CAP),	/* AIF1_CAP */
-	0,					/* AIF2_PB */
-	(1 << AIF1_CAP) | (1 << AIF3_CAP),	/* AIF2_CAP */
-	0,					/* AIF2_PB */
-	(1 << AIF1_CAP) | (1 << AIF2_CAP),	/* AIF2_CAP */
-};
-
-static const u32 vport_i2s_check_table[NUM_CODEC_DAIS] = {
-	0,	/* AIF1_PB */
-	0,	/* AIF1_CAP */
-	0,	/* AIF2_PB */
-	0,	/* AIF2_CAP */
-};
-
-struct taiko_priv {
-	struct snd_soc_codec *codec;
-	u32 adc_count;
-	u32 rx_bias_count;
-	s32 dmic_1_2_clk_cnt;
-	s32 dmic_3_4_clk_cnt;
-	s32 dmic_5_6_clk_cnt;
-	s32 ldo_h_users;
-	s32 micb_2_users;
-
-	u32 anc_slot;
-	bool anc_func;
-
-	/*track taiko interface type*/
-	u8 intf_type;
-
-	/* num of slim ports required */
-	struct wcd9xxx_codec_dai_data  dai[NUM_CODEC_DAIS];
-
-	/*compander*/
-	int comp_enabled[COMPANDER_MAX];
-	u32 comp_fs[COMPANDER_MAX];
-
-	/* Maintain the status of AUX PGA */
-	int aux_pga_cnt;
-	u8 aux_l_gain;
-	u8 aux_r_gain;
-
-	bool spkr_pa_widget_on;
-	struct regulator *spkdrv_reg;
-
-	bool mbhc_started;
-
-	struct afe_param_cdc_slimbus_slave_cfg slimbus_slave_cfg;
-
-	/* resmgr module */
-	struct wcd9xxx_resmgr resmgr;
-	/* mbhc module */
-	struct wcd9xxx_mbhc mbhc;
-
-	/* class h specific data */
-	struct wcd9xxx_clsh_cdc_data clsh_d;
-
-	int (*machine_codec_event_cb)(struct snd_soc_codec *codec,
-			enum wcd9xxx_codec_event);
-
-	/*
-	 * list used to save/restore registers at start and
-	 * end of impedance measurement
-	 */
-	struct list_head reg_save_restore;
-	struct pm_qos_request pm_qos_req;
-	/* cal info for codec */
-	struct fw_info *fw_data;
-};
-
-static const u32 comp_shift[] = {
-	4, /* Compander 0's clock source is on interpolator 7 */
-	0,
-	2,
-};
-
-static const int comp_rx_path[] = {
-	COMPANDER_1,
-	COMPANDER_1,
-	COMPANDER_2,
-	COMPANDER_2,
-	COMPANDER_2,
-	COMPANDER_2,
-	COMPANDER_0,
-	COMPANDER_MAX,
-};
-
-static const struct comp_sample_dependent_params comp_samp_params[] = {
-	{
-		/* 8 Khz */
-		.peak_det_timeout = 0x06,
-		.rms_meter_div_fact = 0x09,
-		.rms_meter_resamp_fact = 0x06,
-	},
-	{
-		/* 16 Khz */
-		.peak_det_timeout = 0x07,
-		.rms_meter_div_fact = 0x0A,
-		.rms_meter_resamp_fact = 0x0C,
-	},
-	{
-		/* 32 Khz */
-		.peak_det_timeout = 0x08,
-		.rms_meter_div_fact = 0x0B,
-		.rms_meter_resamp_fact = 0x1E,
-	},
-	{
-		/* 48 Khz */
-		.peak_det_timeout = 0x09,
-		.rms_meter_div_fact = 0x0B,
-		.rms_meter_resamp_fact = 0x28,
-	},
-	{
-		/* 96 Khz */
-		.peak_det_timeout = 0x0A,
-		.rms_meter_div_fact = 0x0C,
-		.rms_meter_resamp_fact = 0x50,
-	},
-	{
-		/* 192 Khz */
-		.peak_det_timeout = 0x0B,
-		.rms_meter_div_fact = 0xC,
-		.rms_meter_resamp_fact = 0x50,
-	},
-};
-
-static unsigned short rx_digital_gain_reg[] = {
-	TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL,
-	TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL,
-};
-
-
-static unsigned short tx_digital_gain_reg[] = {
-	TAIKO_A_CDC_TX1_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX2_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX3_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX4_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX5_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX6_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX7_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX8_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX9_VOL_CTL_GAIN,
-	TAIKO_A_CDC_TX10_VOL_CTL_GAIN,
-};
-
-static int spkr_drv_wrnd_param_set(const char *val,
-				   const struct kernel_param *kp)
-{
-	struct snd_soc_codec *codec;
-	int ret, old;
-	struct taiko_priv *priv;
-
-	priv = (struct taiko_priv *)atomic_read(&kp_taiko_priv);
-	if (!priv) {
-		pr_debug("%s: codec isn't yet registered\n", __func__);
-		return 0;
-	}
-
-	codec = priv->codec;
-	mutex_lock(&codec->mutex);
-	old = spkr_drv_wrnd;
-	ret = param_set_int(val, kp);
-	if (ret) {
-		mutex_unlock(&codec->mutex);
-		return ret;
-	}
-
-	pr_debug("%s: spkr_drv_wrnd %d -> %d\n", __func__, old, spkr_drv_wrnd);
-	if ((old == -1 || old == 0) && spkr_drv_wrnd == 1) {
-		WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-		wcd9xxx_resmgr_get_bandgap(&priv->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x80);
-	} else if (old == 1 && spkr_drv_wrnd == 0) {
-		WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-		wcd9xxx_resmgr_put_bandgap(&priv->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-		if (!priv->spkr_pa_widget_on)
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80,
-					    0x00);
-	}
-	mutex_unlock(&codec->mutex);
-
-	return 0;
-}
-
-static int taiko_get_anc_slot(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	ucontrol->value.integer.value[0] = taiko->anc_slot;
-	return 0;
-}
-
-static int taiko_put_anc_slot(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	taiko->anc_slot = ucontrol->value.integer.value[0];
-	return 0;
-}
-
-static int taiko_get_anc_func(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	ucontrol->value.integer.value[0] = (taiko->anc_func == true ? 1 : 0);
-	return 0;
-}
-
-static int taiko_put_anc_func(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	struct snd_soc_dapm_context *dapm = &codec->dapm;
-
-	mutex_lock(&dapm->codec->mutex);
-	taiko->anc_func = (!ucontrol->value.integer.value[0] ? false : true);
-
-	dev_dbg(codec->dev, "%s: anc_func %x", __func__, taiko->anc_func);
-
-	if (taiko->anc_func == true) {
-		snd_soc_dapm_enable_pin(dapm, "ANC HPHR");
-		snd_soc_dapm_enable_pin(dapm, "ANC HPHL");
-		snd_soc_dapm_enable_pin(dapm, "ANC HEADPHONE");
-		snd_soc_dapm_enable_pin(dapm, "ANC EAR PA");
-		snd_soc_dapm_enable_pin(dapm, "ANC EAR");
-		snd_soc_dapm_disable_pin(dapm, "HPHR");
-		snd_soc_dapm_disable_pin(dapm, "HPHL");
-		snd_soc_dapm_disable_pin(dapm, "HEADPHONE");
-		snd_soc_dapm_disable_pin(dapm, "EAR PA");
-		snd_soc_dapm_disable_pin(dapm, "EAR");
-	} else {
-		snd_soc_dapm_disable_pin(dapm, "ANC HPHR");
-		snd_soc_dapm_disable_pin(dapm, "ANC HPHL");
-		snd_soc_dapm_disable_pin(dapm, "ANC HEADPHONE");
-		snd_soc_dapm_disable_pin(dapm, "ANC EAR PA");
-		snd_soc_dapm_disable_pin(dapm, "ANC EAR");
-		snd_soc_dapm_enable_pin(dapm, "HPHR");
-		snd_soc_dapm_enable_pin(dapm, "HPHL");
-		snd_soc_dapm_enable_pin(dapm, "HEADPHONE");
-		snd_soc_dapm_enable_pin(dapm, "EAR PA");
-		snd_soc_dapm_enable_pin(dapm, "EAR");
-	}
-	snd_soc_dapm_sync(dapm);
-	mutex_unlock(&dapm->codec->mutex);
-	return 0;
-}
-
-static int taiko_get_iir_enable_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-
-	ucontrol->value.integer.value[0] =
-		(snd_soc_read(codec, (TAIKO_A_CDC_IIR1_CTL + 16 * iir_idx)) &
-		(1 << band_idx)) != 0;
-
-	pr_debug("%s: IIR #%d band #%d enable %d\n", __func__,
-		iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[0]);
-	return 0;
-}
-
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-static int taiko_get_sub_mic_delay_set(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	return 0;
-}
-
-static int taiko_put_sub_mic_delay_set(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	sub_mic_rec_delay = ucontrol->value.integer.value[0];
-	pr_info("%s : sub_mic_rec_delay : %d\n",  __func__, sub_mic_rec_delay);
-
-	return 0;
-}
-#endif
-
-static int taiko_put_iir_enable_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-	int value = ucontrol->value.integer.value[0];
-
-	/* Mask first 5 bits, 6-8 are reserved */
-	snd_soc_update_bits(codec, (TAIKO_A_CDC_IIR1_CTL + 16 * iir_idx),
-		(1 << band_idx), (value << band_idx));
-
-	pr_debug("%s: IIR #%d band #%d enable %d\n", __func__,
-		iir_idx, band_idx,
-		((snd_soc_read(codec, (TAIKO_A_CDC_IIR1_CTL + 16 * iir_idx)) &
-		(1 << band_idx)) != 0));
-	return 0;
-}
-static uint32_t get_iir_band_coeff(struct snd_soc_codec *codec,
-				int iir_idx, int band_idx,
-				int coeff_idx)
-{
-	uint32_t value = 0;
-
-	/* Address does not automatically update if reading */
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t)) & 0x7F);
-
-	value |= snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx));
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t) + 1) & 0x7F);
-
-	value |= (snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx)) << 8);
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t) + 2) & 0x7F);
-
-	value |= (snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx)) << 16);
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		((band_idx * BAND_MAX + coeff_idx)
-		* sizeof(uint32_t) + 3) & 0x7F);
-
-	/* Mask bits top 2 bits since they are reserved */
-	value |= ((snd_soc_read(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx)) & 0x3F) << 24);
-
-	return value;
-}
-
-static int taiko_get_iir_band_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-
-	ucontrol->value.integer.value[0] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 0);
-	ucontrol->value.integer.value[1] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 1);
-	ucontrol->value.integer.value[2] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 2);
-	ucontrol->value.integer.value[3] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 3);
-	ucontrol->value.integer.value[4] =
-		get_iir_band_coeff(codec, iir_idx, band_idx, 4);
-
-	pr_debug("%s: IIR #%d band #%d b0 = 0x%x\n"
-		"%s: IIR #%d band #%d b1 = 0x%x\n"
-		"%s: IIR #%d band #%d b2 = 0x%x\n"
-		"%s: IIR #%d band #%d a1 = 0x%x\n"
-		"%s: IIR #%d band #%d a2 = 0x%x\n",
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[0],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[1],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[2],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[3],
-		__func__, iir_idx, band_idx,
-		(uint32_t)ucontrol->value.integer.value[4]);
-	return 0;
-}
-
-static void set_iir_band_coeff(struct snd_soc_codec *codec,
-				int iir_idx, int band_idx,
-				uint32_t value)
-{
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value & 0xFF));
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value >> 8) & 0xFF);
-
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value >> 16) & 0xFF);
-
-	/* Mask top 2 bits, 7-8 are reserved */
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B2_CTL + 16 * iir_idx),
-		(value >> 24) & 0x3F);
-}
-
-static int taiko_put_iir_band_audio_mixer(
-					struct snd_kcontrol *kcontrol,
-					struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int iir_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->reg;
-	int band_idx = ((struct soc_multi_mixer_control *)
-					kcontrol->private_value)->shift;
-
-	/* Mask top bit it is reserved */
-	/* Updates addr automatically for each B2 write */
-	snd_soc_write(codec,
-		(TAIKO_A_CDC_IIR1_COEF_B1_CTL + 16 * iir_idx),
-		(band_idx * BAND_MAX * sizeof(uint32_t)) & 0x7F);
-
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[0]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[1]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[2]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[3]);
-	set_iir_band_coeff(codec, iir_idx, band_idx,
-				ucontrol->value.integer.value[4]);
-
-	pr_debug("%s: IIR #%d band #%d b0 = 0x%x\n"
-		"%s: IIR #%d band #%d b1 = 0x%x\n"
-		"%s: IIR #%d band #%d b2 = 0x%x\n"
-		"%s: IIR #%d band #%d a1 = 0x%x\n"
-		"%s: IIR #%d band #%d a2 = 0x%x\n",
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 0),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 1),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 2),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 3),
-		__func__, iir_idx, band_idx,
-		get_iir_band_coeff(codec, iir_idx, band_idx, 4));
-	return 0;
-}
-
-static int taiko_get_compander(struct snd_kcontrol *kcontrol,
-			       struct snd_ctl_elem_value *ucontrol)
-{
-
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	int comp = ((struct soc_multi_mixer_control *)
-		    kcontrol->private_value)->shift;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	ucontrol->value.integer.value[0] = taiko->comp_enabled[comp];
-	return 0;
-}
-
-static int taiko_set_compander(struct snd_kcontrol *kcontrol,
-			       struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	int comp = ((struct soc_multi_mixer_control *)
-		    kcontrol->private_value)->shift;
-	int value = ucontrol->value.integer.value[0];
-
-	pr_debug("%s: Compander %d enable current %d, new %d\n",
-		 __func__, comp, taiko->comp_enabled[comp], value);
-	taiko->comp_enabled[comp] = value;
-
-	if (comp == COMPANDER_1 &&
-			taiko->comp_enabled[comp] == 1) {
-		/* Wavegen to 5 msec */
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_CTL, 0xDA);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_TIME, 0x15);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_BIAS_WG_OCP, 0x2A);
-
-		/* Enable Chopper */
-		snd_soc_update_bits(codec,
-			TAIKO_A_RX_HPH_CHOP_CTL, 0x80, 0x80);
-
-		snd_soc_write(codec, TAIKO_A_NCP_DTEST, 0x20);
-		pr_debug("%s: Enabled Chopper and set wavegen to 5 msec\n",
-				__func__);
-	} else if (comp == COMPANDER_1 &&
-			taiko->comp_enabled[comp] == 0) {
-		/* Wavegen to 20 msec */
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_CTL, 0xDB);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_CNP_WG_TIME, 0x58);
-		snd_soc_write(codec, TAIKO_A_RX_HPH_BIAS_WG_OCP, 0x1A);
-
-		/* Disable CHOPPER block */
-		snd_soc_update_bits(codec,
-			TAIKO_A_RX_HPH_CHOP_CTL, 0x80, 0x00);
-
-		snd_soc_write(codec, TAIKO_A_NCP_DTEST, 0x10);
-		pr_debug("%s: Disabled Chopper and set wavegen to 20 msec\n",
-				__func__);
-	}
-	return 0;
-}
-
-static int taiko_config_gain_compander(struct snd_soc_codec *codec,
-				       int comp, bool enable)
-{
-	int ret = 0;
-
-	switch (comp) {
-	case COMPANDER_0:
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_GAIN,
-				    1 << 2, !enable << 2);
-		break;
-	case COMPANDER_1:
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_L_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_R_GAIN,
-				    1 << 5, !enable << 5);
-		break;
-	case COMPANDER_2:
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_1_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_3_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_2_GAIN,
-				    1 << 5, !enable << 5);
-		snd_soc_update_bits(codec, TAIKO_A_RX_LINE_4_GAIN,
-				    1 << 5, !enable << 5);
-		break;
-	default:
-		WARN_ON(1);
-		ret = -EINVAL;
-	}
-
-	return ret;
-}
-
-static void taiko_discharge_comp(struct snd_soc_codec *codec, int comp)
-{
-	/* Level meter DIV Factor to 5*/
-	snd_soc_update_bits(codec, TAIKO_A_CDC_COMP0_B2_CTL + (comp * 8), 0xF0,
-			    0x05 << 4);
-	/* RMS meter Sampling to 0x01 */
-	snd_soc_write(codec, TAIKO_A_CDC_COMP0_B3_CTL + (comp * 8), 0x01);
-
-	/* Worst case timeout for compander CnP sleep timeout */
-	usleep_range(3000, 3000);
-}
-
-static enum wcd9xxx_buck_volt taiko_codec_get_buck_mv(
-	struct snd_soc_codec *codec)
-{
-	int buck_volt = WCD9XXX_CDC_BUCK_UNSUPPORTED;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx_pdata *pdata = taiko->resmgr.pdata;
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(pdata->regulator); i++) {
-		if (!strncmp(pdata->regulator[i].name,
-					 WCD9XXX_SUPPLY_BUCK_NAME,
-					 sizeof(WCD9XXX_SUPPLY_BUCK_NAME))) {
-			if ((pdata->regulator[i].min_uV ==
-					WCD9XXX_CDC_BUCK_MV_1P8) ||
-				(pdata->regulator[i].min_uV ==
-					WCD9XXX_CDC_BUCK_MV_2P15))
-				buck_volt = pdata->regulator[i].min_uV;
-			break;
-		}
-	}
-	return buck_volt;
-}
-
-static int taiko_config_compander(struct snd_soc_dapm_widget *w,
-				  struct snd_kcontrol *kcontrol, int event)
-{
-	int mask, enable_mask;
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	const int comp = w->shift;
-	const u32 rate = taiko->comp_fs[comp];
-	const struct comp_sample_dependent_params *comp_params =
-	    &comp_samp_params[rate];
-	enum wcd9xxx_buck_volt buck_mv;
-
-	pr_debug("%s: %s event %d compander %d, enabled %d", __func__,
-		 w->name, event, comp, taiko->comp_enabled[comp]);
-
-	if (!taiko->comp_enabled[comp])
-		return 0;
-
-	/* Compander 0 has single channel */
-	mask = (comp == COMPANDER_0 ? 0x01 : 0x03);
-	enable_mask = (comp == COMPANDER_0 ? 0x02 : 0x03);
-	buck_mv = taiko_codec_get_buck_mv(codec);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/* Set compander Sample rate */
-		snd_soc_update_bits(codec,
-				    TAIKO_A_CDC_COMP0_FS_CFG + (comp * 8),
-				    0x07, rate);
-		/* Set the static gain offset */
-		if (comp == COMPANDER_1
-			&& buck_mv == WCD9XXX_CDC_BUCK_MV_1P8) {
-			snd_soc_update_bits(codec,
-					TAIKO_A_CDC_COMP0_B4_CTL + (comp * 8),
-					0x80, 0x80);
-		} else {
-			snd_soc_update_bits(codec,
-					TAIKO_A_CDC_COMP0_B4_CTL + (comp * 8),
-					0x80, 0x00);
-		}
-		/* Enable RX interpolation path compander clocks */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_B2_CTL,
-				    mask << comp_shift[comp],
-				    mask << comp_shift[comp]);
-		/* Toggle compander reset bits */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp],
-				    mask << comp_shift[comp]);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp], 0);
-
-		/* Set gain source to compander */
-		taiko_config_gain_compander(codec, comp, true);
-
-		/* Compander enable */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_COMP0_B1_CTL +
-				    (comp * 8), enable_mask, enable_mask);
-
-		taiko_discharge_comp(codec, comp);
-
-		/* Set sample rate dependent paramater */
-		snd_soc_write(codec, TAIKO_A_CDC_COMP0_B3_CTL + (comp * 8),
-			      comp_params->rms_meter_resamp_fact);
-		snd_soc_update_bits(codec,
-				    TAIKO_A_CDC_COMP0_B2_CTL + (comp * 8),
-				    0xF0, comp_params->rms_meter_div_fact << 4);
-		snd_soc_update_bits(codec,
-					TAIKO_A_CDC_COMP0_B2_CTL + (comp * 8),
-					0x0F, comp_params->peak_det_timeout);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		/* Disable compander */
-		snd_soc_update_bits(codec,
-				    TAIKO_A_CDC_COMP0_B1_CTL + (comp * 8),
-				    enable_mask, 0x00);
-
-		/* Toggle compander reset bits */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp],
-				    mask << comp_shift[comp]);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_OTHR_RESET_B2_CTL,
-				    mask << comp_shift[comp], 0);
-
-		/* Turn off the clock for compander in pair */
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_B2_CTL,
-				    mask << comp_shift[comp], 0);
-
-		/* Set gain source to register */
-		taiko_config_gain_compander(codec, comp, false);
-		break;
-	}
-	return 0;
-}
-
-
-
-static const char *const taiko_anc_func_text[] = {"OFF", "ON"};
-static const struct soc_enum taiko_anc_func_enum =
-		SOC_ENUM_SINGLE_EXT(2, taiko_anc_func_text);
-
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-static const char *const taiko_sub_mic_delay_text[] = {"OFF", "ON"};
-static const struct soc_enum taiko_sub_mic_delay_enum =
-		SOC_ENUM_SINGLE_EXT(2, taiko_sub_mic_delay_text);
-#endif
-
-static const char *const tabla_ear_pa_gain_text[] = {"POS_6_DB", "POS_2_DB"};
-static const struct soc_enum tabla_ear_pa_gain_enum[] = {
-		SOC_ENUM_SINGLE_EXT(2, tabla_ear_pa_gain_text),
-};
-
-/*cut of frequency for high pass filter*/
-static const char * const cf_text[] = {
-	"MIN_3DB_4Hz", "MIN_3DB_75Hz", "MIN_3DB_150Hz"
-};
-
-static const struct soc_enum cf_dec1_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX1_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec2_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX2_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec3_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX3_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec4_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX4_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec5_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX5_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec6_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX6_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec7_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX7_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec8_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX8_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec9_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX9_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_dec10_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_TX10_MUX_CTL, 4, 3, cf_text);
-
-static const struct soc_enum cf_rxmix1_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX1_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix2_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX2_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix3_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX3_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix4_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX4_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix5_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX5_B4_CTL, 0, 3, cf_text)
-;
-static const struct soc_enum cf_rxmix6_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX6_B4_CTL, 0, 3, cf_text);
-
-static const struct soc_enum cf_rxmix7_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_RX7_B4_CTL, 0, 3, cf_text);
-
-static const char * const class_h_dsm_text[] = {
-	"ZERO", "DSM_HPHL_RX1", "DSM_SPKR_RX7"
-};
-
-static const struct soc_enum class_h_dsm_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_CLSH_CTL, 4, 3, class_h_dsm_text);
-
-static const struct snd_kcontrol_new class_h_dsm_mux =
-	SOC_DAPM_ENUM("CLASS_H_DSM MUX Mux", class_h_dsm_enum);
-
-static const char *const taiko_conn_mad_text[] = {
-	"ADC_MB", "ADC1", "ADC2", "ADC3", "ADC4", "ADC5", "ADC6", "NOTUSED1",
-	"DMIC1", "DMIC2", "DMIC3", "DMIC4", "DMIC5", "DMIC6", "NOTUSED2",
-	"NOTUSED3"};
-
-static const struct soc_enum taiko_conn_mad_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(taiko_conn_mad_text),
-			taiko_conn_mad_text);
-
-
-static int taiko_mad_input_get(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	u8 taiko_mad_input;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-
-	taiko_mad_input = snd_soc_read(codec, TAIKO_A_CDC_CONN_MAD);
-
-	taiko_mad_input = taiko_mad_input & 0x0F;
-
-	ucontrol->value.integer.value[0] = taiko_mad_input;
-
-	pr_debug("%s: taiko_mad_input = %s\n", __func__,
-			taiko_conn_mad_text[taiko_mad_input]);
-
-	return 0;
-}
-
-static int taiko_mad_input_put(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	u8 taiko_mad_input;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_card *card = codec->card;
-	char mad_amic_input_widget[6];
-	u32 adc;
-	const char *mad_input_widget;
-	u32  mic_bias_found = 0;
-	u32 i;
-	int ret = 0;
-
-	taiko_mad_input = ucontrol->value.integer.value[0];
-
-	if (taiko_mad_input >= ARRAY_SIZE(taiko_conn_mad_text)) {
-		dev_err(codec->dev,
-			"%s: taiko_mad_input = %d out of bounds\n",
-			__func__, taiko_mad_input);
-		return -EINVAL;
-	}
-
-	pr_debug("%s: taiko_mad_input = %s\n", __func__,
-			taiko_conn_mad_text[taiko_mad_input]);
-
-	if (!strcmp(taiko_conn_mad_text[taiko_mad_input], "NOTUSED1") ||
-		!strcmp(taiko_conn_mad_text[taiko_mad_input], "NOTUSED2") ||
-		!strcmp(taiko_conn_mad_text[taiko_mad_input], "NOTUSED3") ||
-		!strcmp(taiko_conn_mad_text[taiko_mad_input], "ADC_MB")) {
-		pr_info("%s: taiko mad input is set to unsupported input = %s\n",
-				__func__, taiko_conn_mad_text[taiko_mad_input]);
-		return -EINVAL;
-	}
-
-	if (strnstr(taiko_conn_mad_text[taiko_mad_input],
-				"ADC", sizeof("ADC"))) {
-		ret = kstrtouint(strpbrk(taiko_conn_mad_text[taiko_mad_input]
-					, "123456"), 10, &adc);
-		if ((ret < 0) || (adc > 6)) {
-			pr_err("%s: Invalid ADC = %s\n", __func__,
-				taiko_conn_mad_text[taiko_mad_input]);
-			ret =  -EINVAL;
-		}
-
-		snprintf(mad_amic_input_widget, 6, "%s%u", "AMIC", adc);
-
-		mad_input_widget = mad_amic_input_widget;
-		pr_debug("%s: taiko amic input widget = %s\n", __func__,
-			  mad_amic_input_widget);
-	} else {
-		/* DMIC type input widget*/
-		mad_input_widget = taiko_conn_mad_text[taiko_mad_input];
-	}
-
-	pr_debug("%s: taiko input widget = %s\n", __func__, mad_input_widget);
-
-	for (i = 0; i < card->num_dapm_routes; i++) {
-
-		if (!strncmp(card->dapm_routes[i].sink,
-				mad_input_widget, strlen(mad_input_widget))) {
-
-			if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS1", sizeof("MIC BIAS1"))) {
-				mic_bias_found = 1;
-				break;
-			} else if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS2", sizeof("MIC BIAS2"))) {
-				mic_bias_found = 2;
-				break;
-			} else if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS3", sizeof("MIC BIAS3"))) {
-				mic_bias_found = 3;
-				break;
-			} else if (strnstr(card->dapm_routes[i].source,
-				"MIC BIAS4", sizeof("MIC BIAS4"))) {
-				mic_bias_found = 4;
-				break;
-			}
-		}
-	}
-
-	if (mic_bias_found) {
-		pr_debug("%s: source mic bias = %s. sink = %s\n", __func__,
-				card->dapm_routes[i].source,
-				card->dapm_routes[i].sink);
-
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CONN_MAD,
-					0x0F, taiko_mad_input);
-		snd_soc_update_bits(codec, TAIKO_A_MAD_ANA_CTRL,
-					0x07, mic_bias_found);
-		return 0;
-	} else {
-		pr_err("%s: mic bias source not found for input = %s\n",
-				__func__, mad_input_widget);
-		return -EINVAL;
-	}
-}
-
-
-static const struct snd_kcontrol_new taiko_snd_controls[] = {
-
-	SOC_SINGLE_S8_TLV("RX1 Digital Volume", TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX2 Digital Volume", TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX3 Digital Volume", TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX4 Digital Volume", TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX5 Digital Volume", TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX6 Digital Volume", TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-	SOC_SINGLE_S8_TLV("RX7 Digital Volume", TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL,
-		-84, 40, digital_gain),
-
-	SOC_SINGLE_S8_TLV("DEC1 Volume", TAIKO_A_CDC_TX1_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC2 Volume", TAIKO_A_CDC_TX2_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC3 Volume", TAIKO_A_CDC_TX3_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC4 Volume", TAIKO_A_CDC_TX4_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC5 Volume", TAIKO_A_CDC_TX5_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC6 Volume", TAIKO_A_CDC_TX6_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC7 Volume", TAIKO_A_CDC_TX7_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC8 Volume", TAIKO_A_CDC_TX8_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC9 Volume", TAIKO_A_CDC_TX9_VOL_CTL_GAIN, -84, 40,
-		digital_gain),
-	SOC_SINGLE_S8_TLV("DEC10 Volume", TAIKO_A_CDC_TX10_VOL_CTL_GAIN, -84,
-		40, digital_gain),
-
-	SOC_SINGLE_S8_TLV("IIR1 INP1 Volume", TAIKO_A_CDC_IIR1_GAIN_B1_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR1 INP2 Volume", TAIKO_A_CDC_IIR1_GAIN_B2_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR1 INP3 Volume", TAIKO_A_CDC_IIR1_GAIN_B3_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR1 INP4 Volume", TAIKO_A_CDC_IIR1_GAIN_B4_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP1 Volume", TAIKO_A_CDC_IIR2_GAIN_B1_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP2 Volume", TAIKO_A_CDC_IIR2_GAIN_B2_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP3 Volume", TAIKO_A_CDC_IIR2_GAIN_B3_CTL, -84,
-		40, digital_gain),
-	SOC_SINGLE_S8_TLV("IIR2 INP4 Volume", TAIKO_A_CDC_IIR2_GAIN_B4_CTL, -84,
-		40, digital_gain),
-
-	SOC_SINGLE_EXT("ANC Slot", SND_SOC_NOPM, 0, 100, 0, taiko_get_anc_slot,
-		taiko_put_anc_slot),
-	SOC_ENUM_EXT("ANC Function", taiko_anc_func_enum, taiko_get_anc_func,
-		taiko_put_anc_func),
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-        SOC_ENUM_EXT("SUB_MIC_REC_DELAY", taiko_sub_mic_delay_enum, taiko_get_sub_mic_delay_set,
-            taiko_put_sub_mic_delay_set),
-#endif
-
-	SOC_ENUM("TX1 HPF cut off", cf_dec1_enum),
-	SOC_ENUM("TX2 HPF cut off", cf_dec2_enum),
-	SOC_ENUM("TX3 HPF cut off", cf_dec3_enum),
-	SOC_ENUM("TX4 HPF cut off", cf_dec4_enum),
-	SOC_ENUM("TX5 HPF cut off", cf_dec5_enum),
-	SOC_ENUM("TX6 HPF cut off", cf_dec6_enum),
-	SOC_ENUM("TX7 HPF cut off", cf_dec7_enum),
-	SOC_ENUM("TX8 HPF cut off", cf_dec8_enum),
-	SOC_ENUM("TX9 HPF cut off", cf_dec9_enum),
-	SOC_ENUM("TX10 HPF cut off", cf_dec10_enum),
-
-	SOC_SINGLE("TX1 HPF Switch", TAIKO_A_CDC_TX1_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX2 HPF Switch", TAIKO_A_CDC_TX2_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX3 HPF Switch", TAIKO_A_CDC_TX3_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX4 HPF Switch", TAIKO_A_CDC_TX4_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX5 HPF Switch", TAIKO_A_CDC_TX5_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX6 HPF Switch", TAIKO_A_CDC_TX6_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX7 HPF Switch", TAIKO_A_CDC_TX7_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX8 HPF Switch", TAIKO_A_CDC_TX8_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX9 HPF Switch", TAIKO_A_CDC_TX9_MUX_CTL, 3, 1, 0),
-	SOC_SINGLE("TX10 HPF Switch", TAIKO_A_CDC_TX10_MUX_CTL, 3, 1, 0),
-
-	SOC_SINGLE("RX1 HPF Switch", TAIKO_A_CDC_RX1_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX2 HPF Switch", TAIKO_A_CDC_RX2_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX3 HPF Switch", TAIKO_A_CDC_RX3_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX4 HPF Switch", TAIKO_A_CDC_RX4_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX5 HPF Switch", TAIKO_A_CDC_RX5_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX6 HPF Switch", TAIKO_A_CDC_RX6_B5_CTL, 2, 1, 0),
-	SOC_SINGLE("RX7 HPF Switch", TAIKO_A_CDC_RX7_B5_CTL, 2, 1, 0),
-
-	SOC_ENUM("RX1 HPF cut off", cf_rxmix1_enum),
-	SOC_ENUM("RX2 HPF cut off", cf_rxmix2_enum),
-	SOC_ENUM("RX3 HPF cut off", cf_rxmix3_enum),
-	SOC_ENUM("RX4 HPF cut off", cf_rxmix4_enum),
-	SOC_ENUM("RX5 HPF cut off", cf_rxmix5_enum),
-	SOC_ENUM("RX6 HPF cut off", cf_rxmix6_enum),
-	SOC_ENUM("RX7 HPF cut off", cf_rxmix7_enum),
-
-	SOC_SINGLE_EXT("IIR1 Enable Band1", IIR1, BAND1, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band2", IIR1, BAND2, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band3", IIR1, BAND3, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band4", IIR1, BAND4, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR1 Enable Band5", IIR1, BAND5, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band1", IIR2, BAND1, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band2", IIR2, BAND2, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band3", IIR2, BAND3, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band4", IIR2, BAND4, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-	SOC_SINGLE_EXT("IIR2 Enable Band5", IIR2, BAND5, 1, 0,
-	taiko_get_iir_enable_audio_mixer, taiko_put_iir_enable_audio_mixer),
-
-	SOC_SINGLE_MULTI_EXT("IIR1 Band1", IIR1, BAND1, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band2", IIR1, BAND2, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band3", IIR1, BAND3, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band4", IIR1, BAND4, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR1 Band5", IIR1, BAND5, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band1", IIR2, BAND1, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band2", IIR2, BAND2, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band3", IIR2, BAND3, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band4", IIR2, BAND4, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-	SOC_SINGLE_MULTI_EXT("IIR2 Band5", IIR2, BAND5, 255, 0, 5,
-	taiko_get_iir_band_audio_mixer, taiko_put_iir_band_audio_mixer),
-
-	SOC_SINGLE_EXT("COMP0 Switch", SND_SOC_NOPM, COMPANDER_0, 1, 0,
-		       taiko_get_compander, taiko_set_compander),
-	SOC_SINGLE_EXT("COMP1 Switch", SND_SOC_NOPM, COMPANDER_1, 1, 0,
-		       taiko_get_compander, taiko_set_compander),
-	SOC_SINGLE_EXT("COMP2 Switch", SND_SOC_NOPM, COMPANDER_2, 1, 0,
-		       taiko_get_compander, taiko_set_compander),
-
-	SOC_ENUM_EXT("MAD Input", taiko_conn_mad_enum,
-			taiko_mad_input_get, taiko_mad_input_put),
-
-};
-
-static int taiko_pa_gain_get(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	u8 ear_pa_gain;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-
-	ear_pa_gain = snd_soc_read(codec, TAIKO_A_RX_EAR_GAIN);
-
-	ear_pa_gain = ear_pa_gain >> 5;
-
-	ucontrol->value.integer.value[0] = ear_pa_gain;
-
-	pr_debug("%s: ear_pa_gain = 0x%x\n", __func__, ear_pa_gain);
-
-	return 0;
-}
-
-static int taiko_pa_gain_put(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	u8 ear_pa_gain;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-
-	pr_debug("%s: ucontrol->value.integer.value[0]  = %ld\n", __func__,
-			ucontrol->value.integer.value[0]);
-
-	ear_pa_gain =  ucontrol->value.integer.value[0] << 5;
-
-	snd_soc_update_bits(codec, TAIKO_A_RX_EAR_GAIN, 0xE0, ear_pa_gain);
-	return 0;
-}
-
-static const char * const taiko_1_x_ear_pa_gain_text[] = {
-	"POS_6_DB", "UNDEFINED_1", "UNDEFINED_2", "UNDEFINED_3", "POS_2_DB",
-	"NEG_2P5_DB", "UNDEFINED_4", "NEG_12_DB"
-};
-
-static const struct soc_enum taiko_1_x_ear_pa_gain_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(taiko_1_x_ear_pa_gain_text),
-			taiko_1_x_ear_pa_gain_text);
-
-static const struct snd_kcontrol_new taiko_1_x_analog_gain_controls[] = {
-
-	SOC_ENUM_EXT("EAR PA Gain", taiko_1_x_ear_pa_gain_enum,
-		taiko_pa_gain_get, taiko_pa_gain_put),
-
-	SOC_SINGLE_TLV("HPHL Volume", TAIKO_A_RX_HPH_L_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("HPHR Volume", TAIKO_A_RX_HPH_R_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("LINEOUT1 Volume", TAIKO_A_RX_LINE_1_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT2 Volume", TAIKO_A_RX_LINE_2_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT3 Volume", TAIKO_A_RX_LINE_3_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT4 Volume", TAIKO_A_RX_LINE_4_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("SPK DRV Volume", TAIKO_A_SPKR_DRV_GAIN, 3, 7, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("ADC1 Volume", TAIKO_A_TX_1_2_EN, 5, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC2 Volume", TAIKO_A_TX_1_2_EN, 1, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC3 Volume", TAIKO_A_TX_3_4_EN, 5, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC4 Volume", TAIKO_A_TX_3_4_EN, 1, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC5 Volume", TAIKO_A_TX_5_6_EN, 5, 3, 0, analog_gain),
-	SOC_SINGLE_TLV("ADC6 Volume", TAIKO_A_TX_5_6_EN, 1, 3, 0, analog_gain),
-};
-
-static const char * const taiko_2_x_ear_pa_gain_text[] = {
-	"POS_6_DB", "POS_4P5_DB", "POS_3_DB", "POS_1P5_DB",
-	"POS_0_DB", "NEG_2P5_DB", "UNDEFINED", "NEG_12_DB"
-};
-
-static const struct soc_enum taiko_2_x_ear_pa_gain_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(taiko_2_x_ear_pa_gain_text),
-			taiko_2_x_ear_pa_gain_text);
-
-static const struct snd_kcontrol_new taiko_2_x_analog_gain_controls[] = {
-
-	SOC_ENUM_EXT("EAR PA Gain", taiko_2_x_ear_pa_gain_enum,
-		taiko_pa_gain_get, taiko_pa_gain_put),
-
-	SOC_SINGLE_TLV("HPHL Volume", TAIKO_A_RX_HPH_L_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("HPHR Volume", TAIKO_A_RX_HPH_R_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("LINEOUT1 Volume", TAIKO_A_RX_LINE_1_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT2 Volume", TAIKO_A_RX_LINE_2_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT3 Volume", TAIKO_A_RX_LINE_3_GAIN, 0, 20, 1,
-		line_gain),
-	SOC_SINGLE_TLV("LINEOUT4 Volume", TAIKO_A_RX_LINE_4_GAIN, 0, 20, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("SPK DRV Volume", TAIKO_A_SPKR_DRV_GAIN, 3, 8, 1,
-		line_gain),
-
-	SOC_SINGLE_TLV("ADC1 Volume", TAIKO_A_CDC_TX_1_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC2 Volume", TAIKO_A_CDC_TX_2_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC3 Volume", TAIKO_A_CDC_TX_3_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC4 Volume", TAIKO_A_CDC_TX_4_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC5 Volume", TAIKO_A_CDC_TX_5_GAIN, 2, 19, 0,
-			analog_gain),
-	SOC_SINGLE_TLV("ADC6 Volume", TAIKO_A_CDC_TX_6_GAIN, 2, 19, 0,
-			analog_gain),
-};
-
-#if defined(CONFIG_MACH_KLTE_JPN) || defined(CONFIG_MACH_KLTE_KOR)
-extern unsigned int system_rev;
-#endif
-
-static int taiko_hph_impedance_get(struct snd_kcontrol *kcontrol,
-				   struct snd_ctl_elem_value *ucontrol)
-{
-#if defined(CONFIG_MACH_KLTE_KOR)
-	if (system_rev >= 13) {
-		uint32_t zl, zr;
-		bool hphr;
-		struct soc_multi_mixer_control *mc;
-		struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-		struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-		mc = (struct soc_multi_mixer_control *)(kcontrol->private_value);
-
-		hphr = mc->shift;
-		wcd9xxx_mbhc_get_impedance(&priv->mbhc, &zl, &zr);
-		pr_debug("%s: zl %u, zr %u\n", __func__, zl, zr);
-		ucontrol->value.integer.value[0] = hphr ? zr : zl;
-	}
-#elif defined(CONFIG_MACH_KLTE_JPN)
-	if (system_rev >= 11) {
-		uint32_t zl, zr;
-		bool hphr;
-		struct soc_multi_mixer_control *mc;
-		struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-		struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-		mc = (struct soc_multi_mixer_control *)(kcontrol->private_value);
-
-		hphr = mc->shift;
-		wcd9xxx_mbhc_get_impedance(&priv->mbhc, &zl, &zr);
-		pr_debug("%s: zl %u, zr %u\n", __func__, zl, zr);
-		ucontrol->value.integer.value[0] = hphr ? zr : zl;
-	}
-#else
-#if !defined(CONFIG_SAMSUNG_JACK) && !defined(CONFIG_MUIC_DET_JACK)
-	uint32_t zl, zr;
-	bool hphr;
-	struct soc_multi_mixer_control *mc;
-	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-	mc = (struct soc_multi_mixer_control *)(kcontrol->private_value);
-
-	hphr = mc->shift;
-	wcd9xxx_mbhc_get_impedance(&priv->mbhc, &zl, &zr);
-	pr_debug("%s: zl %u, zr %u\n", __func__, zl, zr);
-	ucontrol->value.integer.value[0] = hphr ? zr : zl;
-#endif
-#endif
-	ucontrol->value.integer.value[0] = 0;
-	return 0;
-}
-
-static const struct snd_kcontrol_new impedance_detect_controls[] = {
-	SOC_SINGLE_EXT("HPHL Impedance", 0, 0, UINT_MAX, 0,
-		       taiko_hph_impedance_get, NULL),
-	SOC_SINGLE_EXT("HPHR Impedance", 0, 1, UINT_MAX, 0,
-		       taiko_hph_impedance_get, NULL),
-};
-
-static const char * const rx_mix1_text[] = {
-	"ZERO", "SRC1", "SRC2", "IIR1", "IIR2", "RX1", "RX2", "RX3", "RX4",
-		"RX5", "RX6", "RX7"
-};
-
-static const char * const rx_mix2_text[] = {
-	"ZERO", "SRC1", "SRC2", "IIR1", "IIR2"
-};
-
-static const char * const rx_rdac5_text[] = {
-	"DEM4", "DEM3_INV"
-};
-
-static const char * const rx_rdac7_text[] = {
-	"DEM6", "DEM5_INV"
-};
-
-
-static const char * const sb_tx1_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC1"
-};
-
-static const char * const sb_tx2_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC2"
-};
-
-static const char * const sb_tx3_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC3"
-};
-
-static const char * const sb_tx4_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC4"
-};
-
-static const char * const sb_tx5_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC5"
-};
-
-static const char * const sb_tx6_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC6"
-};
-
-static const char * const sb_tx7_to_tx10_mux_text[] = {
-	"ZERO", "RMIX1", "RMIX2", "RMIX3", "RMIX4", "RMIX5", "RMIX6", "RMIX7",
-		"DEC1", "DEC2", "DEC3", "DEC4", "DEC5", "DEC6", "DEC7", "DEC8",
-		"DEC9", "DEC10"
-};
-
-static const char * const dec1_mux_text[] = {
-	"ZERO", "DMIC1", "ADC6",
-};
-
-static const char * const dec2_mux_text[] = {
-	"ZERO", "DMIC2", "ADC5",
-};
-
-static const char * const dec3_mux_text[] = {
-	"ZERO", "DMIC3", "ADC4",
-};
-
-static const char * const dec4_mux_text[] = {
-	"ZERO", "DMIC4", "ADC3",
-};
-
-static const char * const dec5_mux_text[] = {
-	"ZERO", "DMIC5", "ADC2",
-};
-
-static const char * const dec6_mux_text[] = {
-	"ZERO", "DMIC6", "ADC1",
-};
-
-static const char * const dec7_mux_text[] = {
-	"ZERO", "DMIC1", "DMIC6", "ADC1", "ADC6", "ANC1_FB", "ANC2_FB",
-};
-
-static const char * const dec8_mux_text[] = {
-	"ZERO", "DMIC2", "DMIC5", "ADC2", "ADC5",
-};
-
-static const char * const dec9_mux_text[] = {
-	"ZERO", "DMIC4", "DMIC5", "ADC2", "ADC3", "ADCMB", "ANC1_FB", "ANC2_FB",
-};
-
-static const char * const dec10_mux_text[] = {
-	"ZERO", "DMIC3", "DMIC6", "ADC1", "ADC4", "ADCMB", "ANC1_FB", "ANC2_FB",
-};
-
-static const char * const anc_mux_text[] = {
-	"ZERO", "ADC1", "ADC2", "ADC3", "ADC4", "ADC5", "ADC6", "ADC_MB",
-		"RSVD_1", "DMIC1", "DMIC2", "DMIC3", "DMIC4", "DMIC5", "DMIC6"
-};
-
-static const char * const anc1_fb_mux_text[] = {
-	"ZERO", "EAR_HPH_L", "EAR_LINE_1",
-};
-
-static const char * const iir_inp1_text[] = {
-	"ZERO", "DEC1", "DEC2", "DEC3", "DEC4", "DEC5", "DEC6", "DEC7", "DEC8",
-	"DEC9", "DEC10", "RX1", "RX2", "RX3", "RX4", "RX5", "RX6", "RX7"
-};
-
-static const struct soc_enum rx_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx_mix1_inp3_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B2_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx2_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx2_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx3_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX3_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx3_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX3_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx4_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX4_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx4_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX4_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx5_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX5_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx5_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX5_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx6_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX6_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx6_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX6_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx7_mix1_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B1_CTL, 0, 12, rx_mix1_text);
-
-static const struct soc_enum rx7_mix1_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B1_CTL, 4, 12, rx_mix1_text);
-
-static const struct soc_enum rx1_mix2_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B3_CTL, 0, 5, rx_mix2_text);
-
-static const struct soc_enum rx1_mix2_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX1_B3_CTL, 3, 5, rx_mix2_text);
-
-static const struct soc_enum rx2_mix2_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B3_CTL, 0, 5, rx_mix2_text);
-
-static const struct soc_enum rx2_mix2_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX2_B3_CTL, 3, 5, rx_mix2_text);
-
-static const struct soc_enum rx7_mix2_inp1_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B3_CTL, 0, 5, rx_mix2_text);
-
-static const struct soc_enum rx7_mix2_inp2_chain_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_RX7_B3_CTL, 3, 5, rx_mix2_text);
-
-static const struct soc_enum rx_rdac5_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_MISC, 2, 2, rx_rdac5_text);
-
-static const struct soc_enum rx_rdac7_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_MISC, 1, 2, rx_rdac7_text);
-
-static const struct soc_enum sb_tx1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B1_CTL, 0, 9, sb_tx1_mux_text);
-
-static const struct soc_enum sb_tx2_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B2_CTL, 0, 9, sb_tx2_mux_text);
-
-static const struct soc_enum sb_tx3_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B3_CTL, 0, 9, sb_tx3_mux_text);
-
-static const struct soc_enum sb_tx4_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B4_CTL, 0, 9, sb_tx4_mux_text);
-
-static const struct soc_enum sb_tx5_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B5_CTL, 0, 9, sb_tx5_mux_text);
-
-static const struct soc_enum sb_tx6_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B6_CTL, 0, 9, sb_tx6_mux_text);
-
-static const struct soc_enum sb_tx7_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B7_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum sb_tx8_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B8_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum sb_tx9_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B9_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum sb_tx10_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_SB_B10_CTL, 0, 18,
-			sb_tx7_to_tx10_mux_text);
-
-static const struct soc_enum dec1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 0, 3, dec1_mux_text);
-
-static const struct soc_enum dec2_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 2, 3, dec2_mux_text);
-
-static const struct soc_enum dec3_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 4, 3, dec3_mux_text);
-
-static const struct soc_enum dec4_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B1_CTL, 6, 3, dec4_mux_text);
-
-static const struct soc_enum dec5_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B2_CTL, 0, 3, dec5_mux_text);
-
-static const struct soc_enum dec6_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B2_CTL, 2, 3, dec6_mux_text);
-
-static const struct soc_enum dec7_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B2_CTL, 4, 7, dec7_mux_text);
-
-static const struct soc_enum dec8_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B3_CTL, 0, 7, dec8_mux_text);
-
-static const struct soc_enum dec9_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B3_CTL, 3, 8, dec9_mux_text);
-
-static const struct soc_enum dec10_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_TX_B4_CTL, 0, 8, dec10_mux_text);
-
-static const struct soc_enum anc1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_ANC_B1_CTL, 0, 16, anc_mux_text);
-
-static const struct soc_enum anc2_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_ANC_B1_CTL, 4, 16, anc_mux_text);
-
-static const struct soc_enum anc1_fb_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_ANC_B2_CTL, 0, 3, anc1_fb_mux_text);
-
-static const struct soc_enum iir1_inp1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_EQ1_B1_CTL, 0, 18, iir_inp1_text);
-
-static const struct soc_enum iir2_inp1_mux_enum =
-	SOC_ENUM_SINGLE(TAIKO_A_CDC_CONN_EQ2_B1_CTL, 0, 18, iir_inp1_text);
-
-static const struct snd_kcontrol_new rx_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX1 MIX1 INP1 Mux", rx_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX1 MIX1 INP2 Mux", rx_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx_mix1_inp3_mux =
-	SOC_DAPM_ENUM("RX1 MIX1 INP3 Mux", rx_mix1_inp3_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX2 MIX1 INP1 Mux", rx2_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX2 MIX1 INP2 Mux", rx2_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx3_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX3 MIX1 INP1 Mux", rx3_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx3_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX3 MIX1 INP2 Mux", rx3_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx4_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX4 MIX1 INP1 Mux", rx4_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx4_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX4 MIX1 INP2 Mux", rx4_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx5_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX5 MIX1 INP1 Mux", rx5_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx5_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX5 MIX1 INP2 Mux", rx5_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx6_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX6 MIX1 INP1 Mux", rx6_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx6_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX6 MIX1 INP2 Mux", rx6_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix1_inp1_mux =
-	SOC_DAPM_ENUM("RX7 MIX1 INP1 Mux", rx7_mix1_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix1_inp2_mux =
-	SOC_DAPM_ENUM("RX7 MIX1 INP2 Mux", rx7_mix1_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx1_mix2_inp1_mux =
-	SOC_DAPM_ENUM("RX1 MIX2 INP1 Mux", rx1_mix2_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx1_mix2_inp2_mux =
-	SOC_DAPM_ENUM("RX1 MIX2 INP2 Mux", rx1_mix2_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix2_inp1_mux =
-	SOC_DAPM_ENUM("RX2 MIX2 INP1 Mux", rx2_mix2_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx2_mix2_inp2_mux =
-	SOC_DAPM_ENUM("RX2 MIX2 INP2 Mux", rx2_mix2_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix2_inp1_mux =
-	SOC_DAPM_ENUM("RX7 MIX2 INP1 Mux", rx7_mix2_inp1_chain_enum);
-
-static const struct snd_kcontrol_new rx7_mix2_inp2_mux =
-	SOC_DAPM_ENUM("RX7 MIX2 INP2 Mux", rx7_mix2_inp2_chain_enum);
-
-static const struct snd_kcontrol_new rx_dac5_mux =
-	SOC_DAPM_ENUM("RDAC5 MUX Mux", rx_rdac5_enum);
-
-static const struct snd_kcontrol_new rx_dac7_mux =
-	SOC_DAPM_ENUM("RDAC7 MUX Mux", rx_rdac7_enum);
-
-static const struct snd_kcontrol_new sb_tx1_mux =
-	SOC_DAPM_ENUM("SLIM TX1 MUX Mux", sb_tx1_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx2_mux =
-	SOC_DAPM_ENUM("SLIM TX2 MUX Mux", sb_tx2_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx3_mux =
-	SOC_DAPM_ENUM("SLIM TX3 MUX Mux", sb_tx3_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx4_mux =
-	SOC_DAPM_ENUM("SLIM TX4 MUX Mux", sb_tx4_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx5_mux =
-	SOC_DAPM_ENUM("SLIM TX5 MUX Mux", sb_tx5_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx6_mux =
-	SOC_DAPM_ENUM("SLIM TX6 MUX Mux", sb_tx6_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx7_mux =
-	SOC_DAPM_ENUM("SLIM TX7 MUX Mux", sb_tx7_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx8_mux =
-	SOC_DAPM_ENUM("SLIM TX8 MUX Mux", sb_tx8_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx9_mux =
-	SOC_DAPM_ENUM("SLIM TX9 MUX Mux", sb_tx9_mux_enum);
-
-static const struct snd_kcontrol_new sb_tx10_mux =
-	SOC_DAPM_ENUM("SLIM TX10 MUX Mux", sb_tx10_mux_enum);
-
-
-static int wcd9320_put_dec_enum(struct snd_kcontrol *kcontrol,
-			      struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *w = wlist->widgets[0];
-	struct snd_soc_codec *codec = w->codec;
-	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	unsigned int dec_mux, decimator;
-	char *dec_name = NULL;
-	char *widget_name = NULL;
-	char *temp;
-	u16 tx_mux_ctl_reg;
-	u8 adc_dmic_sel = 0x0;
-	int ret = 0;
-
-	if (ucontrol->value.enumerated.item[0] > e->max - 1)
-		return -EINVAL;
-
-	dec_mux = ucontrol->value.enumerated.item[0];
-
-	widget_name = kstrndup(w->name, 15, GFP_KERNEL);
-	if (!widget_name)
-		return -ENOMEM;
-	temp = widget_name;
-
-	dec_name = strsep(&widget_name, " ");
-	widget_name = temp;
-	if (!dec_name) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, w->name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	ret = kstrtouint(strpbrk(dec_name, "123456789"), 10, &decimator);
-	if (ret < 0) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, dec_name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	dev_dbg(w->dapm->dev, "%s(): widget = %s decimator = %u dec_mux = %u\n"
-		, __func__, w->name, decimator, dec_mux);
-
-
-	switch (decimator) {
-	case 1:
-	case 2:
-	case 3:
-	case 4:
-	case 5:
-	case 6:
-		if (dec_mux == 1)
-			adc_dmic_sel = 0x1;
-		else
-			adc_dmic_sel = 0x0;
-		break;
-	case 7:
-	case 8:
-	case 9:
-	case 10:
-		if ((dec_mux == 1) || (dec_mux == 2))
-			adc_dmic_sel = 0x1;
-		else
-			adc_dmic_sel = 0x0;
-		break;
-	default:
-		pr_err("%s: Invalid Decimator = %u\n", __func__, decimator);
-		ret = -EINVAL;
-		goto out;
-	}
-
-	tx_mux_ctl_reg = TAIKO_A_CDC_TX1_MUX_CTL + 8 * (decimator - 1);
-
-	snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x1, adc_dmic_sel);
-
-	ret = snd_soc_dapm_put_enum_double(kcontrol, ucontrol);
-
-out:
-	kfree(widget_name);
-	return ret;
-}
-
-#define WCD9320_DEC_ENUM(xname, xenum) \
-{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
-	.info = snd_soc_info_enum_double, \
-	.get = snd_soc_dapm_get_enum_double, \
-	.put = wcd9320_put_dec_enum, \
-	.private_value = (unsigned long)&xenum }
-
-static const struct snd_kcontrol_new dec1_mux =
-	WCD9320_DEC_ENUM("DEC1 MUX Mux", dec1_mux_enum);
-
-static const struct snd_kcontrol_new dec2_mux =
-	WCD9320_DEC_ENUM("DEC2 MUX Mux", dec2_mux_enum);
-
-static const struct snd_kcontrol_new dec3_mux =
-	WCD9320_DEC_ENUM("DEC3 MUX Mux", dec3_mux_enum);
-
-static const struct snd_kcontrol_new dec4_mux =
-	WCD9320_DEC_ENUM("DEC4 MUX Mux", dec4_mux_enum);
-
-static const struct snd_kcontrol_new dec5_mux =
-	WCD9320_DEC_ENUM("DEC5 MUX Mux", dec5_mux_enum);
-
-static const struct snd_kcontrol_new dec6_mux =
-	WCD9320_DEC_ENUM("DEC6 MUX Mux", dec6_mux_enum);
-
-static const struct snd_kcontrol_new dec7_mux =
-	WCD9320_DEC_ENUM("DEC7 MUX Mux", dec7_mux_enum);
-
-static const struct snd_kcontrol_new dec8_mux =
-	WCD9320_DEC_ENUM("DEC8 MUX Mux", dec8_mux_enum);
-
-static const struct snd_kcontrol_new dec9_mux =
-	WCD9320_DEC_ENUM("DEC9 MUX Mux", dec9_mux_enum);
-
-static const struct snd_kcontrol_new dec10_mux =
-	WCD9320_DEC_ENUM("DEC10 MUX Mux", dec10_mux_enum);
-
-static const struct snd_kcontrol_new iir1_inp1_mux =
-	SOC_DAPM_ENUM("IIR1 INP1 Mux", iir1_inp1_mux_enum);
-
-static const struct snd_kcontrol_new iir2_inp1_mux =
-	SOC_DAPM_ENUM("IIR2 INP1 Mux", iir2_inp1_mux_enum);
-
-static const struct snd_kcontrol_new anc1_mux =
-	SOC_DAPM_ENUM("ANC1 MUX Mux", anc1_mux_enum);
-
-static const struct snd_kcontrol_new anc2_mux =
-	SOC_DAPM_ENUM("ANC2 MUX Mux", anc2_mux_enum);
-
-static const struct snd_kcontrol_new anc1_fb_mux =
-	SOC_DAPM_ENUM("ANC1 FB MUX Mux", anc1_fb_mux_enum);
-
-static const struct snd_kcontrol_new dac1_switch[] = {
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_EAR_EN, 5, 1, 0)
-};
-static const struct snd_kcontrol_new hphl_switch[] = {
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_HPH_L_DAC_CTL, 6, 1, 0)
-};
-
-static const struct snd_kcontrol_new hphl_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					7, 1, 0),
-};
-
-static const struct snd_kcontrol_new hphr_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_R Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					6, 1, 0),
-};
-
-static const struct snd_kcontrol_new ear_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					5, 1, 0),
-};
-static const struct snd_kcontrol_new lineout1_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					4, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout2_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_R Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					3, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout3_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_L Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					2, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout4_pa_mix[] = {
-	SOC_DAPM_SINGLE("AUX_PGA_R Switch", TAIKO_A_RX_PA_AUX_IN_CONN,
-					1, 1, 0),
-};
-
-static const struct snd_kcontrol_new lineout3_ground_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_LINE_3_DAC_CTL, 6, 1, 0);
-
-static const struct snd_kcontrol_new lineout4_ground_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_RX_LINE_4_DAC_CTL, 6, 1, 0);
-
-static const struct snd_kcontrol_new aif4_mad_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_CDC_CLK_OTHR_CTL, 4, 1, 0);
-
-static const struct snd_kcontrol_new aif4_vi_switch =
-	SOC_DAPM_SINGLE("Switch", TAIKO_A_SPKR_PROT_EN, 3, 1, 0);
-/* virtual port entries */
-static int slim_tx_mixer_get(struct snd_kcontrol *kcontrol,
-			     struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-
-	ucontrol->value.integer.value[0] = widget->value;
-	return 0;
-}
-
-static int slim_tx_mixer_put(struct snd_kcontrol *kcontrol,
-			     struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-	struct snd_soc_codec *codec = widget->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct soc_multi_mixer_control *mixer =
-		((struct soc_multi_mixer_control *)kcontrol->private_value);
-	u32 dai_id = widget->shift;
-	u32 port_id = mixer->shift;
-	u32 enable = ucontrol->value.integer.value[0];
-	u32 vtable = vport_check_table[dai_id];
-
-
-	pr_debug("%s: wname %s cname %s value %u shift %d item %ld\n", __func__,
-		widget->name, ucontrol->id.name, widget->value, widget->shift,
-		ucontrol->value.integer.value[0]);
-
-	mutex_lock(&codec->mutex);
-
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		if (dai_id != AIF1_CAP) {
-			dev_err(codec->dev, "%s: invalid AIF for I2C mode\n",
-				__func__);
-			mutex_unlock(&codec->mutex);
-			return -EINVAL;
-		}
-	}
-		switch (dai_id) {
-		case AIF1_CAP:
-		case AIF2_CAP:
-		case AIF3_CAP:
-			/* only add to the list if value not set
-			 */
-			if (enable && !(widget->value & 1 << port_id)) {
-
-				if (taiko_p->intf_type ==
-					WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-					vtable = vport_check_table[dai_id];
-				if (taiko_p->intf_type ==
-					WCD9XXX_INTERFACE_TYPE_I2C)
-					vtable = vport_i2s_check_table[dai_id];
-
-				if (wcd9xxx_tx_vport_validation(
-						vtable,
-						port_id,
-						taiko_p->dai, NUM_CODEC_DAIS)) {
-					dev_dbg(codec->dev, "%s: TX%u is used by other virtual port\n",
-						__func__, port_id + 1);
-					mutex_unlock(&codec->mutex);
-					return 0;
-				}
-				widget->value |= 1 << port_id;
-				list_add_tail(&core->tx_chs[port_id].list,
-				      &taiko_p->dai[dai_id].wcd9xxx_ch_list
-					      );
-			} else if (!enable && (widget->value & 1 << port_id)) {
-				widget->value &= ~(1 << port_id);
-				list_del_init(&core->tx_chs[port_id].list);
-			} else {
-				if (enable)
-					dev_dbg(codec->dev, "%s: TX%u port is used by\n"
-						"this virtual port\n",
-						__func__, port_id + 1);
-				else
-					dev_dbg(codec->dev, "%s: TX%u port is not used by\n"
-						"this virtual port\n",
-						__func__, port_id + 1);
-				/* avoid update power function */
-				mutex_unlock(&codec->mutex);
-				return 0;
-			}
-			break;
-		default:
-			pr_err("Unknown AIF %d\n", dai_id);
-			mutex_unlock(&codec->mutex);
-			return -EINVAL;
-		}
-	pr_debug("%s: name %s sname %s updated value %u shift %d\n", __func__,
-		widget->name, widget->sname, widget->value, widget->shift);
-
-	snd_soc_dapm_mixer_update_power(widget, kcontrol, enable);
-
-	mutex_unlock(&codec->mutex);
-	return 0;
-}
-
-static int slim_rx_mux_get(struct snd_kcontrol *kcontrol,
-			   struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-
-	ucontrol->value.enumerated.item[0] = widget->value;
-	return 0;
-}
-
-static const char *const slim_rx_mux_text[] = {
-	"ZERO", "AIF1_PB", "AIF2_PB", "AIF3_PB"
-};
-
-static int slim_rx_mux_put(struct snd_kcontrol *kcontrol,
-			   struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_dapm_widget_list *wlist = snd_kcontrol_chip(kcontrol);
-	struct snd_soc_dapm_widget *widget = wlist->widgets[0];
-	struct snd_soc_codec *codec = widget->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
-	u32 port_id = widget->shift;
-
-	pr_debug("%s: wname %s cname %s value %u shift %d item %ld\n", __func__,
-		widget->name, ucontrol->id.name, widget->value, widget->shift,
-		ucontrol->value.integer.value[0]);
-
-	widget->value = ucontrol->value.enumerated.item[0];
-
-	mutex_lock(&codec->mutex);
-
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		if (widget->value > 2) {
-			dev_err(codec->dev, "%s: invalid AIF for I2C mode\n",
-				__func__);
-			goto err;
-		}
-	}
-	/* value need to match the Virtual port and AIF number
-	 */
-	switch (widget->value) {
-	case 0:
-		list_del_init(&core->rx_chs[port_id].list);
-	break;
-	case 1:
-		if (wcd9xxx_rx_vport_validation(port_id +
-			TAIKO_RX_PORT_START_NUMBER,
-			&taiko_p->dai[AIF1_PB].wcd9xxx_ch_list)) {
-			dev_dbg(codec->dev, "%s: RX%u is used by current requesting AIF_PB itself\n",
-				__func__, port_id + 1);
-			goto rtn;
-		}
-		list_add_tail(&core->rx_chs[port_id].list,
-			      &taiko_p->dai[AIF1_PB].wcd9xxx_ch_list);
-	break;
-	case 2:
-		if (wcd9xxx_rx_vport_validation(port_id +
-			TAIKO_RX_PORT_START_NUMBER,
-			&taiko_p->dai[AIF2_PB].wcd9xxx_ch_list)) {
-			dev_dbg(codec->dev, "%s: RX%u is used by current requesting AIF_PB itself\n",
-				__func__, port_id + 1);
-			goto rtn;
-		}
-		list_add_tail(&core->rx_chs[port_id].list,
-			      &taiko_p->dai[AIF2_PB].wcd9xxx_ch_list);
-	break;
-	case 3:
-		if (wcd9xxx_rx_vport_validation(port_id +
-			TAIKO_RX_PORT_START_NUMBER,
-			&taiko_p->dai[AIF3_PB].wcd9xxx_ch_list)) {
-			dev_dbg(codec->dev, "%s: RX%u is used by current requesting AIF_PB itself\n",
-				__func__, port_id + 1);
-			goto rtn;
-		}
-		list_add_tail(&core->rx_chs[port_id].list,
-			      &taiko_p->dai[AIF3_PB].wcd9xxx_ch_list);
-	break;
-	default:
-		pr_err("Unknown AIF %d\n", widget->value);
-		goto err;
-	}
-rtn:
-	snd_soc_dapm_mux_update_power(widget, kcontrol, 1, widget->value, e);
-
-	mutex_unlock(&codec->mutex);
-	return 0;
-err:
-	mutex_unlock(&codec->mutex);
-	return -EINVAL;
-}
-
-static const struct soc_enum slim_rx_mux_enum =
-	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(slim_rx_mux_text), slim_rx_mux_text);
-
-static const struct snd_kcontrol_new slim_rx_mux[TAIKO_RX_MAX] = {
-	SOC_DAPM_ENUM_EXT("SLIM RX1 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX2 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX3 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX4 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX5 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX6 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-	SOC_DAPM_ENUM_EXT("SLIM RX7 Mux", slim_rx_mux_enum,
-			  slim_rx_mux_get, slim_rx_mux_put),
-};
-
-static const struct snd_kcontrol_new aif_cap_mixer[] = {
-	SOC_SINGLE_EXT("SLIM TX1", SND_SOC_NOPM, TAIKO_TX1, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX2", SND_SOC_NOPM, TAIKO_TX2, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX3", SND_SOC_NOPM, TAIKO_TX3, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX4", SND_SOC_NOPM, TAIKO_TX4, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX5", SND_SOC_NOPM, TAIKO_TX5, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX6", SND_SOC_NOPM, TAIKO_TX6, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX7", SND_SOC_NOPM, TAIKO_TX7, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX8", SND_SOC_NOPM, TAIKO_TX8, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX9", SND_SOC_NOPM, TAIKO_TX9, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-	SOC_SINGLE_EXT("SLIM TX10", SND_SOC_NOPM, TAIKO_TX10, 1, 0,
-			slim_tx_mixer_get, slim_tx_mixer_put),
-};
-
-static void taiko_codec_enable_adc_block(struct snd_soc_codec *codec,
-					 int enable)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %d\n", __func__, enable);
-
-	if (enable) {
-		taiko->adc_count++;
-		snd_soc_update_bits(codec, WCD9XXX_A_CDC_CLK_OTHR_CTL,
-						0x2, 0x2);
-	} else {
-		taiko->adc_count--;
-		if (!taiko->adc_count)
-			snd_soc_update_bits(codec, WCD9XXX_A_CDC_CLK_OTHR_CTL,
-					    0x2, 0x0);
-	}
-}
-
-static int taiko_codec_enable_adc(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	u16 adc_reg;
-	u8 init_bit_shift;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s %d\n", __func__, event);
-
-	if (TAIKO_IS_1_0(core->version)) {
-		if (w->reg == TAIKO_A_TX_1_2_EN) {
-			adc_reg = TAIKO_A_TX_1_2_TEST_CTL;
-		} else if (w->reg == TAIKO_A_TX_3_4_EN) {
-			adc_reg = TAIKO_A_TX_3_4_TEST_CTL;
-		} else if (w->reg == TAIKO_A_TX_5_6_EN) {
-			adc_reg = TAIKO_A_TX_5_6_TEST_CTL;
-		} else {
-			pr_err("%s: Error, invalid adc register\n", __func__);
-			return -EINVAL;
-		}
-
-		if (w->shift == 3) {
-			init_bit_shift = 6;
-		} else if  (w->shift == 7) {
-			init_bit_shift = 7;
-		} else {
-			pr_err("%s: Error, invalid init bit postion adc register\n",
-			       __func__);
-			return -EINVAL;
-		}
-	} else {
-		switch (w->reg) {
-		case TAIKO_A_CDC_TX_1_GAIN:
-			adc_reg = TAIKO_A_TX_1_2_TEST_CTL;
-			init_bit_shift = 7;
-			break;
-		case TAIKO_A_CDC_TX_2_GAIN:
-			adc_reg = TAIKO_A_TX_1_2_TEST_CTL;
-			init_bit_shift = 6;
-			break;
-		case TAIKO_A_CDC_TX_3_GAIN:
-			adc_reg = TAIKO_A_TX_3_4_TEST_CTL;
-			init_bit_shift = 7;
-			break;
-		case TAIKO_A_CDC_TX_4_GAIN:
-			adc_reg = TAIKO_A_TX_3_4_TEST_CTL;
-			init_bit_shift = 6;
-			break;
-		case TAIKO_A_CDC_TX_5_GAIN:
-			adc_reg = TAIKO_A_TX_5_6_TEST_CTL;
-			init_bit_shift = 7;
-			break;
-		case TAIKO_A_CDC_TX_6_GAIN:
-			adc_reg = TAIKO_A_TX_5_6_TEST_CTL;
-			init_bit_shift = 6;
-			break;
-		default:
-			pr_err("%s: Error, invalid adc register\n", __func__);
-			return -EINVAL;
-		}
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-		if ((sub_mic_rec_delay == 1) && ((w->reg) == TAIKO_A_CDC_TX_3_GAIN))
-				usleep_range(400000, 400000);
-#endif
-		taiko_codec_enable_adc_block(codec, 1);
-		snd_soc_update_bits(codec, adc_reg, 1 << init_bit_shift,
-				1 << init_bit_shift);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		snd_soc_update_bits(codec, adc_reg, 1 << init_bit_shift, 0x00);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		taiko_codec_enable_adc_block(codec, 0);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_aux_pga(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: %d\n", __func__, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-		wcd9xxx_resmgr_get_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		/* AUX PGA requires RCO or MCLK */
-		wcd9xxx_resmgr_get_clk_block(&taiko->resmgr, WCD9XXX_CLK_RCO);
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 1);
-		WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 0);
-		wcd9xxx_resmgr_put_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		wcd9xxx_resmgr_put_clk_block(&taiko->resmgr, WCD9XXX_CLK_RCO);
-		WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_lineout(struct snd_soc_dapm_widget *w,
-		struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u16 lineout_gain_reg;
-
-	pr_debug("%s %d %s\n", __func__, event, w->name);
-
-	switch (w->shift) {
-	case 0:
-		lineout_gain_reg = TAIKO_A_RX_LINE_1_GAIN;
-		break;
-	case 1:
-		lineout_gain_reg = TAIKO_A_RX_LINE_2_GAIN;
-		break;
-	case 2:
-		lineout_gain_reg = TAIKO_A_RX_LINE_3_GAIN;
-		break;
-	case 3:
-		lineout_gain_reg = TAIKO_A_RX_LINE_4_GAIN;
-		break;
-	default:
-		pr_err("%s: Error, incorrect lineout register value\n",
-			__func__);
-		return -EINVAL;
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, lineout_gain_reg, 0x40, 0x40);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 WCD9XXX_CLSH_STATE_LO,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-		pr_debug("%s: sleeping 5 ms after %s PA turn on\n",
-				__func__, w->name);
-		/* Wait for CnP time after PA enable */
-		usleep_range(5000, 5100);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 WCD9XXX_CLSH_STATE_LO,
-						 WCD9XXX_CLSH_REQ_DISABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-		snd_soc_update_bits(codec, lineout_gain_reg, 0x40, 0x00);
-		pr_debug("%s: sleeping 5 ms after %s PA turn off\n",
-				__func__, w->name);
-		/* Wait for CnP time after PA disable */
-		usleep_range(5000, 5100);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_spk_pa(struct snd_soc_dapm_widget *w,
-				     struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: %d %s\n", __func__, event, w->name);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		taiko->spkr_pa_widget_on = true;
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x80);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		taiko->spkr_pa_widget_on = false;
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_dmic(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u8  dmic_clk_en;
-	u16 dmic_clk_reg;
-	s32 *dmic_clk_cnt;
-	unsigned int dmic;
-	int ret;
-
-	ret = kstrtouint(strpbrk(w->name, "123456"), 10, &dmic);
-	if (ret < 0) {
-		pr_err("%s: Invalid DMIC line on the codec\n", __func__);
-		return -EINVAL;
-	}
-
-	switch (dmic) {
-	case 1:
-	case 2:
-		dmic_clk_en = 0x01;
-		dmic_clk_cnt = &(taiko->dmic_1_2_clk_cnt);
-		dmic_clk_reg = TAIKO_A_CDC_CLK_DMIC_B1_CTL;
-		pr_debug("%s() event %d DMIC%d dmic_1_2_clk_cnt %d\n",
-			__func__, event,  dmic, *dmic_clk_cnt);
-
-		break;
-
-	case 3:
-	case 4:
-		dmic_clk_en = 0x10;
-		dmic_clk_cnt = &(taiko->dmic_3_4_clk_cnt);
-		dmic_clk_reg = TAIKO_A_CDC_CLK_DMIC_B1_CTL;
-
-		pr_debug("%s() event %d DMIC%d dmic_3_4_clk_cnt %d\n",
-			__func__, event,  dmic, *dmic_clk_cnt);
-		break;
-
-	case 5:
-	case 6:
-		dmic_clk_en = 0x01;
-		dmic_clk_cnt = &(taiko->dmic_5_6_clk_cnt);
-		dmic_clk_reg = TAIKO_A_CDC_CLK_DMIC_B2_CTL;
-
-		pr_debug("%s() event %d DMIC%d dmic_5_6_clk_cnt %d\n",
-			__func__, event,  dmic, *dmic_clk_cnt);
-
-		break;
-
-	default:
-		pr_err("%s: Invalid DMIC Selection\n", __func__);
-		return -EINVAL;
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-
-		(*dmic_clk_cnt)++;
-		if (*dmic_clk_cnt == 1)
-			snd_soc_update_bits(codec, dmic_clk_reg,
-					dmic_clk_en, dmic_clk_en);
-
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-
-		(*dmic_clk_cnt)--;
-		if (*dmic_clk_cnt  == 0)
-			snd_soc_update_bits(codec, dmic_clk_reg,
-					dmic_clk_en, 0);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_config_mad(struct snd_soc_codec *codec)
-{
-	int ret;
-	const struct firmware *fw;
-	struct mad_audio_cal *mad_cal;
-	struct firmware_cal *hwdep_cal = NULL;
-	const void *data;
-	const char *filename = TAIKO_MAD_AUDIO_FIRMWARE_PATH;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	size_t cal_size;
-
-	pr_debug("%s: enter\n", __func__);
-	/* wakeup for codec calibration access */
-	pm_qos_add_request(&taiko->pm_qos_req,
-			   PM_QOS_CPU_DMA_LATENCY,
-			   PM_QOS_DEFAULT_VALUE);
-	pm_qos_update_request(&taiko->pm_qos_req,
-			      msm_cpuidle_get_deep_idle_latency());
-	if (!taiko->fw_data) {
-		dev_err(codec->dev, "%s: invalid cal data\n",
-				 __func__);
-		return -ENODEV;
-	}
-	hwdep_cal = wcdcal_get_fw_cal(taiko->fw_data, WCD9XXX_MAD_CAL);
-	if (hwdep_cal) {
-		data = hwdep_cal->data;
-		cal_size = hwdep_cal->size;
-		dev_dbg(codec->dev, "%s: using hwdep calibration\n",
-				__func__);
-	} else {
-		ret = request_firmware(&fw, filename, codec->dev);
-		if (ret != 0) {
-			pr_err("Failed to acquire MAD firwmare data %s: %d\n",
-				filename, ret);
-			return -ENODEV;
-		}
-		if (!fw) {
-			dev_err(codec->dev, "failed to get mad fw");
-			return -ENODEV;
-		}
-		data = fw->data;
-		cal_size = fw->size;
-		dev_dbg(codec->dev, "%s: using request_firmware calibration\n",
-				__func__);
-	}
-	if (cal_size < sizeof(struct mad_audio_cal)) {
-		pr_err("%s: incorrect hwdep cal size %zu\n",
-			__func__, cal_size);
-		ret = -ENOMEM;
-		goto err;
-	}
-
-	mad_cal = (struct mad_audio_cal *)(data);
-	if (!mad_cal) {
-		dev_err(codec->dev, "%s: Invalid calibration data\n",
-				__func__);
-		ret =  -EINVAL;
-		goto err;
-	}
-
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_MAIN_CTL_2,
-		      mad_cal->microphone_info.cycle_time);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_MAIN_CTL_1, 0xFF << 3,
-			    ((uint16_t)mad_cal->microphone_info.settle_time)
-			    << 3);
-
-	/* Audio */
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_8,
-		      mad_cal->audio_info.rms_omit_samples);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_1,
-			    0x07 << 4, mad_cal->audio_info.rms_comp_time << 4);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_2, 0x03 << 2,
-			    mad_cal->audio_info.detection_mechanism << 2);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_7,
-		      mad_cal->audio_info.rms_diff_threshold & 0x3F);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_5,
-		      mad_cal->audio_info.rms_threshold_lsb);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_AUDIO_CTL_6,
-		      mad_cal->audio_info.rms_threshold_msb);
-
-
-	/* Beacon */
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_8,
-		      mad_cal->beacon_info.rms_omit_samples);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_BEACON_CTL_1,
-			    0x07 << 4, mad_cal->beacon_info.rms_comp_time);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_BEACON_CTL_2, 0x03 << 2,
-			    mad_cal->beacon_info.detection_mechanism << 2);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_7,
-		      mad_cal->beacon_info.rms_diff_threshold & 0x1F);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_5,
-		      mad_cal->beacon_info.rms_threshold_lsb);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_BEACON_CTL_6,
-		      mad_cal->beacon_info.rms_threshold_msb);
-
-	/* Ultrasound */
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_BEACON_CTL_1,
-			    0x07 << 4, mad_cal->beacon_info.rms_comp_time);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_MAD_ULTR_CTL_2, 0x03 << 2,
-			    mad_cal->ultrasound_info.detection_mechanism);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_ULTR_CTL_7,
-		      mad_cal->ultrasound_info.rms_diff_threshold & 0x1F);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_ULTR_CTL_5,
-		      mad_cal->ultrasound_info.rms_threshold_lsb);
-	snd_soc_write(codec, TAIKO_A_CDC_MAD_ULTR_CTL_6,
-		      mad_cal->ultrasound_info.rms_threshold_msb);
-
-	pr_debug("%s: leave ret %d\n", __func__, ret);
-	pm_qos_update_request(&taiko->pm_qos_req,
-			      PM_QOS_DEFAULT_VALUE);
-	pm_qos_remove_request(&taiko->pm_qos_req);
-err:
-	if (!hwdep_cal)
-		release_firmware(fw);
-	return ret;
-}
-
-static int taiko_codec_enable_mad(struct snd_soc_dapm_widget *w,
-				  struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int ret = 0;
-
-	pr_debug("%s %d\n", __func__, event);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		ret = taiko_codec_config_mad(codec);
-		if (ret) {
-			pr_err("%s: Failed to config MAD\n", __func__);
-			break;
-		}
-		break;
-	}
-	return ret;
-}
-
-static int taiko_codec_enable_micbias(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u16 micb_int_reg = 0, micb_ctl_reg = 0;
-	u8 cfilt_sel_val = 0;
-	char *internal1_text = "Internal1";
-	char *internal2_text = "Internal2";
-	char *internal3_text = "Internal3";
-	enum wcd9xxx_notify_event e_post_off, e_pre_on, e_post_on;
-
-	pr_debug("%s: w->name %s event %d\n", __func__, w->name, event);
-	if (strnstr(w->name, "MIC BIAS1", sizeof("MIC BIAS1"))) {
-		micb_ctl_reg = TAIKO_A_MICB_1_CTL;
-		micb_int_reg = TAIKO_A_MICB_1_INT_RBIAS;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias1_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_1_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_1_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_1_OFF;
-	} else if (strnstr(w->name, "MIC BIAS2", sizeof("MIC BIAS2"))) {
-		micb_ctl_reg = TAIKO_A_MICB_2_CTL;
-		micb_int_reg = TAIKO_A_MICB_2_INT_RBIAS;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias2_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_2_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_2_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_2_OFF;
-	} else if (strnstr(w->name, "MIC BIAS3", sizeof("MIC BIAS3"))) {
-		micb_ctl_reg = TAIKO_A_MICB_3_CTL;
-		micb_int_reg = TAIKO_A_MICB_3_INT_RBIAS;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias3_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_3_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_3_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_3_OFF;
-	} else if (strnstr(w->name, "MIC BIAS4", sizeof("MIC BIAS4"))) {
-		micb_ctl_reg = TAIKO_A_MICB_4_CTL;
-		micb_int_reg = taiko->resmgr.reg_addr->micb_4_int_rbias;
-		cfilt_sel_val = taiko->resmgr.pdata->micbias.bias4_cfilt_sel;
-		e_pre_on = WCD9XXX_EVENT_PRE_MICBIAS_4_ON;
-		e_post_on = WCD9XXX_EVENT_POST_MICBIAS_4_ON;
-		e_post_off = WCD9XXX_EVENT_POST_MICBIAS_4_OFF;
-	} else {
-		pr_err("%s: Error, invalid micbias %s\n", __func__, w->name);
-		return -EINVAL;
-	}
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/* Let MBHC module know so micbias switch to be off */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_pre_on);
-
-		/* Get cfilt */
-		wcd9xxx_resmgr_cfilt_get(&taiko->resmgr, cfilt_sel_val);
-
-		if (strnstr(w->name, internal1_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0xE0, 0xE0);
-		else if (strnstr(w->name, internal2_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x1C, 0x1C);
-		else if (strnstr(w->name, internal3_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x3, 0x3);
-
-		if (taiko->mbhc_started && micb_ctl_reg == TAIKO_A_MICB_2_CTL) {
-			if (++taiko->micb_2_users == 1) {
-				if (taiko->resmgr.pdata->
-				    micbias.bias2_is_headset_only)
-					wcd9xxx_resmgr_add_cond_update_bits(
-							 &taiko->resmgr,
-							 WCD9XXX_COND_HPH_MIC,
-							 micb_ctl_reg, w->shift,
-							 false);
-				else
-					snd_soc_update_bits(codec, micb_ctl_reg,
-							    1 << w->shift,
-							    1 << w->shift);
-			}
-			pr_debug("%s: micb_2_users %d\n", __func__,
-				 taiko->micb_2_users);
-		} else {
-			snd_soc_update_bits(codec, micb_ctl_reg, 1 << w->shift,
-					    1 << w->shift);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		usleep_range(20000, 20000);
-		/* Let MBHC module know so micbias is on */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_post_on);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		if (taiko->mbhc_started && micb_ctl_reg == TAIKO_A_MICB_2_CTL) {
-			if (--taiko->micb_2_users == 0) {
-				if (taiko->resmgr.pdata->
-				    micbias.bias2_is_headset_only)
-					wcd9xxx_resmgr_rm_cond_update_bits(
-							&taiko->resmgr,
-							WCD9XXX_COND_HPH_MIC,
-							micb_ctl_reg, 7, false);
-				else
-					snd_soc_update_bits(codec, micb_ctl_reg,
-							    1 << w->shift, 0);
-			}
-			pr_debug("%s: micb_2_users %d\n", __func__,
-				 taiko->micb_2_users);
-			WARN(taiko->micb_2_users < 0,
-			     "Unexpected micbias users %d\n",
-			     taiko->micb_2_users);
-		} else {
-			snd_soc_update_bits(codec, micb_ctl_reg, 1 << w->shift,
-					    0);
-		}
-
-		/* Let MBHC module know so micbias switch to be off */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_post_off);
-
-		if (strnstr(w->name, internal1_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x80, 0x00);
-		else if (strnstr(w->name, internal2_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x10, 0x00);
-		else if (strnstr(w->name, internal3_text, 30))
-			snd_soc_update_bits(codec, micb_int_reg, 0x2, 0x0);
-
-		/* Put cfilt */
-		wcd9xxx_resmgr_cfilt_put(&taiko->resmgr, cfilt_sel_val);
-		break;
-	}
-
-	return 0;
-}
-
-/* called under codec_resource_lock acquisition */
-static int taiko_enable_mbhc_micbias(struct snd_soc_codec *codec, bool enable,
-				     enum wcd9xxx_micbias_num micb_num)
-{
-	int rc;
-	const char *micbias;
-
-	if (micb_num != MBHC_MICBIAS3 &&
-	    micb_num != MBHC_MICBIAS2)
-		return -EINVAL;
-
-	micbias = (micb_num == MBHC_MICBIAS3) ?
-			DAPM_MICBIAS3_EXTERNAL_STANDALONE :
-			DAPM_MICBIAS2_EXTERNAL_STANDALONE;
-
-	if (enable)
-		rc = snd_soc_dapm_force_enable_pin(&codec->dapm,
-					     micbias);
-	else
-		rc = snd_soc_dapm_disable_pin(&codec->dapm,
-					     micbias);
-	if (!rc)
-		snd_soc_dapm_sync(&codec->dapm);
-	pr_debug("%s: leave ret %d\n", __func__, rc);
-	return rc;
-}
-
-static void tx_hpf_corner_freq_callback(struct work_struct *work)
-{
-	struct delayed_work *hpf_delayed_work;
-	struct hpf_work *hpf_work;
-	struct taiko_priv *taiko;
-	struct snd_soc_codec *codec;
-	u16 tx_mux_ctl_reg;
-	u8 hpf_cut_of_freq;
-
-	hpf_delayed_work = to_delayed_work(work);
-	hpf_work = container_of(hpf_delayed_work, struct hpf_work, dwork);
-	taiko = hpf_work->taiko;
-	codec = hpf_work->taiko->codec;
-	hpf_cut_of_freq = hpf_work->tx_hpf_cut_of_freq;
-
-	tx_mux_ctl_reg = TAIKO_A_CDC_TX1_MUX_CTL +
-			(hpf_work->decimator - 1) * 8;
-
-	pr_debug("%s(): decimator %u hpf_cut_of_freq 0x%x\n", __func__,
-		hpf_work->decimator, (unsigned int)hpf_cut_of_freq);
-
-	snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x30, hpf_cut_of_freq << 4);
-}
-
-#define  TX_MUX_CTL_CUT_OFF_FREQ_MASK	0x30
-#define  CF_MIN_3DB_4HZ			0x0
-#define  CF_MIN_3DB_75HZ		0x1
-#define  CF_MIN_3DB_150HZ		0x2
-
-static int taiko_codec_enable_dec(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	unsigned int decimator;
-	char *dec_name = NULL;
-	char *widget_name = NULL;
-	char *temp;
-	int ret = 0;
-	u16 dec_reset_reg, tx_vol_ctl_reg, tx_mux_ctl_reg;
-	u8 dec_hpf_cut_of_freq;
-	int offset;
-
-
-	pr_debug("%s %d\n", __func__, event);
-
-	widget_name = kstrndup(w->name, 15, GFP_KERNEL);
-	if (!widget_name)
-		return -ENOMEM;
-	temp = widget_name;
-
-	dec_name = strsep(&widget_name, " ");
-	widget_name = temp;
-	if (!dec_name) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, w->name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	ret = kstrtouint(strpbrk(dec_name, "123456789"), 10, &decimator);
-	if (ret < 0) {
-		pr_err("%s: Invalid decimator = %s\n", __func__, dec_name);
-		ret =  -EINVAL;
-		goto out;
-	}
-
-	pr_debug("%s(): widget = %s dec_name = %s decimator = %u\n", __func__,
-			w->name, dec_name, decimator);
-
-	if (w->reg == TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL) {
-		dec_reset_reg = TAIKO_A_CDC_CLK_TX_RESET_B1_CTL;
-		offset = 0;
-	} else if (w->reg == TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL) {
-		dec_reset_reg = TAIKO_A_CDC_CLK_TX_RESET_B2_CTL;
-		offset = 8;
-	} else {
-		pr_err("%s: Error, incorrect dec\n", __func__);
-		return -EINVAL;
-	}
-
-	tx_vol_ctl_reg = TAIKO_A_CDC_TX1_VOL_CTL_CFG + 8 * (decimator - 1);
-	tx_mux_ctl_reg = TAIKO_A_CDC_TX1_MUX_CTL + 8 * (decimator - 1);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-
-		/* Enableable TX digital mute */
-		snd_soc_update_bits(codec, tx_vol_ctl_reg, 0x01, 0x01);
-
-		snd_soc_update_bits(codec, dec_reset_reg, 1 << w->shift,
-			1 << w->shift);
-		snd_soc_update_bits(codec, dec_reset_reg, 1 << w->shift, 0x0);
-
-		dec_hpf_cut_of_freq = snd_soc_read(codec, tx_mux_ctl_reg);
-
-		dec_hpf_cut_of_freq = (dec_hpf_cut_of_freq & 0x30) >> 4;
-
-		tx_hpf_work[decimator - 1].tx_hpf_cut_of_freq =
-			dec_hpf_cut_of_freq;
-
-		if ((dec_hpf_cut_of_freq != CF_MIN_3DB_150HZ)) {
-
-			/* set cut of freq to CF_MIN_3DB_150HZ (0x1); */
-			snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x30,
-					    CF_MIN_3DB_150HZ << 4);
-		}
-
-		/* enable HPF */
-		snd_soc_update_bits(codec, tx_mux_ctl_reg , 0x08, 0x00);
-
-		break;
-
-	case SND_SOC_DAPM_POST_PMU:
-
-		/* Disable TX digital mute */
-		snd_soc_update_bits(codec, tx_vol_ctl_reg, 0x01, 0x00);
-
-		if (tx_hpf_work[decimator - 1].tx_hpf_cut_of_freq !=
-				CF_MIN_3DB_150HZ) {
-
-			schedule_delayed_work(&tx_hpf_work[decimator - 1].dwork,
-					msecs_to_jiffies(300));
-		}
-		/* apply the digital gain after the decimator is enabled*/
-		if ((w->shift + offset) < ARRAY_SIZE(tx_digital_gain_reg))
-			snd_soc_write(codec,
-				  tx_digital_gain_reg[w->shift + offset],
-				  snd_soc_read(codec,
-				  tx_digital_gain_reg[w->shift + offset])
-				  );
-
-		break;
-
-	case SND_SOC_DAPM_PRE_PMD:
-
-		snd_soc_update_bits(codec, tx_vol_ctl_reg, 0x01, 0x01);
-		cancel_delayed_work_sync(&tx_hpf_work[decimator - 1].dwork);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-
-		snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x08, 0x08);
-		snd_soc_update_bits(codec, tx_mux_ctl_reg, 0x30,
-			(tx_hpf_work[decimator - 1].tx_hpf_cut_of_freq) << 4);
-
-		break;
-	}
-out:
-	kfree(widget_name);
-	return ret;
-}
-
-static int taiko_codec_enable_vdd_spkr(struct snd_soc_dapm_widget *w,
-				       struct snd_kcontrol *kcontrol, int event)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec = w->codec;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: %d %s\n", __func__, event, w->name);
-
-	WARN_ONCE(!priv->spkdrv_reg, "SPKDRV supply %s isn't defined\n",
-		  WCD9XXX_VDD_SPKDRV_NAME);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		if (priv->spkdrv_reg) {
-			ret = regulator_enable(priv->spkdrv_reg);
-			if (ret)
-				pr_err("%s: Failed to enable spkdrv_reg %s\n",
-				       __func__, WCD9XXX_VDD_SPKDRV_NAME);
-		}
-		if (spkr_drv_wrnd > 0) {
-			WARN_ON(!(snd_soc_read(codec, TAIKO_A_SPKR_DRV_EN) &
-				  0x80));
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80,
-					    0x00);
-		}
-		if (TAIKO_IS_1_0(core->version))
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_DBG_PWRSTG,
-					    0x24, 0x00);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		if (TAIKO_IS_1_0(core->version))
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_DBG_PWRSTG,
-					    0x24, 0x24);
-		if (spkr_drv_wrnd > 0) {
-			WARN_ON(!!(snd_soc_read(codec, TAIKO_A_SPKR_DRV_EN) &
-				   0x80));
-			snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80,
-					    0x80);
-		}
-		if (priv->spkdrv_reg) {
-			ret = regulator_disable(priv->spkdrv_reg);
-			if (ret)
-				pr_err("%s: Failed to disable spkdrv_reg %s\n",
-				       __func__, WCD9XXX_VDD_SPKDRV_NAME);
-		}
-		break;
-	}
-
-	return ret;
-}
-
-static int taiko_codec_enable_interpolator(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-
-	pr_debug("%s %d %s\n", __func__, event, w->name);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_RESET_CTL,
-			1 << w->shift, 1 << w->shift);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_RESET_CTL,
-			1 << w->shift, 0x0);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		/* apply the digital gain after the interpolator is enabled*/
-		if ((w->shift) < ARRAY_SIZE(rx_digital_gain_reg))
-			snd_soc_write(codec,
-				  rx_digital_gain_reg[w->shift],
-				  snd_soc_read(codec,
-				  rx_digital_gain_reg[w->shift])
-				  );
-		break;
-	}
-	return 0;
-}
-
-/* called under codec_resource_lock acquisition */
-static int __taiko_codec_enable_ldo_h(struct snd_soc_dapm_widget *w,
-				      struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: enter\n", __func__);
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/*
-		 * ldo_h_users is protected by codec->mutex, don't need
-		 * additional mutex
-		 */
-		if (++priv->ldo_h_users == 1) {
-			WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-			wcd9xxx_resmgr_get_bandgap(&priv->resmgr,
-						   WCD9XXX_BANDGAP_AUDIO_MODE);
-			wcd9xxx_resmgr_get_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			snd_soc_update_bits(codec, TAIKO_A_LDO_H_MODE_1, 1 << 7,
-					    1 << 7);
-			wcd9xxx_resmgr_put_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-			pr_debug("%s: ldo_h_users %d\n", __func__,
-				 priv->ldo_h_users);
-			/* LDO enable requires 1ms to settle down */
-			usleep_range(1000, 1000);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		if (--priv->ldo_h_users == 0) {
-			WCD9XXX_BG_CLK_LOCK(&priv->resmgr);
-			wcd9xxx_resmgr_get_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			snd_soc_update_bits(codec, TAIKO_A_LDO_H_MODE_1, 1 << 7,
-					    0);
-			wcd9xxx_resmgr_put_clk_block(&priv->resmgr,
-						     WCD9XXX_CLK_RCO);
-			wcd9xxx_resmgr_put_bandgap(&priv->resmgr,
-						   WCD9XXX_BANDGAP_AUDIO_MODE);
-			WCD9XXX_BG_CLK_UNLOCK(&priv->resmgr);
-			pr_debug("%s: ldo_h_users %d\n", __func__,
-				 priv->ldo_h_users);
-		}
-		WARN(priv->ldo_h_users < 0, "Unexpected ldo_h users %d\n",
-		     priv->ldo_h_users);
-		break;
-	}
-	pr_debug("%s: leave\n", __func__);
-	return 0;
-}
-
-static int taiko_codec_enable_ldo_h(struct snd_soc_dapm_widget *w,
-				    struct snd_kcontrol *kcontrol, int event)
-{
-	int rc;
-	rc = __taiko_codec_enable_ldo_h(w, kcontrol, event);
-	return rc;
-}
-
-static int taiko_codec_enable_rx_bias(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %d\n", __func__, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 1);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		wcd9xxx_resmgr_enable_rx_bias(&taiko->resmgr, 0);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_hphl_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	/* uint32_t impedl, impedr; */
-	/* int ret = 0; */
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x02, 0x02);
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_HPHL,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-
-		/*ret = wcd9xxx_mbhc_get_impedance(&taiko_p->mbhc,
-					&impedl, &impedr);
-		if (!ret) */
-		wcd9xxx_clsh_imped_config(codec, 0);
-		/* else
-			dev_err(codec->dev, "Failed to get mbhc impedance %d\n",
-						ret); */
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x02, 0x00);
-	}
-	return 0;
-}
-
-static int taiko_hphr_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x04, 0x04);
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x40);
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_HPHR,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RDAC_CLK_EN_CTL,
-							0x04, 0x00);
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_anc(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	const char *filename;
-	const struct firmware *fw;
-	int i;
-	int ret =0;
-	int num_anc_slots;
-	struct wcd9xxx_anc_header *anc_head;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	struct firmware_cal *hwdep_cal = NULL;
-	u32 anc_writes_size = 0;
-	int anc_size_remaining;
-	u32 *anc_ptr;
-	u16 reg;
-	u8 mask, val, old_val;
-	size_t cal_size;
-	const void *data;
-
-
-	if (taiko->anc_func == 0)
-		return 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		filename = "wcd9320/wcd9320_anc.bin";
-		hwdep_cal = wcdcal_get_fw_cal(taiko->fw_data, WCD9XXX_ANC_CAL);
-		if (hwdep_cal) {
-			data = hwdep_cal->data;
-			cal_size = hwdep_cal->size;
-			dev_dbg(codec->dev, "%s: using hwdep calibration\n",
-				__func__);
-		} else {
-			ret = request_firmware(&fw, filename, codec->dev);
-			if (ret != 0) {
-				dev_err(codec->dev, "Failed to acquire ANC data: %d\n",
-					ret);
-				return -ENODEV;
-			}
-			if (!fw) {
-				dev_err(codec->dev, "failed to get anc fw");
-				return -ENODEV;
-			}
-			data = fw->data;
-			cal_size = fw->size;
-			dev_dbg(codec->dev, "%s: using request_firmware calibration\n",
-					 __func__);
-
-		}
-
-		if (cal_size < sizeof(struct wcd9xxx_anc_header)) {
-			dev_err(codec->dev, "Not enough data\n");
-			goto err;
-		}
-
-		/* First number is the number of register writes */
-		anc_head = (struct wcd9xxx_anc_header *)(data);
-		anc_ptr = (u32 *)(data +
-				  sizeof(struct wcd9xxx_anc_header));
-		anc_size_remaining = cal_size -
-				     sizeof(struct wcd9xxx_anc_header);
-		num_anc_slots = anc_head->num_anc_slots;
-
-		if (taiko->anc_slot >= num_anc_slots) {
-			dev_err(codec->dev, "Invalid ANC slot selected\n");
-			ret = -EINVAL;
-			goto err;
-		}
-		for (i = 0; i < num_anc_slots; i++) {
-			if (anc_size_remaining < TAIKO_PACKED_REG_SIZE) {
-				dev_err(codec->dev, "Invalid register format\n");
-				ret = -EINVAL;
-				goto err;
-			}
-			anc_writes_size = (u32)(*anc_ptr);
-			anc_size_remaining -= sizeof(u32);
-			anc_ptr += 1;
-
-			if (anc_writes_size * TAIKO_PACKED_REG_SIZE
-				> anc_size_remaining) {
-				dev_err(codec->dev, "Invalid register format\n");
-				ret = -EINVAL;
-				goto err;
-			}
-
-			if (taiko->anc_slot == i)
-				break;
-
-			anc_size_remaining -= (anc_writes_size *
-				TAIKO_PACKED_REG_SIZE);
-			anc_ptr += anc_writes_size;
-		}
-		if (i == num_anc_slots) {
-			dev_err(codec->dev, "Selected ANC slot not present\n");
-			ret = -EINVAL;
-			goto err;
-		}
-		for (i = 0; i < anc_writes_size; i++) {
-			TAIKO_CODEC_UNPACK_ENTRY(anc_ptr[i], reg,
-				mask, val);
-			old_val = snd_soc_read(codec, reg);
-			snd_soc_write(codec, reg, (old_val & ~mask) |
-				(val & mask));
-		}
-		if (!hwdep_cal)
-			release_firmware(fw);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		msleep(40);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_ANC1_B1_CTL, 0x01, 0x00);
-		snd_soc_update_bits(codec, TAIKO_A_CDC_ANC2_B1_CTL, 0x02, 0x00);
-		msleep(20);
-		snd_soc_write(codec, TAIKO_A_CDC_CLK_ANC_RESET_CTL, 0x0F);
-		snd_soc_write(codec, TAIKO_A_CDC_CLK_ANC_CLK_EN_CTL, 0);
-		snd_soc_write(codec, TAIKO_A_CDC_CLK_ANC_RESET_CTL, 0xFF);
-		break;
-	}
-	return 0;
-err:
-	if (!hwdep_cal)
-		release_firmware(fw);
-	return ret;
-
-}
-
-static int taiko_hph_pa_event(struct snd_soc_dapm_widget *w,
-			      struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	enum wcd9xxx_notify_event e_pre_on, e_post_off;
-	u8 req_clsh_state;
-	u32 pa_settle_time = TAIKO_HPH_PA_SETTLE_COMP_OFF;
-
-	pr_debug("%s: %s event = %d\n", __func__, w->name, event);
-	if (w->shift == 5) {
-		e_pre_on = WCD9XXX_EVENT_PRE_HPHL_PA_ON;
-		e_post_off = WCD9XXX_EVENT_POST_HPHL_PA_OFF;
-		req_clsh_state = WCD9XXX_CLSH_STATE_HPHL;
-	} else if (w->shift == 4) {
-		e_pre_on = WCD9XXX_EVENT_PRE_HPHR_PA_ON;
-		e_post_off = WCD9XXX_EVENT_POST_HPHR_PA_OFF;
-		req_clsh_state = WCD9XXX_CLSH_STATE_HPHR;
-	} else {
-		pr_err("%s: Invalid w->shift %d\n", __func__, w->shift);
-		return -EINVAL;
-	}
-
-	if (taiko->comp_enabled[COMPANDER_1])
-		pa_settle_time = TAIKO_HPH_PA_SETTLE_COMP_ON;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		/* Let MBHC module know PA is turning on */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_pre_on);
-		break;
-
-	case SND_SOC_DAPM_POST_PMU:
-		usleep_range(pa_settle_time, pa_settle_time + 1000);
-		pr_debug("%s: sleep %d us after %s PA enable\n", __func__,
-				pa_settle_time, w->name);
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 req_clsh_state,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		usleep_range(pa_settle_time, pa_settle_time + 1000);
-		pr_debug("%s: sleep %d us after %s PA disable\n", __func__,
-				pa_settle_time, w->name);
-
-		/* Let MBHC module know PA turned off */
-		wcd9xxx_resmgr_notifier_call(&taiko->resmgr, e_post_off);
-
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 req_clsh_state,
-						 WCD9XXX_CLSH_REQ_DISABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_anc_hph(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int ret = 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		ret = taiko_hph_pa_event(w, kcontrol, event);
-		if (w->shift == 4) {
-			ret |= taiko_codec_enable_anc(w, kcontrol, event);
-			msleep(50);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		if (w->shift == 4) {
-			snd_soc_update_bits(codec,
-					TAIKO_A_RX_HPH_CNP_EN, 0x30, 0x30);
-			msleep(30);
-		}
-		ret = taiko_hph_pa_event(w, kcontrol, event);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		if (w->shift == 5) {
-			snd_soc_update_bits(codec,
-					TAIKO_A_RX_HPH_CNP_EN, 0x30, 0x00);
-			msleep(40);
-			snd_soc_update_bits(codec,
-					TAIKO_A_TX_7_MBHC_EN, 0x80, 00);
-			ret |= taiko_codec_enable_anc(w, kcontrol, event);
-		}
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		ret = taiko_hph_pa_event(w, kcontrol, event);
-		break;
-	}
-	return ret;
-}
-
-static const struct snd_soc_dapm_widget taiko_dapm_i2s_widgets[] = {
-	SND_SOC_DAPM_SUPPLY("RX_I2S_CLK", TAIKO_A_CDC_CLK_RX_I2S_CTL,
-	4, 0, NULL, 0),
-	SND_SOC_DAPM_SUPPLY("TX_I2S_CLK", TAIKO_A_CDC_CLK_TX_I2S_CTL, 4,
-	0, NULL, 0),
-};
-
-static int taiko_lineout_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko->clsh_d,
-						 WCD9XXX_CLSH_STATE_LO,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x40);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, w->reg, 0x40, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_spk_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-	return 0;
-}
-
-static const struct snd_soc_dapm_route audio_i2s_map[] = {
-	{"SLIM RX1", NULL, "RX_I2S_CLK"},
-	{"SLIM RX2", NULL, "RX_I2S_CLK"},
-	{"SLIM RX3", NULL, "RX_I2S_CLK"},
-	{"SLIM RX4", NULL, "RX_I2S_CLK"},
-
-	{"SLIM TX7 MUX", NULL, "TX_I2S_CLK"},
-	{"SLIM TX8 MUX", NULL, "TX_I2S_CLK"},
-	{"SLIM TX9 MUX", NULL, "TX_I2S_CLK"},
-	{"SLIM TX10 MUX", NULL, "TX_I2S_CLK"},
-};
-
-static const struct snd_soc_dapm_route audio_i2s_map_1_0[] = {
-	{"RX_I2S_CLK", NULL, "CDC_CONN"},
-};
-
-static const struct snd_soc_dapm_route audio_i2s_map_2_0[] = {
-	{"RX_I2S_CLK", NULL, "CDC_I2S_RX_CONN"},
-};
-
-static const struct snd_soc_dapm_route audio_map[] = {
-	/* SLIMBUS Connections */
-	{"AIF1 CAP", NULL, "AIF1_CAP Mixer"},
-	{"AIF2 CAP", NULL, "AIF2_CAP Mixer"},
-	{"AIF3 CAP", NULL, "AIF3_CAP Mixer"},
-	/* VI Feedback */
-	{"AIF4 VI", NULL, "VIONOFF"},
-	{"VIONOFF", "Switch", "VIINPUT"},
-
-	/* MAD */
-	{"AIF4 MAD", NULL, "CDC_CONN"},
-	{"MADONOFF", "Switch", "MADINPUT"},
-	{"AIF4 MAD", NULL, "MADONOFF"},
-
-	/* SLIM_MIXER("AIF1_CAP Mixer"),*/
-	{"AIF1_CAP Mixer", "SLIM TX1", "SLIM TX1 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX2", "SLIM TX2 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX3", "SLIM TX3 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX4", "SLIM TX4 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX5", "SLIM TX5 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX6", "SLIM TX6 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX7", "SLIM TX7 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX8", "SLIM TX8 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX9", "SLIM TX9 MUX"},
-	{"AIF1_CAP Mixer", "SLIM TX10", "SLIM TX10 MUX"},
-	/* SLIM_MIXER("AIF2_CAP Mixer"),*/
-	{"AIF2_CAP Mixer", "SLIM TX1", "SLIM TX1 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX2", "SLIM TX2 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX3", "SLIM TX3 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX4", "SLIM TX4 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX5", "SLIM TX5 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX6", "SLIM TX6 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX7", "SLIM TX7 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX8", "SLIM TX8 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX9", "SLIM TX9 MUX"},
-	{"AIF2_CAP Mixer", "SLIM TX10", "SLIM TX10 MUX"},
-	/* SLIM_MIXER("AIF3_CAP Mixer"),*/
-	{"AIF3_CAP Mixer", "SLIM TX1", "SLIM TX1 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX2", "SLIM TX2 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX3", "SLIM TX3 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX4", "SLIM TX4 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX5", "SLIM TX5 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX6", "SLIM TX6 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX7", "SLIM TX7 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX8", "SLIM TX8 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX9", "SLIM TX9 MUX"},
-	{"AIF3_CAP Mixer", "SLIM TX10", "SLIM TX10 MUX"},
-
-	{"SLIM TX1 MUX", "DEC1", "DEC1 MUX"},
-
-	{"SLIM TX2 MUX", "DEC2", "DEC2 MUX"},
-
-	{"SLIM TX3 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX3 MUX", "RMIX1", "RX1 MIX1"},
-	{"SLIM TX3 MUX", "RMIX2", "RX2 MIX1"},
-	{"SLIM TX3 MUX", "RMIX3", "RX3 MIX1"},
-	{"SLIM TX3 MUX", "RMIX4", "RX4 MIX1"},
-	{"SLIM TX3 MUX", "RMIX5", "RX5 MIX1"},
-	{"SLIM TX3 MUX", "RMIX6", "RX6 MIX1"},
-	{"SLIM TX3 MUX", "RMIX7", "RX7 MIX1"},
-
-	{"SLIM TX4 MUX", "DEC4", "DEC4 MUX"},
-
-	{"SLIM TX5 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX5 MUX", "RMIX1", "RX1 MIX1"},
-	{"SLIM TX5 MUX", "RMIX2", "RX2 MIX1"},
-	{"SLIM TX5 MUX", "RMIX3", "RX3 MIX1"},
-	{"SLIM TX5 MUX", "RMIX4", "RX4 MIX1"},
-	{"SLIM TX5 MUX", "RMIX5", "RX5 MIX1"},
-	{"SLIM TX5 MUX", "RMIX6", "RX6 MIX1"},
-	{"SLIM TX5 MUX", "RMIX7", "RX7 MIX1"},
-
-	{"SLIM TX6 MUX", "DEC6", "DEC6 MUX"},
-
-	{"SLIM TX7 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX7 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX7 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX7 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX7 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX7 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX7 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX7 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX7 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX7 MUX", "DEC10", "DEC10 MUX"},
-	{"SLIM TX7 MUX", "RMIX1", "RX1 MIX1"},
-	{"SLIM TX7 MUX", "RMIX2", "RX2 MIX1"},
-	{"SLIM TX7 MUX", "RMIX3", "RX3 MIX1"},
-	{"SLIM TX7 MUX", "RMIX4", "RX4 MIX1"},
-	{"SLIM TX7 MUX", "RMIX5", "RX5 MIX1"},
-	{"SLIM TX7 MUX", "RMIX6", "RX6 MIX1"},
-	{"SLIM TX7 MUX", "RMIX7", "RX7 MIX1"},
-
-	{"SLIM TX8 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX8 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX8 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX8 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX8 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX8 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX8 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX8 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX8 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX8 MUX", "DEC10", "DEC10 MUX"},
-
-	{"SLIM TX9 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX9 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX9 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX9 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX9 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX9 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX9 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX9 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX9 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX9 MUX", "DEC10", "DEC10 MUX"},
-
-	{"SLIM TX10 MUX", "DEC1", "DEC1 MUX"},
-	{"SLIM TX10 MUX", "DEC2", "DEC2 MUX"},
-	{"SLIM TX10 MUX", "DEC3", "DEC3 MUX"},
-	{"SLIM TX10 MUX", "DEC4", "DEC4 MUX"},
-	{"SLIM TX10 MUX", "DEC5", "DEC5 MUX"},
-	{"SLIM TX10 MUX", "DEC6", "DEC6 MUX"},
-	{"SLIM TX10 MUX", "DEC7", "DEC7 MUX"},
-	{"SLIM TX10 MUX", "DEC8", "DEC8 MUX"},
-	{"SLIM TX10 MUX", "DEC9", "DEC9 MUX"},
-	{"SLIM TX10 MUX", "DEC10", "DEC10 MUX"},
-
-	/* Earpiece (RX MIX1) */
-	{"EAR", NULL, "EAR PA"},
-	{"EAR PA", NULL, "EAR_PA_MIXER"},
-	{"EAR_PA_MIXER", NULL, "DAC1"},
-	{"DAC1", NULL, "RX_BIAS"},
-
-	{"ANC EAR", NULL, "ANC EAR PA"},
-	{"ANC EAR PA", NULL, "EAR_PA_MIXER"},
-	{"ANC1 FB MUX", "EAR_HPH_L", "RX1 MIX2"},
-	{"ANC1 FB MUX", "EAR_LINE_1", "RX2 MIX2"},
-
-	/* Headset (RX MIX1 and RX MIX2) */
-	{"HEADPHONE", NULL, "HPHL"},
-	{"HEADPHONE", NULL, "HPHR"},
-
-	{"HPHL", NULL, "HPHL_PA_MIXER"},
-	{"HPHL_PA_MIXER", NULL, "HPHL DAC"},
-	{"HPHL DAC", NULL, "RX_BIAS"},
-
-	{"HPHR", NULL, "HPHR_PA_MIXER"},
-	{"HPHR_PA_MIXER", NULL, "HPHR DAC"},
-	{"HPHR DAC", NULL, "RX_BIAS"},
-
-	{"ANC HEADPHONE", NULL, "ANC HPHL"},
-	{"ANC HEADPHONE", NULL, "ANC HPHR"},
-
-	{"ANC HPHL", NULL, "HPHL_PA_MIXER"},
-	{"ANC HPHR", NULL, "HPHR_PA_MIXER"},
-
-	{"ANC1 MUX", "ADC1", "ADC1"},
-	{"ANC1 MUX", "ADC2", "ADC2"},
-	{"ANC1 MUX", "ADC3", "ADC3"},
-	{"ANC1 MUX", "ADC4", "ADC4"},
-	{"ANC1 MUX", "DMIC1", "DMIC1"},
-	{"ANC1 MUX", "DMIC2", "DMIC2"},
-	{"ANC1 MUX", "DMIC3", "DMIC3"},
-	{"ANC1 MUX", "DMIC4", "DMIC4"},
-	{"ANC1 MUX", "DMIC5", "DMIC5"},
-	{"ANC1 MUX", "DMIC6", "DMIC6"},
-	{"ANC2 MUX", "ADC1", "ADC1"},
-	{"ANC2 MUX", "ADC2", "ADC2"},
-	{"ANC2 MUX", "ADC3", "ADC3"},
-	{"ANC2 MUX", "ADC4", "ADC4"},
-
-	{"ANC HPHR", NULL, "CDC_CONN"},
-
-	{"DAC1", "Switch", "CLASS_H_DSM MUX"},
-	{"HPHL DAC", "Switch", "CLASS_H_DSM MUX"},
-	{"HPHR DAC", NULL, "RX2 CHAIN"},
-
-	{"LINEOUT1", NULL, "LINEOUT1 PA"},
-	{"LINEOUT2", NULL, "LINEOUT2 PA"},
-	{"LINEOUT3", NULL, "LINEOUT3 PA"},
-	{"LINEOUT4", NULL, "LINEOUT4 PA"},
-	{"SPK_OUT", NULL, "SPK PA"},
-
-	{"LINEOUT1 PA", NULL, "LINEOUT1_PA_MIXER"},
-	{"LINEOUT1_PA_MIXER", NULL, "LINEOUT1 DAC"},
-
-	{"LINEOUT2 PA", NULL, "LINEOUT2_PA_MIXER"},
-	{"LINEOUT2_PA_MIXER", NULL, "LINEOUT2 DAC"},
-
-	{"LINEOUT3 PA", NULL, "LINEOUT3_PA_MIXER"},
-	{"LINEOUT3_PA_MIXER", NULL, "LINEOUT3 DAC"},
-
-	{"LINEOUT4 PA", NULL, "LINEOUT4_PA_MIXER"},
-	{"LINEOUT4_PA_MIXER", NULL, "LINEOUT4 DAC"},
-
-	{"LINEOUT1 DAC", NULL, "RX3 MIX1"},
-
-	{"RDAC5 MUX", "DEM3_INV", "RX3 MIX1"},
-	{"RDAC5 MUX", "DEM4", "RX4 MIX1"},
-
-	{"LINEOUT3 DAC", NULL, "RDAC5 MUX"},
-
-	{"LINEOUT2 DAC", NULL, "RX5 MIX1"},
-
-	{"RDAC7 MUX", "DEM5_INV", "RX5 MIX1"},
-	{"RDAC7 MUX", "DEM6", "RX6 MIX1"},
-
-	{"LINEOUT4 DAC", NULL, "RDAC7 MUX"},
-
-	{"SPK PA", NULL, "SPK DAC"},
-	{"SPK DAC", NULL, "RX7 MIX2"},
-	{"SPK DAC", NULL, "VDD_SPKDRV"},
-
-	{"CLASS_H_DSM MUX", "DSM_HPHL_RX1", "RX1 CHAIN"},
-
-	{"RX1 CHAIN", NULL, "RX1 MIX2"},
-	{"RX2 CHAIN", NULL, "RX2 MIX2"},
-
-	{"RX1 MIX2", NULL, "ANC1 MUX"},
-	{"RX2 MIX2", NULL, "ANC2 MUX"},
-
-	{"LINEOUT1 DAC", NULL, "RX_BIAS"},
-	{"LINEOUT2 DAC", NULL, "RX_BIAS"},
-	{"LINEOUT3 DAC", NULL, "RX_BIAS"},
-	{"LINEOUT4 DAC", NULL, "RX_BIAS"},
-	{"SPK DAC", NULL, "RX_BIAS"},
-
-	{"RX7 MIX1", NULL, "COMP0_CLK"},
-	{"RX1 MIX1", NULL, "COMP1_CLK"},
-	{"RX2 MIX1", NULL, "COMP1_CLK"},
-	{"RX3 MIX1", NULL, "COMP2_CLK"},
-	{"RX5 MIX1", NULL, "COMP2_CLK"},
-
-	{"RX1 MIX1", NULL, "RX1 MIX1 INP1"},
-	{"RX1 MIX1", NULL, "RX1 MIX1 INP2"},
-	{"RX1 MIX1", NULL, "RX1 MIX1 INP3"},
-	{"RX2 MIX1", NULL, "RX2 MIX1 INP1"},
-	{"RX2 MIX1", NULL, "RX2 MIX1 INP2"},
-	{"RX3 MIX1", NULL, "RX3 MIX1 INP1"},
-	{"RX3 MIX1", NULL, "RX3 MIX1 INP2"},
-	{"RX4 MIX1", NULL, "RX4 MIX1 INP1"},
-	{"RX4 MIX1", NULL, "RX4 MIX1 INP2"},
-	{"RX5 MIX1", NULL, "RX5 MIX1 INP1"},
-	{"RX5 MIX1", NULL, "RX5 MIX1 INP2"},
-	{"RX6 MIX1", NULL, "RX6 MIX1 INP1"},
-	{"RX6 MIX1", NULL, "RX6 MIX1 INP2"},
-	{"RX7 MIX1", NULL, "RX7 MIX1 INP1"},
-	{"RX7 MIX1", NULL, "RX7 MIX1 INP2"},
-	{"RX1 MIX2", NULL, "RX1 MIX1"},
-	{"RX1 MIX2", NULL, "RX1 MIX2 INP1"},
-	{"RX1 MIX2", NULL, "RX1 MIX2 INP2"},
-	{"RX2 MIX2", NULL, "RX2 MIX1"},
-	{"RX2 MIX2", NULL, "RX2 MIX2 INP1"},
-	{"RX2 MIX2", NULL, "RX2 MIX2 INP2"},
-	{"RX7 MIX2", NULL, "RX7 MIX1"},
-	{"RX7 MIX2", NULL, "RX7 MIX2 INP1"},
-	{"RX7 MIX2", NULL, "RX7 MIX2 INP2"},
-
-	/* SLIM_MUX("AIF1_PB", "AIF1 PB"),*/
-	{"SLIM RX1 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX2 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX3 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX4 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX5 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX6 MUX", "AIF1_PB", "AIF1 PB"},
-	{"SLIM RX7 MUX", "AIF1_PB", "AIF1 PB"},
-	/* SLIM_MUX("AIF2_PB", "AIF2 PB"),*/
-	{"SLIM RX1 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX2 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX3 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX4 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX5 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX6 MUX", "AIF2_PB", "AIF2 PB"},
-	{"SLIM RX7 MUX", "AIF2_PB", "AIF2 PB"},
-	/* SLIM_MUX("AIF3_PB", "AIF3 PB"),*/
-	{"SLIM RX1 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX2 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX3 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX4 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX5 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX6 MUX", "AIF3_PB", "AIF3 PB"},
-	{"SLIM RX7 MUX", "AIF3_PB", "AIF3 PB"},
-
-	{"SLIM RX1", NULL, "SLIM RX1 MUX"},
-	{"SLIM RX2", NULL, "SLIM RX2 MUX"},
-	{"SLIM RX3", NULL, "SLIM RX3 MUX"},
-	{"SLIM RX4", NULL, "SLIM RX4 MUX"},
-	{"SLIM RX5", NULL, "SLIM RX5 MUX"},
-	{"SLIM RX6", NULL, "SLIM RX6 MUX"},
-	{"SLIM RX7", NULL, "SLIM RX7 MUX"},
-
-	{"RX1 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX1 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX1 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX1 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX1 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX1 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX1 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX1 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX1 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX1 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX1 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX1 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX1 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX1 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX1 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX1 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX1 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX1 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX1 MIX1 INP3", "RX1", "SLIM RX1"},
-	{"RX1 MIX1 INP3", "RX2", "SLIM RX2"},
-	{"RX1 MIX1 INP3", "RX3", "SLIM RX3"},
-	{"RX1 MIX1 INP3", "RX4", "SLIM RX4"},
-	{"RX1 MIX1 INP3", "RX5", "SLIM RX5"},
-	{"RX1 MIX1 INP3", "RX6", "SLIM RX6"},
-	{"RX1 MIX1 INP3", "RX7", "SLIM RX7"},
-	{"RX2 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX2 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX2 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX2 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX2 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX2 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX2 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX2 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX2 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX2 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX2 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX2 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX2 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX2 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX2 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX2 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX2 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX2 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX3 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX3 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX3 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX3 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX3 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX3 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX3 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX3 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX3 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX3 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX3 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX3 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX3 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX3 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX3 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX3 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX3 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX3 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX4 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX4 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX4 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX4 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX4 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX4 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX4 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX4 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX4 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX4 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX4 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX4 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX4 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX4 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX4 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX4 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX4 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX4 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX5 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX5 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX5 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX5 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX5 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX5 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX5 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX5 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX5 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX5 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX5 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX5 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX5 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX5 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX5 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX5 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX5 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX5 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX6 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX6 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX6 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX6 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX6 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX6 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX6 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX6 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX6 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX6 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX6 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX6 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX6 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX6 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX6 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX6 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX6 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX6 MIX1 INP2", "IIR2", "IIR2"},
-	{"RX7 MIX1 INP1", "RX1", "SLIM RX1"},
-	{"RX7 MIX1 INP1", "RX2", "SLIM RX2"},
-	{"RX7 MIX1 INP1", "RX3", "SLIM RX3"},
-	{"RX7 MIX1 INP1", "RX4", "SLIM RX4"},
-	{"RX7 MIX1 INP1", "RX5", "SLIM RX5"},
-	{"RX7 MIX1 INP1", "RX6", "SLIM RX6"},
-	{"RX7 MIX1 INP1", "RX7", "SLIM RX7"},
-	{"RX7 MIX1 INP1", "IIR1", "IIR1"},
-	{"RX7 MIX1 INP1", "IIR2", "IIR2"},
-	{"RX7 MIX1 INP2", "RX1", "SLIM RX1"},
-	{"RX7 MIX1 INP2", "RX2", "SLIM RX2"},
-	{"RX7 MIX1 INP2", "RX3", "SLIM RX3"},
-	{"RX7 MIX1 INP2", "RX4", "SLIM RX4"},
-	{"RX7 MIX1 INP2", "RX5", "SLIM RX5"},
-	{"RX7 MIX1 INP2", "RX6", "SLIM RX6"},
-	{"RX7 MIX1 INP2", "RX7", "SLIM RX7"},
-	{"RX7 MIX1 INP2", "IIR1", "IIR1"},
-	{"RX7 MIX1 INP2", "IIR2", "IIR2"},
-
-	/* IIR1, IIR2 inputs to Second RX Mixer on RX1, RX2 and RX7 chains. */
-	{"RX1 MIX2 INP1", "IIR1", "IIR1"},
-	{"RX1 MIX2 INP2", "IIR1", "IIR1"},
-	{"RX2 MIX2 INP1", "IIR1", "IIR1"},
-	{"RX2 MIX2 INP2", "IIR1", "IIR1"},
-	{"RX7 MIX2 INP1", "IIR1", "IIR1"},
-	{"RX7 MIX2 INP2", "IIR1", "IIR1"},
-	{"RX1 MIX2 INP1", "IIR2", "IIR2"},
-	{"RX1 MIX2 INP2", "IIR2", "IIR2"},
-	{"RX2 MIX2 INP1", "IIR2", "IIR2"},
-	{"RX2 MIX2 INP2", "IIR2", "IIR2"},
-	{"RX7 MIX2 INP1", "IIR2", "IIR2"},
-	{"RX7 MIX2 INP2", "IIR2", "IIR2"},
-
-	/* Decimator Inputs */
-	{"DEC1 MUX", "DMIC1", "DMIC1"},
-	{"DEC1 MUX", "ADC6", "ADC6"},
-	{"DEC1 MUX", NULL, "CDC_CONN"},
-	{"DEC2 MUX", "DMIC2", "DMIC2"},
-	{"DEC2 MUX", "ADC5", "ADC5"},
-	{"DEC2 MUX", NULL, "CDC_CONN"},
-	{"DEC3 MUX", "DMIC3", "DMIC3"},
-	{"DEC3 MUX", "ADC4", "ADC4"},
-	{"DEC3 MUX", NULL, "CDC_CONN"},
-	{"DEC4 MUX", "DMIC4", "DMIC4"},
-	{"DEC4 MUX", "ADC3", "ADC3"},
-	{"DEC4 MUX", NULL, "CDC_CONN"},
-	{"DEC5 MUX", "DMIC5", "DMIC5"},
-	{"DEC5 MUX", "ADC2", "ADC2"},
-	{"DEC5 MUX", NULL, "CDC_CONN"},
-	{"DEC6 MUX", "DMIC6", "DMIC6"},
-	{"DEC6 MUX", "ADC1", "ADC1"},
-	{"DEC6 MUX", NULL, "CDC_CONN"},
-	{"DEC7 MUX", "DMIC1", "DMIC1"},
-	{"DEC7 MUX", "DMIC6", "DMIC6"},
-	{"DEC7 MUX", "ADC1", "ADC1"},
-	{"DEC7 MUX", "ADC6", "ADC6"},
-	{"DEC7 MUX", NULL, "CDC_CONN"},
-	{"DEC8 MUX", "DMIC2", "DMIC2"},
-	{"DEC8 MUX", "DMIC5", "DMIC5"},
-	{"DEC8 MUX", "ADC2", "ADC2"},
-	{"DEC8 MUX", "ADC5", "ADC5"},
-	{"DEC8 MUX", NULL, "CDC_CONN"},
-	{"DEC9 MUX", "DMIC4", "DMIC4"},
-	{"DEC9 MUX", "DMIC5", "DMIC5"},
-	{"DEC9 MUX", "ADC2", "ADC2"},
-	{"DEC9 MUX", "ADC3", "ADC3"},
-	{"DEC9 MUX", NULL, "CDC_CONN"},
-	{"DEC10 MUX", "DMIC3", "DMIC3"},
-	{"DEC10 MUX", "DMIC6", "DMIC6"},
-	{"DEC10 MUX", "ADC1", "ADC1"},
-	{"DEC10 MUX", "ADC4", "ADC4"},
-	{"DEC10 MUX", NULL, "CDC_CONN"},
-
-	/* ADC Connections */
-	{"ADC1", NULL, "AMIC1"},
-	{"ADC2", NULL, "AMIC2"},
-	{"ADC3", NULL, "AMIC3"},
-	{"ADC4", NULL, "AMIC4"},
-	{"ADC5", NULL, "AMIC5"},
-	{"ADC6", NULL, "AMIC6"},
-
-	/* AUX PGA Connections */
-	{"EAR_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"HPHL_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"HPHR_PA_MIXER", "AUX_PGA_R Switch", "AUX_PGA_Right"},
-	{"LINEOUT1_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"LINEOUT2_PA_MIXER", "AUX_PGA_R Switch", "AUX_PGA_Right"},
-	{"LINEOUT3_PA_MIXER", "AUX_PGA_L Switch", "AUX_PGA_Left"},
-	{"LINEOUT4_PA_MIXER", "AUX_PGA_R Switch", "AUX_PGA_Right"},
-	{"AUX_PGA_Left", NULL, "AMIC5"},
-	{"AUX_PGA_Right", NULL, "AMIC6"},
-
-	{"IIR1", NULL, "IIR1 INP1 MUX"},
-	{"IIR1 INP1 MUX", "DEC1", "DEC1 MUX"},
-	{"IIR1 INP1 MUX", "DEC2", "DEC2 MUX"},
-	{"IIR1 INP1 MUX", "DEC3", "DEC3 MUX"},
-	{"IIR1 INP1 MUX", "DEC4", "DEC4 MUX"},
-	{"IIR1 INP1 MUX", "DEC5", "DEC5 MUX"},
-	{"IIR1 INP1 MUX", "DEC6", "DEC6 MUX"},
-	{"IIR1 INP1 MUX", "DEC7", "DEC7 MUX"},
-	{"IIR1 INP1 MUX", "DEC8", "DEC8 MUX"},
-	{"IIR1 INP1 MUX", "DEC9", "DEC9 MUX"},
-	{"IIR1 INP1 MUX", "DEC10", "DEC10 MUX"},
-	{"IIR1 INP1 MUX", "RX1", "SLIM RX1"},
-	{"IIR1 INP1 MUX", "RX2", "SLIM RX2"},
-	{"IIR1 INP1 MUX", "RX3", "SLIM RX3"},
-	{"IIR1 INP1 MUX", "RX4", "SLIM RX4"},
-	{"IIR1 INP1 MUX", "RX5", "SLIM RX5"},
-	{"IIR1 INP1 MUX", "RX6", "SLIM RX6"},
-	{"IIR1 INP1 MUX", "RX7", "SLIM RX7"},
-
-	{"IIR2", NULL, "IIR2 INP1 MUX"},
-	{"IIR2 INP1 MUX", "DEC1", "DEC1 MUX"},
-	{"IIR2 INP1 MUX", "DEC2", "DEC2 MUX"},
-	{"IIR2 INP1 MUX", "DEC3", "DEC3 MUX"},
-	{"IIR2 INP1 MUX", "DEC4", "DEC4 MUX"},
-	{"IIR2 INP1 MUX", "DEC5", "DEC5 MUX"},
-	{"IIR2 INP1 MUX", "DEC6", "DEC6 MUX"},
-	{"IIR2 INP1 MUX", "DEC7", "DEC7 MUX"},
-	{"IIR2 INP1 MUX", "DEC8", "DEC8 MUX"},
-	{"IIR2 INP1 MUX", "DEC9", "DEC9 MUX"},
-	{"IIR2 INP1 MUX", "DEC10", "DEC10 MUX"},
-	{"IIR2 INP1 MUX", "RX1", "SLIM RX1"},
-	{"IIR2 INP1 MUX", "RX2", "SLIM RX2"},
-	{"IIR2 INP1 MUX", "RX3", "SLIM RX3"},
-	{"IIR2 INP1 MUX", "RX4", "SLIM RX4"},
-	{"IIR2 INP1 MUX", "RX5", "SLIM RX5"},
-	{"IIR2 INP1 MUX", "RX6", "SLIM RX6"},
-	{"IIR2 INP1 MUX", "RX7", "SLIM RX7"},
-
-	{"MIC BIAS1 Internal1", NULL, "LDO_H"},
-	{"MIC BIAS1 Internal2", NULL, "LDO_H"},
-	{"MIC BIAS1 External", NULL, "LDO_H"},
-	{"MIC BIAS2 Internal1", NULL, "LDO_H"},
-	{"MIC BIAS2 Internal2", NULL, "LDO_H"},
-	{"MIC BIAS2 Internal3", NULL, "LDO_H"},
-	{"MIC BIAS2 External", NULL, "LDO_H"},
-	{"MIC BIAS3 Internal1", NULL, "LDO_H"},
-	{"MIC BIAS3 Internal2", NULL, "LDO_H"},
-	{"MIC BIAS3 External", NULL, "LDO_H"},
-	{"MIC BIAS4 External", NULL, "LDO_H"},
-	{"Main Mic Bias", NULL, "LDO_H"},
-	{DAPM_MICBIAS2_EXTERNAL_STANDALONE, NULL, "LDO_H Standalone"},
-	{DAPM_MICBIAS3_EXTERNAL_STANDALONE, NULL, "LDO_H Standalone"},
-	{"Ear Mic Bias", NULL, "LDO_H"},
-};
-
-static int taiko_readable(struct snd_soc_codec *ssc, unsigned int reg)
-{
-	return taiko_reg_readable[reg];
-}
-
-static bool taiko_is_digital_gain_register(unsigned int reg)
-{
-	bool rtn = false;
-	switch (reg) {
-	case TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL:
-	case TAIKO_A_CDC_TX1_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX2_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX3_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX4_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX5_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX6_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX7_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX8_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX9_VOL_CTL_GAIN:
-	case TAIKO_A_CDC_TX10_VOL_CTL_GAIN:
-		rtn = true;
-		break;
-	default:
-		break;
-	}
-	return rtn;
-}
-
-static int taiko_volatile(struct snd_soc_codec *ssc, unsigned int reg)
-{
-	int i;
-
-	/* Registers lower than 0x100 are top level registers which can be
-	 * written by the Taiko core driver.
-	 */
-
-	if ((reg >= TAIKO_A_CDC_MBHC_EN_CTL) || (reg < 0x100))
-		return 1;
-
-	/* IIR Coeff registers are not cacheable */
-	if ((reg >= TAIKO_A_CDC_IIR1_COEF_B1_CTL) &&
-		(reg <= TAIKO_A_CDC_IIR2_COEF_B2_CTL))
-		return 1;
-
-	/* ANC filter registers are not cacheable */
-	if ((reg >= TAIKO_A_CDC_ANC1_IIR_B1_CTL) &&
-		(reg <= TAIKO_A_CDC_ANC1_LPF_B2_CTL))
-		return 1;
-	if ((reg >= TAIKO_A_CDC_ANC2_IIR_B1_CTL) &&
-		(reg <= TAIKO_A_CDC_ANC2_LPF_B2_CTL))
-		return 1;
-
-	/* Digital gain register is not cacheable so we have to write
-	 * the setting even it is the same
-	 */
-	if (taiko_is_digital_gain_register(reg))
-		return 1;
-
-	/* HPH status registers */
-	if (reg == TAIKO_A_RX_HPH_L_STATUS || reg == TAIKO_A_RX_HPH_R_STATUS)
-		return 1;
-
-	/* HPH PA Enable */
-	if (reg == TAIKO_A_RX_HPH_CNP_EN)
-		return 1;
-
-	if (reg == TAIKO_A_MBHC_INSERT_DET_STATUS)
-		return 1;
-
-	switch (reg) {
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL0:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL1:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL2:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL3:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL4:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL5:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL6:
-	case TAIKO_A_CDC_SPKR_CLIPDET_VAL7:
-	case TAIKO_A_CDC_VBAT_GAIN_MON_VAL:
-		return 1;
-	}
-
-	for (i = 0; i < ARRAY_SIZE(audio_reg_cfg); i++)
-		if (audio_reg_cfg[i].reg_logical_addr -
-		    TAIKO_REGISTER_START_OFFSET == reg)
-			return 1;
-
-	return 0;
-}
-
-static int taiko_write(struct snd_soc_codec *codec, unsigned int reg,
-	unsigned int value)
-{
-	int ret;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-
-	if (reg == SND_SOC_NOPM)
-		return 0;
-
-	BUG_ON(reg > TAIKO_MAX_REGISTER);
-
-	if (!taiko_volatile(codec, reg)) {
-		ret = snd_soc_cache_write(codec, reg, value);
-		if (ret != 0)
-			dev_err(codec->dev, "Cache write to %x failed: %d\n",
-				reg, ret);
-	}
-
-	return wcd9xxx_reg_write(&wcd9xxx->core_res, reg, value);
-}
-static unsigned int taiko_read(struct snd_soc_codec *codec,
-				unsigned int reg)
-{
-	unsigned int val;
-	int ret;
-
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-
-	if (reg == SND_SOC_NOPM)
-		return 0;
-
-	BUG_ON(reg > TAIKO_MAX_REGISTER);
-
-	if (!taiko_volatile(codec, reg) && taiko_readable(codec, reg) &&
-		reg < codec->driver->reg_cache_size) {
-		ret = snd_soc_cache_read(codec, reg, &val);
-		if (ret >= 0) {
-			return val;
-		} else
-			dev_err(codec->dev, "Cache read from %x failed: %d\n",
-				reg, ret);
-	}
-
-	val = wcd9xxx_reg_read(&wcd9xxx->core_res, reg);
-	return val;
-}
-
-#ifdef CONFIG_SND_SOC_ES325
-static int taiko_startup(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	struct wcd9xxx *taiko_core = dev_get_drvdata(dai->codec->dev->parent);
-	pr_debug("%s(): substream = %s  stream = %d\n" , __func__,
-		 substream->name, substream->stream);
-	if ((taiko_core != NULL) &&
-	    (taiko_core->dev != NULL) &&
-	    (taiko_core->dev->parent != NULL)) {
-		es325_wrapper_wakeup(dai);
-	}
-
-	return 0;
-}
-#else
-static int taiko_startup(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-//	struct wcd9xxx *taiko_core = dev_get_drvdata(dai->codec->dev->parent);
-	pr_debug("%s(): substream = %s  stream = %d\n" , __func__,
-		 substream->name, substream->stream);
-	return 0;
-}
-#endif
-
-static void taiko_shutdown(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	struct wcd9xxx *taiko_core = dev_get_drvdata(dai->codec->dev->parent);
-	pr_debug("%s(): substream = %s  stream = %d\n" , __func__,
-		 substream->name, substream->stream);
-	if ((taiko_core != NULL) &&
-	    (taiko_core->dev != NULL) &&
-	    (taiko_core->dev->parent != NULL)) {
-#ifdef CONFIG_SND_SOC_ES325
-		es325_wrapper_sleep(dai->id);
-#endif
-	}
-}
-
-static int taiko_prepare(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	int paths, i;
-	struct snd_soc_dapm_widget_list *wlist;
-	struct snd_soc_codec *codec = dai->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	int found_hs_pa = 0;
-
-	if (substream->stream)
-		return 0;
-
-	pr_debug("%s(): substream = %s. stream = %d. dai->name = %s."
-		" dai->driver->name = %s. dai stream_name = %s\n",
-		__func__, substream->name, substream->stream,
-		dai->name, dai->driver->name,
-		substream->stream ? dai->driver->capture.stream_name :
-		dai->driver->playback.stream_name);
-
-	pr_debug("%s(): dai AIF widget = %s. dai playback stream_name = %s.\n"
-		"  rate = %u. bit_width = %u.  hs compander_enabled = %u\n",
-		__func__, dai->playback_aif ? dai->playback_aif->name : "NULL",
-		dai->driver->playback.stream_name, taiko_p->dai[dai->id].rate,
-			taiko_p->dai[dai->id].bit_width,
-			taiko_p->comp_enabled[COMPANDER_1]);
-
-	if ((!(taiko_p->dai[dai->id].rate == 192000 ||
-		 taiko_p->dai[dai->id].rate == 96000)) ||
-	    !(taiko_p->dai[dai->id].bit_width == 24) ||
-	    !(taiko_p->comp_enabled[COMPANDER_1])) {
-
-		taiko_p->clsh_d.hs_perf_mode_enabled = false;
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_CHOP_CTL, 0x20, 0x20);
-
-		dev_dbg(dai->dev ,"%s(): high performnce mode not needed\n",
-				__func__);
-		return 0;
-	}
-
-	paths = snd_soc_dapm_codec_dai_get_playback_connected_widgets(dai, &wlist);
-
-	if (!paths) {
-		dev_err(dai->dev, "%s(): found no audio playback paths\n",
-			__func__);
-		return 0;
-	}
-
-	for (i = 0; i < wlist->num_widgets; i++) {
-		dev_dbg(dai->dev, " dai stream_name = %s, widget name = %s\n",
-			dai->driver->playback.stream_name, wlist->widgets[i]->name);
-
-		if (!strcmp(wlist->widgets[i]->name, "HPHL") ||
-		    !strcmp(wlist->widgets[i]->name, "HPHR")) {
-			found_hs_pa = 1;
-			break;
-		}
-	}
-
-	kfree(wlist);
-
-	if (!found_hs_pa)
-		return 0;
-
-	pr_debug("%s(): rate = %u. bit_width = %u.  hs compander_enabled = %u",
-			__func__, taiko_p->dai[dai->id].rate,
-			taiko_p->dai[dai->id].bit_width,
-			taiko_p->comp_enabled[COMPANDER_1]);
-
-	if ((taiko_p->dai[dai->id].rate == 192000 ||
-		taiko_p->dai[dai->id].rate == 96000) &&
-	    (taiko_p->dai[dai->id].bit_width == 24) &&
-	    (taiko_p->comp_enabled[COMPANDER_1])) {
-
-		pr_debug("%s(): HS peformance mode enabled", __func__);
-		taiko_p->clsh_d.hs_perf_mode_enabled = true;
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_CHOP_CTL, 0x20, 0x00);
-	} else {
-		taiko_p->clsh_d.hs_perf_mode_enabled = false;
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_CHOP_CTL, 0x20, 0x20);
-	}
-
-	return 0;
-}
-
-int taiko_mclk_enable(struct snd_soc_codec *codec, int mclk_enable, bool dapm)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s: mclk_enable = %u, dapm = %d\n", __func__, mclk_enable,
-		 dapm);
-
-	WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-	if (mclk_enable) {
-		wcd9xxx_resmgr_get_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		wcd9xxx_resmgr_get_clk_block(&taiko->resmgr, WCD9XXX_CLK_MCLK);
-	} else {
-		/* Put clock and BG */
-		wcd9xxx_resmgr_put_clk_block(&taiko->resmgr, WCD9XXX_CLK_MCLK);
-		wcd9xxx_resmgr_put_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-	}
-	WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-
-	return 0;
-}
-
-static int taiko_set_dai_sysclk(struct snd_soc_dai *dai,
-		int clk_id, unsigned int freq, int dir)
-{
-	pr_debug("%s\n", __func__);
-	return 0;
-}
-
-static int taiko_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
-{
-	u8 val = 0;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(dai->codec);
-
-	pr_debug("%s\n", __func__);
-	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
-	case SND_SOC_DAIFMT_CBS_CFS:
-		/* CPU is master */
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			if (dai->id == AIF1_CAP)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					TAIKO_I2S_MASTER_MODE_MASK, 0);
-			else if (dai->id == AIF1_PB)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					TAIKO_I2S_MASTER_MODE_MASK, 0);
-		}
-		break;
-	case SND_SOC_DAIFMT_CBM_CFM:
-	/* CPU is slave */
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			val = TAIKO_I2S_MASTER_MODE_MASK;
-			if (dai->id == AIF1_CAP)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL, val, val);
-			else if (dai->id == AIF1_PB)
-				snd_soc_update_bits(dai->codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL, val, val);
-		}
-		break;
-	default:
-		return -EINVAL;
-	}
-	return 0;
-}
-
-static int taiko_set_channel_map(struct snd_soc_dai *dai,
-				unsigned int tx_num, unsigned int *tx_slot,
-				unsigned int rx_num, unsigned int *rx_slot)
-
-{
-	struct wcd9xxx_codec_dai_data *dai_data = NULL;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(dai->codec);
-	struct wcd9xxx *core = dev_get_drvdata(dai->codec->dev->parent);
-	if (!tx_slot && !rx_slot) {
-		pr_err("%s: Invalid\n", __func__);
-		return -EINVAL;
-	}
-	pr_debug("%s(): dai_name = %s DAI-ID %x tx_ch %d rx_ch %d\n"
-		 "taiko->intf_type %d\n",
-		 __func__, dai->name, dai->id, tx_num, rx_num,
-		 taiko->intf_type);
-
-	if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		wcd9xxx_init_slimslave(core, core->slim->laddr,
-					   tx_num, tx_slot, rx_num, rx_slot);
-		/*Reserve tx11 and tx12 for VI feedback path*/
-		dai_data = &taiko->dai[AIF4_VIFEED];
-		if (dai_data) {
-			list_add_tail(&core->tx_chs[TAIKO_TX11].list,
-			&dai_data->wcd9xxx_ch_list);
-			list_add_tail(&core->tx_chs[TAIKO_TX12].list,
-			&dai_data->wcd9xxx_ch_list);
-		}
-	}
-	return 0;
-}
-
-static int taiko_get_channel_map(struct snd_soc_dai *dai,
-				 unsigned int *tx_num, unsigned int *tx_slot,
-				 unsigned int *rx_num, unsigned int *rx_slot)
-
-{
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(dai->codec);
-	u32 i = 0;
-	struct wcd9xxx_ch *ch;
-
-	switch (dai->id) {
-	case AIF1_PB:
-	case AIF2_PB:
-	case AIF3_PB:
-		if (!rx_slot || !rx_num) {
-			pr_err("%s: Invalid rx_slot %d or rx_num %d\n",
-				 __func__, (u32) rx_slot, (u32) rx_num);
-			return -EINVAL;
-		}
-		list_for_each_entry(ch, &taiko_p->dai[dai->id].wcd9xxx_ch_list,
-				    list) {
-			pr_debug("%s: slot_num %u ch->ch_num %d\n",
-				 __func__, i, ch->ch_num);
-			rx_slot[i++] = ch->ch_num;
-		}
-		pr_debug("%s: rx_num %d\n", __func__, i);
-		*rx_num = i;
-		break;
-	case AIF1_CAP:
-	case AIF2_CAP:
-	case AIF3_CAP:
-	case AIF4_VIFEED:
-	case AIF4_MAD_TX:
-		if (!tx_slot || !tx_num) {
-			pr_err("%s: Invalid tx_slot %d or tx_num %d\n",
-				 __func__, (u32) tx_slot, (u32) tx_num);
-			return -EINVAL;
-		}
-		list_for_each_entry(ch, &taiko_p->dai[dai->id].wcd9xxx_ch_list,
-				    list) {
-			pr_debug("%s: slot_num %u ch->ch_num %d\n",
-				 __func__, i,  ch->ch_num);
-			tx_slot[i++] = ch->ch_num;
-		}
-		pr_debug("%s: tx_num %d\n", __func__, i);
-		*tx_num = i;
-		break;
-
-	default:
-		pr_err("%s: Invalid DAI ID %x\n", __func__, dai->id);
-		break;
-	}
-
-	return 0;
-}
-
-static int taiko_set_interpolator_rate(struct snd_soc_dai *dai,
-	u8 rx_fs_rate_reg_val, u32 compander_fs, u32 sample_rate)
-{
-	u32 j;
-	u8 rx_mix1_inp;
-	u16 rx_mix_1_reg_1, rx_mix_1_reg_2;
-	u16 rx_fs_reg;
-	u8 rx_mix_1_reg_1_val, rx_mix_1_reg_2_val;
-	struct snd_soc_codec *codec = dai->codec;
-	struct wcd9xxx_ch *ch;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-
-	list_for_each_entry(ch, &taiko->dai[dai->id].wcd9xxx_ch_list, list) {
-		/* for RX port starting from 16 instead of 10 like tabla */
-		rx_mix1_inp = ch->port + RX_MIX1_INP_SEL_RX1 -
-			      TAIKO_TX_PORT_NUMBER;
-		if ((rx_mix1_inp < RX_MIX1_INP_SEL_RX1) ||
-			(rx_mix1_inp > RX_MIX1_INP_SEL_RX7)) {
-			pr_err("%s: Invalid TAIKO_RX%u port. Dai ID is %d\n",
-				__func__,  rx_mix1_inp - 5 , dai->id);
-			return -EINVAL;
-		}
-
-		rx_mix_1_reg_1 = TAIKO_A_CDC_CONN_RX1_B1_CTL;
-
-		for (j = 0; j < NUM_INTERPOLATORS; j++) {
-			rx_mix_1_reg_2 = rx_mix_1_reg_1 + 1;
-
-			rx_mix_1_reg_1_val = snd_soc_read(codec,
-							  rx_mix_1_reg_1);
-			rx_mix_1_reg_2_val = snd_soc_read(codec,
-							  rx_mix_1_reg_2);
-
-			if (((rx_mix_1_reg_1_val & 0x0F) == rx_mix1_inp) ||
-			    (((rx_mix_1_reg_1_val >> 4) & 0x0F)
-				== rx_mix1_inp) ||
-			    ((rx_mix_1_reg_2_val & 0x0F) == rx_mix1_inp)) {
-
-				rx_fs_reg = TAIKO_A_CDC_RX1_B5_CTL + 8 * j;
-
-				pr_debug("%s: AIF_PB DAI(%d) connected to RX%u\n",
-					__func__, dai->id, j + 1);
-
-				pr_debug("%s: set RX%u sample rate to %u\n",
-					__func__, j + 1, sample_rate);
-
-				snd_soc_update_bits(codec, rx_fs_reg,
-						0xE0, rx_fs_rate_reg_val);
-
-				if (comp_rx_path[j] < COMPANDER_MAX)
-					taiko->comp_fs[comp_rx_path[j]]
-					= compander_fs;
-			}
-			if (j < 2)
-				rx_mix_1_reg_1 += 3;
-			else
-				rx_mix_1_reg_1 += 2;
-		}
-	}
-	return 0;
-}
-
-static int taiko_set_decimator_rate(struct snd_soc_dai *dai,
-	u8 tx_fs_rate_reg_val, u32 sample_rate)
-{
-	struct snd_soc_codec *codec = dai->codec;
-	struct wcd9xxx_ch *ch;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	u32 tx_port;
-	u16 tx_port_reg, tx_fs_reg;
-	u8 tx_port_reg_val;
-	s8 decimator;
-
-	list_for_each_entry(ch, &taiko->dai[dai->id].wcd9xxx_ch_list, list) {
-
-		tx_port = ch->port + 1;
-		pr_debug("%s: dai->id = %d, tx_port = %d",
-			__func__, dai->id, tx_port);
-
-		if ((tx_port < 1) || (tx_port > NUM_DECIMATORS)) {
-			pr_err("%s: Invalid SLIM TX%u port. DAI ID is %d\n",
-				__func__, tx_port, dai->id);
-			return -EINVAL;
-		}
-
-		tx_port_reg = TAIKO_A_CDC_CONN_TX_SB_B1_CTL + (tx_port - 1);
-		tx_port_reg_val =  snd_soc_read(codec, tx_port_reg);
-
-		decimator = 0;
-
-		if ((tx_port >= 1) && (tx_port <= 6)) {
-
-			tx_port_reg_val =  tx_port_reg_val & 0x0F;
-			if (tx_port_reg_val == 0x8)
-				decimator = tx_port;
-
-		} else if ((tx_port >= 7) && (tx_port <= NUM_DECIMATORS)) {
-
-			tx_port_reg_val =  tx_port_reg_val & 0x1F;
-
-			if ((tx_port_reg_val >= 0x8) &&
-			    (tx_port_reg_val <= 0x11)) {
-
-				decimator = (tx_port_reg_val - 0x8) + 1;
-			}
-		}
-
-		if (decimator) { /* SLIM_TX port has a DEC as input */
-
-			tx_fs_reg = TAIKO_A_CDC_TX1_CLK_FS_CTL +
-				    8 * (decimator - 1);
-
-			pr_debug("%s: set DEC%u (-> SLIM_TX%u) rate to %u\n",
-				__func__, decimator, tx_port, sample_rate);
-
-			snd_soc_update_bits(codec, tx_fs_reg, 0x07,
-					    tx_fs_rate_reg_val);
-
-		} else {
-			if ((tx_port_reg_val >= 0x1) &&
-			    (tx_port_reg_val <= 0x7)) {
-
-				pr_debug("%s: RMIX%u going to SLIM TX%u\n",
-					__func__, tx_port_reg_val, tx_port);
-
-			} else if  ((tx_port_reg_val >= 0x8) &&
-				    (tx_port_reg_val <= 0x11)) {
-
-				pr_err("%s: ERROR: Should not be here\n",
-				       __func__);
-				pr_err("%s: ERROR: DEC connected to SLIM TX%u\n",
-					__func__, tx_port);
-				return -EINVAL;
-
-			} else if (tx_port_reg_val == 0) {
-				pr_debug("%s: no signal to SLIM TX%u\n",
-					__func__, tx_port);
-			} else {
-				pr_err("%s: ERROR: wrong signal to SLIM TX%u\n",
-					__func__, tx_port);
-				pr_err("%s: ERROR: wrong signal = %u\n",
-					__func__, tx_port_reg_val);
-				return -EINVAL;
-			}
-		}
-	}
-	return 0;
-}
-
-static void taiko_set_rxsb_port_format(struct snd_pcm_hw_params *params,
-				       struct snd_soc_dai *dai)
-{
-	struct snd_soc_codec *codec = dai->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx_codec_dai_data *cdc_dai;
-	struct wcd9xxx_ch *ch;
-	int port;
-	u8 bit_sel;
-	u16 sb_ctl_reg, field_shift;
-
-	switch (params_format(params)) {
-	case SNDRV_PCM_FORMAT_S16_LE:
-		bit_sel = 0x2;
-		taiko_p->dai[dai->id].bit_width = 16;
-		break;
-	case SNDRV_PCM_FORMAT_S24_LE:
-		bit_sel = 0x0;
-		taiko_p->dai[dai->id].bit_width = 24;
-		break;
-	default:
-		dev_err(codec->dev, "Invalid format\n");
-		return;
-	}
-
-	cdc_dai = &taiko_p->dai[dai->id];
-
-	list_for_each_entry(ch, &cdc_dai->wcd9xxx_ch_list, list) {
-		port = wcd9xxx_get_slave_port(ch->ch_num);
-
-		if (IS_ERR_VALUE(port) ||
-		    !TAIKO_VALIDATE_RX_SBPORT_RANGE(port)) {
-			dev_warn(codec->dev,
-				 "%s: invalid port ID %d returned for RX DAI\n",
-				 __func__, port);
-			return;
-		}
-
-		port = TAIKO_CONVERT_RX_SBPORT_ID(port);
-
-		if (port <= 3) {
-			sb_ctl_reg = TAIKO_A_CDC_CONN_RX_SB_B1_CTL;
-			field_shift = port << 1;
-		} else if (port <= 6) {
-			sb_ctl_reg = TAIKO_A_CDC_CONN_RX_SB_B2_CTL;
-			field_shift = (port - 4) << 1;
-		} else { /* should not happen */
-			dev_warn(codec->dev,
-				 "%s: bad port ID %d\n", __func__, port);
-			return;
-		}
-
-		dev_dbg(codec->dev, "%s: sb_ctl_reg %x field_shift %x\n",
-			__func__, sb_ctl_reg, field_shift);
-		snd_soc_update_bits(codec, sb_ctl_reg, 0x3 << field_shift,
-				    bit_sel << field_shift);
-	}
-}
-
-static int taiko_hw_params(struct snd_pcm_substream *substream,
-			    struct snd_pcm_hw_params *params,
-			    struct snd_soc_dai *dai)
-{
-	struct snd_soc_codec *codec = dai->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(dai->codec);
-	u8 tx_fs_rate, rx_fs_rate;
-	u32 compander_fs;
-	int ret;
-
-	pr_info("%s: dai_name = %s DAI-ID %x rate %d num_ch %d\n", __func__,
-		 dai->name, dai->id, params_rate(params),
-		 params_channels(params));
-
-	switch (params_rate(params)) {
-	case 8000:
-		tx_fs_rate = 0x00;
-		rx_fs_rate = 0x00;
-		compander_fs = COMPANDER_FS_8KHZ;
-		break;
-	case 16000:
-		tx_fs_rate = 0x01;
-		rx_fs_rate = 0x20;
-		compander_fs = COMPANDER_FS_16KHZ;
-		break;
-	case 32000:
-		tx_fs_rate = 0x02;
-		rx_fs_rate = 0x40;
-		compander_fs = COMPANDER_FS_32KHZ;
-		break;
-	case 48000:
-		tx_fs_rate = 0x03;
-		rx_fs_rate = 0x60;
-		compander_fs = COMPANDER_FS_48KHZ;
-		break;
-	case 96000:
-		tx_fs_rate = 0x04;
-		rx_fs_rate = 0x80;
-		compander_fs = COMPANDER_FS_96KHZ;
-		break;
-	case 192000:
-		tx_fs_rate = 0x05;
-		rx_fs_rate = 0xA0;
-		compander_fs = COMPANDER_FS_192KHZ;
-		break;
-	default:
-		pr_err("%s: Invalid sampling rate %d\n", __func__,
-			params_rate(params));
-		return -EINVAL;
-	}
-
-	switch (substream->stream) {
-	case SNDRV_PCM_STREAM_CAPTURE:
-		if (dai->id != AIF4_VIFEED) {
-			ret = taiko_set_decimator_rate(dai, tx_fs_rate,
-							   params_rate(params));
-			if (ret < 0) {
-				pr_err("%s: set decimator rate failed %d\n",
-					__func__, ret);
-				return ret;
-			}
-		}
-
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			switch (params_format(params)) {
-			case SNDRV_PCM_FORMAT_S16_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					0x20, 0x20);
-				break;
-			case SNDRV_PCM_FORMAT_S32_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					0x20, 0x00);
-				break;
-			default:
-				pr_err("invalid format\n");
-				break;
-			}
-			snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_TX_I2S_CTL,
-					    0x07, tx_fs_rate);
-		} else {
-			taiko->dai[dai->id].rate   = params_rate(params);
-		}
-		break;
-
-	case SNDRV_PCM_STREAM_PLAYBACK:
-		ret = taiko_set_interpolator_rate(dai, rx_fs_rate,
-						  compander_fs,
-						  params_rate(params));
-		if (ret < 0) {
-			pr_err("%s: set decimator rate failed %d\n", __func__,
-				ret);
-			return ret;
-		}
-		if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-			switch (params_format(params)) {
-			case SNDRV_PCM_FORMAT_S16_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					0x20, 0x20);
-				break;
-			case SNDRV_PCM_FORMAT_S32_LE:
-				snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					0x20, 0x00);
-				break;
-			default:
-				pr_err("invalid format\n");
-				break;
-			}
-			snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_RX_I2S_CTL,
-					    0x03, (rx_fs_rate >> 0x05));
-		} else {
-			taiko_set_rxsb_port_format(params, dai);
-			taiko->dai[dai->id].rate   = params_rate(params);
-		}
-		break;
-	default:
-		pr_err("%s: Invalid stream type %d\n", __func__,
-			substream->stream);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-#if defined(CONFIG_SND_SOC_ESXXX)
-int (*remote_route_enable)(struct snd_soc_dai *dai) = REMOTE_ROUTE_ENABLE_CB;
-int (*slim_get_channel_map)(struct snd_soc_dai *dai,
-		unsigned int *tx_num, unsigned int *tx_slot,
-		unsigned int *rx_num, unsigned int *rx_slot)
-			= SLIM_GET_CHANNEL_MAP_CB;
-int (*slim_set_channel_map)(struct snd_soc_dai *dai,
-		unsigned int tx_num, unsigned int *tx_slot,
-		unsigned int rx_num, unsigned int *rx_slot)
-			= SLIM_SET_CHANNEL_MAP_CB;
-int (*slim_hw_params)(struct snd_pcm_substream *substream,
-		struct snd_pcm_hw_params *params,
-		struct snd_soc_dai *dai)
-		= SLIM_HW_PARAMS_CB;
-int (*remote_cfg_slim_rx)(int dai_id)	=	REMOTE_CFG_SLIM_RX_CB;
-int (*remote_close_slim_rx)(int dai_id)	=	REMOTE_CLOSE_SLIM_RX_CB;
-int (*remote_cfg_slim_tx)(int dai_id)	=	REMOTE_CFG_SLIM_TX_CB;
-int (*remote_close_slim_tx)(int dai_id)	=	REMOTE_CLOSE_SLIM_TX_CB;
-int (*remote_add_codec_controls)(struct snd_soc_codec *codec)
-		= REMOTE_ADD_CODEC_CONTROLS_CB;
-
-static int taiko_esxxx_startup(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	taiko_startup(substream, dai);
-/*
-	if (es705_remote_route_enable(dai))
-		es705_slim_startup(substream, dai);
-*/
-
-	return 0;
-}
-
-static void taiko_esxxx_shutdown(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
-{
-	taiko_shutdown(substream, dai);
-
-/*
-	if (es705_remote_route_enable(dai))
-		es705_slim_shutdown(substream, dai);
-*/
-}
-
-static int taiko_esxxx_hw_params(struct snd_pcm_substream *substream,
-		struct snd_pcm_hw_params *params,
-		struct snd_soc_dai *dai)
-{
-	int rc = 0;
-	pr_info("%s: dai_name = %s DAI-ID %x rate %d num_ch %d\n", __func__,
-			dai->name, dai->id, params_rate(params),
-			params_channels(params));
-
-	rc = taiko_hw_params(substream, params, dai);
-
-	if (remote_route_enable(dai))
-		rc = slim_hw_params(substream, params, dai);
-
-	return rc;
-}
-static int taiko_esxxx_set_channel_map(struct snd_soc_dai *dai,
-				unsigned int tx_num, unsigned int *tx_slot,
-				unsigned int rx_num, unsigned int *rx_slot)
-
-{
-	unsigned int taiko_tx_num = 0;
-	unsigned int taiko_tx_slot[6];
-	unsigned int taiko_rx_num = 0;
-	unsigned int taiko_rx_slot[6];
-	int rc = 0;
-	pr_info("%s(): dai_name = %s DAI-ID %x tx_ch %d rx_ch %d\n",
-			__func__, dai->name, dai->id, tx_num, rx_num);
-
-	if (remote_route_enable(dai)) {
-		rc = taiko_get_channel_map(dai, &taiko_tx_num, taiko_tx_slot,
-					&taiko_rx_num, taiko_rx_slot);
-
-		rc = taiko_set_channel_map(dai, tx_num, taiko_tx_slot, rx_num, taiko_rx_slot);
-
-		rc = slim_set_channel_map(dai, tx_num, tx_slot, rx_num,
-					rx_slot);
-	} else
-		rc = taiko_set_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-
-static int taiko_esxxx_get_channel_map(struct snd_soc_dai *dai,
-				unsigned int *tx_num, unsigned int *tx_slot,
-				unsigned int *rx_num, unsigned int *rx_slot)
-
-{
-	int rc = 0;
-
-	pr_info("%s(): dai_name = %s DAI-ID %d tx_ch %d rx_ch %d\n",
-			__func__, dai->name, dai->id, *tx_num, *rx_num);
-
-	if (remote_route_enable(dai))
-		rc = slim_get_channel_map(dai, tx_num, tx_slot, rx_num,
-					rx_slot);
-	else
-		rc = taiko_get_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-static struct snd_soc_dai_ops taiko_dai_ops = {
-	.startup = taiko_esxxx_startup, /* taiko_startup, */
-	.shutdown = taiko_esxxx_shutdown, /* taiko_shutdown, */
-	.prepare = taiko_prepare,
-	.hw_params = taiko_esxxx_hw_params, /* taiko_hw_params, */
-	.set_sysclk = taiko_set_dai_sysclk,
-	.set_fmt = taiko_set_dai_fmt,
-	.set_channel_map = taiko_esxxx_set_channel_map,
-			/* taiko_set_channel_map, */
-	.get_channel_map = taiko_esxxx_get_channel_map,
-			/* taiko_get_channel_map, */
-};
-#elif defined(CONFIG_SND_SOC_ES325)
-static int taiko_es325_hw_params(struct snd_pcm_substream *substream,
-		struct snd_pcm_hw_params *params,
-		struct snd_soc_dai *dai)
-{
-	int rc = 0;
-	dev_info(dai->dev,"%s: dai_name = %s DAI-ID %x rate %d num_ch %d\n", __func__,
-			dai->name, dai->id, params_rate(params),
-			params_channels(params));
-
-	rc = taiko_hw_params(substream, params, dai);
-
-	if (es325_remote_route_enable(dai))
-		rc = es325_slim_hw_params(substream, params, dai);
-
-	return rc;
-}
-
-#define SLIM_BUGFIX
-static int taiko_es325_set_channel_map(struct snd_soc_dai *dai,
-				unsigned int tx_num, unsigned int *tx_slot,
-				unsigned int rx_num, unsigned int *rx_slot)
-
-{
-#if !defined(SLIM_BUGFIX)
-	unsigned int taiko_tx_num = 0;
-#endif
-	unsigned int taiko_tx_slot[6];
-#if !defined(SLIM_BUGFIX)
-	unsigned int taiko_rx_num = 0;
-#endif
-	unsigned int taiko_rx_slot[6];
-#if defined(SLIM_BUGFIX)
-	unsigned int temp_tx_num = 0;
-	unsigned int temp_rx_num = 0;
-#endif
-	int rc = 0;
-
-	if (es325_remote_route_enable(dai)) {
-#if defined(SLIM_BUGFIX)
-		rc = taiko_get_channel_map(dai, &temp_tx_num, taiko_tx_slot,
-					&temp_rx_num, taiko_rx_slot);
-#else
-		rc = taiko_get_channel_map(dai, &taiko_tx_num, taiko_tx_slot,
-					&taiko_rx_num, taiko_rx_slot);
-#endif
-
-		rc = taiko_set_channel_map(dai, tx_num, taiko_tx_slot, rx_num, taiko_rx_slot);
-
-		rc = es325_slim_set_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-	} else
-		rc = taiko_set_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-
-static int taiko_es325_get_channel_map(struct snd_soc_dai *dai,
-				unsigned int *tx_num, unsigned int *tx_slot,
-				unsigned int *rx_num, unsigned int *rx_slot)
-
-{
-	int rc = 0;
-
-	if (es325_remote_route_enable(dai))
-		rc = es325_slim_get_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-	else
-		rc = taiko_get_channel_map(dai, tx_num, tx_slot, rx_num, rx_slot);
-
-	return rc;
-}
-
-static struct snd_soc_dai_ops taiko_dai_ops = {
-	.startup = taiko_startup,
-	.shutdown = taiko_shutdown,
-	.prepare = taiko_prepare,
-	.hw_params = taiko_es325_hw_params, /* tabla_hw_params, */
-	.set_sysclk = taiko_set_dai_sysclk,
-	.set_fmt = taiko_set_dai_fmt,
-	.set_channel_map = taiko_set_channel_map, /* tabla_set_channel_map, */
-	.get_channel_map = taiko_es325_get_channel_map, /* tabla_get_channel_map, */
-};
-
-static struct snd_soc_dai_ops taiko_es325_dai_ops = {
-	.startup = taiko_startup,
-	.hw_params = taiko_es325_hw_params,
-	.set_channel_map = taiko_es325_set_channel_map,
-	.get_channel_map = taiko_es325_get_channel_map,
-};
-#else
-static struct snd_soc_dai_ops taiko_dai_ops = {
-	.startup = taiko_startup,
-	.shutdown = taiko_shutdown,
-	.prepare = taiko_prepare,
-	.hw_params = taiko_hw_params,
-	.set_sysclk = taiko_set_dai_sysclk,
-	.set_fmt = taiko_set_dai_fmt,
-	.set_channel_map = taiko_set_channel_map,
-	.get_channel_map = taiko_get_channel_map,
-};
-#endif
-
-static struct snd_soc_dai_driver taiko_dai[] = {
-	{
-		.name = "taiko_rx1",
-		.id = AIF1_PB,
-		.playback = {
-			.stream_name = "AIF1 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS_S16_S24_LE,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_tx1",
-		.id = AIF1_CAP,
-		.capture = {
-			.stream_name = "AIF1 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_rx2",
-		.id = AIF2_PB,
-		.playback = {
-			.stream_name = "AIF2 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS_S16_S24_LE,
-			.rate_min = 8000,
-			.rate_max = 192000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_tx2",
-		.id = AIF2_CAP,
-		.capture = {
-			.stream_name = "AIF2 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 8,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_tx3",
-		.id = AIF3_CAP,
-		.capture = {
-			.stream_name = "AIF3 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 48000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_rx3",
-		.id = AIF3_PB,
-		.playback = {
-			.stream_name = "AIF3 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS_S16_S24_LE,
-			.rate_min = 8000,
-			.rate_max = 192000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_vifeedback",
-		.id = AIF4_VIFEED,
-		.capture = {
-			.stream_name = "VIfeed",
-			.rates = SNDRV_PCM_RATE_48000,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 48000,
-			.rate_min = 48000,
-			.channels_min = 2,
-			.channels_max = 2,
-	 },
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_mad1",
-		.id = AIF4_MAD_TX,
-		.capture = {
-			.stream_name = "AIF4 MAD TX",
-			.rates = SNDRV_PCM_RATE_16000,
-			.formats = TAIKO_FORMATS,
-			.rate_min = 16000,
-			.rate_max = 16000,
-			.channels_min = 1,
-			.channels_max = 1,
-		},
-		.ops = &taiko_dai_ops,
-	},
-#ifdef CONFIG_SND_SOC_ES325
-	{
-		.name = "taiko_es325_rx1",
-		.id = AIF1_PB + ES325_DAI_ID_OFFSET,
-		.playback = {
-			.stream_name = "AIF1 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_es325_dai_ops,
-	},
-	{
-		.name = "taiko_es325_tx1",
-		.id = AIF1_CAP + ES325_DAI_ID_OFFSET,
-		.capture = {
-			.stream_name = "AIF1 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_es325_dai_ops,
-	},
-	{
-		.name = "taiko_es325_rx2",
-		.id = AIF2_PB + ES325_DAI_ID_OFFSET,
-		.playback = {
-			.stream_name = "AIF2 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 2,
-		},
-		.ops = &taiko_es325_dai_ops,
-	},
-#endif
-};
-
-static struct snd_soc_dai_driver taiko_i2s_dai[] = {
-	{
-		.name = "taiko_i2s_rx1",
-		.id = AIF1_PB,
-		.playback = {
-			.stream_name = "AIF1 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_i2s_tx1",
-		.id = AIF1_CAP,
-		.capture = {
-			.stream_name = "AIF1 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_i2s_rx2",
-		.id = AIF1_PB,
-		.playback = {
-			.stream_name = "AIF2 Playback",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-	{
-		.name = "taiko_i2s_tx2",
-		.id = AIF1_CAP,
-		.capture = {
-			.stream_name = "AIF2 Capture",
-			.rates = WCD9320_RATES,
-			.formats = TAIKO_FORMATS,
-			.rate_max = 192000,
-			.rate_min = 8000,
-			.channels_min = 1,
-			.channels_max = 4,
-		},
-		.ops = &taiko_dai_ops,
-	},
-};
-
-static int taiko_codec_enable_slim_chmask(struct wcd9xxx_codec_dai_data *dai,
-					  bool up)
-{
-	int ret = 0;
-	struct wcd9xxx_ch *ch;
-
-	if (up) {
-		list_for_each_entry(ch, &dai->wcd9xxx_ch_list, list) {
-			ret = wcd9xxx_get_slave_port(ch->ch_num);
-			if (ret < 0) {
-				pr_err("%s: Invalid slave port ID: %d\n",
-				       __func__, ret);
-				ret = -EINVAL;
-			} else {
-				set_bit(ret, &dai->ch_mask);
-			}
-		}
-	} else {
-		ret = wait_event_timeout(dai->dai_wait, (dai->ch_mask == 0),
-					 msecs_to_jiffies(
-						     TAIKO_SLIM_CLOSE_TIMEOUT));
-		if (!ret) {
-			pr_err("%s: Slim close tx/rx wait timeout\n", __func__);
-			ret = -ETIMEDOUT;
-		} else {
-			ret = 0;
-		}
-	}
-	return ret;
-}
-
-static void taiko_codec_enable_int_port(struct wcd9xxx_codec_dai_data *dai,
-					  struct snd_soc_codec *codec)
-{
-	struct wcd9xxx_ch *ch;
-	int port_num = 0;
-	unsigned short reg = 0;
-	u8 val = 0;
-	if (!dai || !codec) {
-		pr_err("%s: Invalid params\n", __func__);
-		return;
-	}
-	list_for_each_entry(ch, &dai->wcd9xxx_ch_list, list) {
-		if (ch->port >= TAIKO_RX_PORT_START_NUMBER) {
-			port_num = ch->port - TAIKO_RX_PORT_START_NUMBER;
-			reg = TAIKO_SLIM_PGD_PORT_INT_EN0 + (port_num / 8);
-			val = wcd9xxx_interface_reg_read(codec->control_data,
-				reg);
-			if (!(val & (1 << (port_num % 8)))) {
-				val |= (1 << (port_num % 8));
-				wcd9xxx_interface_reg_write(
-					codec->control_data, reg, val);
-				val = wcd9xxx_interface_reg_read(
-					codec->control_data, reg);
-			}
-		} else {
-			port_num = ch->port;
-			reg = TAIKO_SLIM_PGD_PORT_INT_TX_EN0 + (port_num / 8);
-			val = wcd9xxx_interface_reg_read(codec->control_data,
-				reg);
-			if (!(val & (1 << (port_num % 8)))) {
-				val |= (1 << (port_num % 8));
-				wcd9xxx_interface_reg_write(codec->control_data,
-					reg, val);
-				val = wcd9xxx_interface_reg_read(
-					codec->control_data, reg);
-			}
-		}
-	}
-}
-
-static int taiko_codec_enable_slimrx(struct snd_soc_dapm_widget *w,
-				     struct snd_kcontrol *kcontrol,
-				     int event)
-{
-	struct wcd9xxx *core;
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	int ret = 0;
-	struct wcd9xxx_codec_dai_data *dai;
-
-	core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s: event called! codec name %s num_dai %d\n"
-		"stream name %s event %d\n",
-		__func__, w->codec->name, w->codec->num_dai, w->sname, event);
-
-	/* Execute the callback only if interface type is slimbus */
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-		return 0;
-
-	dai = &taiko_p->dai[w->shift];
-	pr_debug("%s: w->name %s w->shift %d event %d\n",
-		 __func__, w->name, w->shift, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		dai->bus_down_in_recovery = false;
-		taiko_codec_enable_int_port(dai, codec);
-		(void) taiko_codec_enable_slim_chmask(dai, true);
-#if defined(CONFIG_SND_SOC_ESXXX)
-		ret = remote_cfg_slim_rx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_cfg_slim_rx(w->shift);
-#endif
-		ret = wcd9xxx_cfg_slim_sch_rx(core, &dai->wcd9xxx_ch_list,
-					      dai->rate, dai->bit_width,
-					      &dai->grph);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-#if defined(CONFIG_SND_SOC_ESXXX)
-		ret = remote_close_slim_rx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_close_slim_rx(w->shift);
-#endif
-		ret = wcd9xxx_close_slim_sch_rx(core, &dai->wcd9xxx_ch_list,
-						dai->grph);
-		if (!dai->bus_down_in_recovery)
-			ret = taiko_codec_enable_slim_chmask(dai, false);
-
-		if (ret < 0) {
-			ret = wcd9xxx_disconnect_port(core,
-						      &dai->wcd9xxx_ch_list,
-						      dai->grph);
-			pr_debug("%s: Disconnect RX port, ret = %d\n",
-				 __func__, ret);
-		}
-		dai->bus_down_in_recovery = false;
-		break;
-	}
-	return ret;
-}
-
-static int taiko_codec_enable_slimvi_feedback(struct snd_soc_dapm_widget *w,
-				struct snd_kcontrol *kcontrol,
-				int event)
-{
-	struct wcd9xxx *core = NULL;
-	struct snd_soc_codec *codec = NULL;
-	struct taiko_priv *taiko_p = NULL;
-	u32 ret = 0;
-	struct wcd9xxx_codec_dai_data *dai = NULL;
-
-	if (!w || !w->codec) {
-		pr_err("%s invalid params\n", __func__);
-		return -EINVAL;
-	}
-	codec = w->codec;
-	taiko_p = snd_soc_codec_get_drvdata(codec);
-	core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s: event called! codec name %s num_dai %d stream name %s\n",
-		__func__, w->codec->name, w->codec->num_dai, w->sname);
-
-	/* Execute the callback only if interface type is slimbus */
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		pr_err("%s Interface is not correct", __func__);
-		return 0;
-	}
-
-	pr_debug("%s(): w->name %s event %d w->shift %d\n",
-		__func__, w->name, event, w->shift);
-	if (w->shift != AIF4_VIFEED) {
-		pr_err("%s Error in enabling the tx path\n", __func__);
-		ret = -EINVAL;
-		goto out_vi;
-	}
-	dai = &taiko_p->dai[w->shift];
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		/*Enable V&I sensing*/
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_PROT_EN,
-				0x88, 0x88);
-		/*Enable spkr VI clocks*/
-		snd_soc_update_bits(codec,
-		TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL, 0xC, 0xC);
-		taiko_codec_enable_int_port(dai, codec);
-		dai->bus_down_in_recovery = false;
-		(void) taiko_codec_enable_slim_chmask(dai, true);
-		ret = wcd9xxx_cfg_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-					dai->rate, dai->bit_width,
-					&dai->grph);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		ret = wcd9xxx_close_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-						dai->grph);
-		if (ret)
-			pr_err("%s error in close_slim_sch_tx %d\n",
-				__func__, ret);
-		ret = taiko_codec_enable_slim_chmask(dai, false);
-		if (ret < 0) {
-			ret = wcd9xxx_disconnect_port(core,
-						      &dai->wcd9xxx_ch_list,
-						      dai->grph);
-			pr_debug("%s: Disconnect RX port, ret = %d\n",
-				 __func__, ret);
-		}
-
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL,
-				0xC, 0x0);
-		/*Disable V&I sensing*/
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_PROT_EN,
-				0x88, 0x00);
-
-		dai->bus_down_in_recovery = false;
-		break;
-	}
-out_vi:
-	return ret;
-}
-
-static int taiko_codec_enable_slimtx(struct snd_soc_dapm_widget *w,
-				     struct snd_kcontrol *kcontrol,
-				     int event)
-{
-	struct wcd9xxx *core;
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-	u32  ret = 0;
-	struct wcd9xxx_codec_dai_data *dai;
-
-	core = dev_get_drvdata(codec->dev->parent);
-
-	pr_debug("%s: event called! codec name %s num_dai %d stream name %s\n",
-		__func__, w->codec->name, w->codec->num_dai, w->sname);
-
-	/* Execute the callback only if interface type is slimbus */
-	if (taiko_p->intf_type != WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-		return 0;
-
-	pr_debug("%s(): w->name %s event %d w->shift %d\n",
-		__func__, w->name, event, w->shift);
-
-	dai = &taiko_p->dai[w->shift];
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		taiko_codec_enable_int_port(dai, codec);
-		dai->bus_down_in_recovery = false;
-		(void) taiko_codec_enable_slim_chmask(dai, true);
-		ret = wcd9xxx_cfg_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-					      dai->rate, dai->bit_width,
-					      &dai->grph);
-#if defined(CONFIG_SND_SOC_ESXXX)
-			ret = remote_cfg_slim_tx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_cfg_slim_tx(w->shift);
-#endif
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-#if defined(CONFIG_SND_SOC_ESXXX)
-		ret = remote_close_slim_tx(w->shift);
-#elif defined(CONFIG_SND_SOC_ES325)
-		ret = es325_remote_close_slim_tx(w->shift);
-#endif
-		ret = wcd9xxx_close_slim_sch_tx(core, &dai->wcd9xxx_ch_list,
-						dai->grph);
-		if (!dai->bus_down_in_recovery)
-			ret = taiko_codec_enable_slim_chmask(dai, false);
-
-		if (ret < 0) {
-			ret = wcd9xxx_disconnect_port(core,
-						      &dai->wcd9xxx_ch_list,
-						      dai->grph);
-			pr_debug("%s: Disconnect RX port, ret = %d\n",
-				 __func__, ret);
-		}
-
-		dai->bus_down_in_recovery = false;
-		break;
-	}
-	return ret;
-}
-
-static int taiko_codec_enable_ear_pa(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_EAR,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-
-		usleep_range(5000, 5000);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_EAR,
-						 WCD9XXX_CLSH_REQ_DISABLE,
-						 WCD9XXX_CLSH_EVENT_POST_PA);
-		usleep_range(5000, 5000);
-	}
-	return 0;
-}
-
-static int taiko_codec_ear_dac_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	struct taiko_priv *taiko_p = snd_soc_codec_get_drvdata(codec);
-
-	pr_debug("%s %s %d\n", __func__, w->name, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		wcd9xxx_clsh_fsm(codec, &taiko_p->clsh_d,
-						 WCD9XXX_CLSH_STATE_EAR,
-						 WCD9XXX_CLSH_REQ_ENABLE,
-						 WCD9XXX_CLSH_EVENT_PRE_DAC);
-		break;
-	}
-
-	return 0;
-}
-
-static int taiko_codec_dsm_mux_event(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	u8 reg_val, zoh_mux_val = 0x00;
-
-	pr_debug("%s: event = %d\n", __func__, event);
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		reg_val = snd_soc_read(codec, TAIKO_A_CDC_CONN_CLSH_CTL);
-
-		if ((reg_val & 0x30) == 0x10)
-			zoh_mux_val = 0x04;
-		else if ((reg_val & 0x30) == 0x20)
-			zoh_mux_val = 0x08;
-
-		if (zoh_mux_val != 0x00)
-			snd_soc_update_bits(codec,
-					TAIKO_A_CDC_CONN_CLSH_CTL,
-					0x0C, zoh_mux_val);
-		break;
-
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_CDC_CONN_CLSH_CTL,
-							0x0C, 0x00);
-		break;
-	}
-	return 0;
-}
-
-static int taiko_codec_enable_anc_ear(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int ret = 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
-		ret = taiko_codec_enable_anc(w, kcontrol, event);
-		msleep(50);
-		snd_soc_update_bits(codec, TAIKO_A_RX_EAR_EN, 0x10, 0x10);
-		break;
-	case SND_SOC_DAPM_POST_PMU:
-		ret = taiko_codec_enable_ear_pa(w, kcontrol, event);
-		break;
-	case SND_SOC_DAPM_PRE_PMD:
-		snd_soc_update_bits(codec, TAIKO_A_RX_EAR_EN, 0x10, 0x00);
-		msleep(40);
-		ret |= taiko_codec_enable_anc(w, kcontrol, event);
-		break;
-	case SND_SOC_DAPM_POST_PMD:
-		ret = taiko_codec_enable_ear_pa(w, kcontrol, event);
-		break;
-	}
-	return ret;
-}
-#if 0
-static int taiko_codec_set_iir_gain(struct snd_soc_dapm_widget *w,
-	struct snd_kcontrol *kcontrol, int event)
-{
-	struct snd_soc_codec *codec = w->codec;
-	int value = 0;
-
-	switch (event) {
-	case SND_SOC_DAPM_POST_PMU:
-		value = snd_soc_read(codec, TAIKO_A_CDC_IIR1_GAIN_B1_CTL);
-		snd_soc_write(codec, TAIKO_A_CDC_IIR1_GAIN_B1_CTL, value);
-		break;
-	default:
-		pr_info("%s: event = %d not expected\n", __func__, event);
-		break;
-	}
-	return 0;
-}
-#endif
-
-/* Todo: Have seperate dapm widgets for I2S and Slimbus.
- * Might Need to have callbacks registered only for slimbus
- */
-static const struct snd_soc_dapm_widget taiko_dapm_widgets[] = {
-	/*RX stuff */
-	SND_SOC_DAPM_OUTPUT("EAR"),
-
-	SND_SOC_DAPM_PGA_E("EAR PA", TAIKO_A_RX_EAR_EN, 4, 0, NULL, 0,
-			taiko_codec_enable_ear_pa, SND_SOC_DAPM_POST_PMU |
-			SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MIXER_E("DAC1", TAIKO_A_RX_EAR_EN, 6, 0, dac1_switch,
-		ARRAY_SIZE(dac1_switch), taiko_codec_ear_dac_event,
-		SND_SOC_DAPM_PRE_PMU),
-
-	SND_SOC_DAPM_AIF_IN_E("AIF1 PB", "AIF1 Playback", 0, SND_SOC_NOPM,
-				AIF1_PB, 0, taiko_codec_enable_slimrx,
-				SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_AIF_IN_E("AIF2 PB", "AIF2 Playback", 0, SND_SOC_NOPM,
-				AIF2_PB, 0, taiko_codec_enable_slimrx,
-				SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_AIF_IN_E("AIF3 PB", "AIF3 Playback", 0, SND_SOC_NOPM,
-				AIF3_PB, 0, taiko_codec_enable_slimrx,
-				SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX("SLIM RX1 MUX", SND_SOC_NOPM, TAIKO_RX1, 0,
-				&slim_rx_mux[TAIKO_RX1]),
-	SND_SOC_DAPM_MUX("SLIM RX2 MUX", SND_SOC_NOPM, TAIKO_RX2, 0,
-				&slim_rx_mux[TAIKO_RX2]),
-	SND_SOC_DAPM_MUX("SLIM RX3 MUX", SND_SOC_NOPM, TAIKO_RX3, 0,
-				&slim_rx_mux[TAIKO_RX3]),
-	SND_SOC_DAPM_MUX("SLIM RX4 MUX", SND_SOC_NOPM, TAIKO_RX4, 0,
-				&slim_rx_mux[TAIKO_RX4]),
-	SND_SOC_DAPM_MUX("SLIM RX5 MUX", SND_SOC_NOPM, TAIKO_RX5, 0,
-				&slim_rx_mux[TAIKO_RX5]),
-	SND_SOC_DAPM_MUX("SLIM RX6 MUX", SND_SOC_NOPM, TAIKO_RX6, 0,
-				&slim_rx_mux[TAIKO_RX6]),
-	SND_SOC_DAPM_MUX("SLIM RX7 MUX", SND_SOC_NOPM, TAIKO_RX7, 0,
-				&slim_rx_mux[TAIKO_RX7]),
-
-	SND_SOC_DAPM_MIXER("SLIM RX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX2", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX3", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX4", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX5", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX6", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("SLIM RX7", SND_SOC_NOPM, 0, 0, NULL, 0),
-
-	/* Headphone */
-	SND_SOC_DAPM_OUTPUT("HEADPHONE"),
-	SND_SOC_DAPM_PGA_E("HPHL", TAIKO_A_RX_HPH_CNP_EN, 5, 0, NULL, 0,
-		taiko_hph_pa_event, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MIXER_E("HPHL DAC", TAIKO_A_RX_HPH_L_DAC_CTL, 7, 0,
-		hphl_switch, ARRAY_SIZE(hphl_switch), taiko_hphl_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_PGA_E("HPHR", TAIKO_A_RX_HPH_CNP_EN, 4, 0, NULL, 0,
-		taiko_hph_pa_event, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU |	SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_DAC_E("HPHR DAC", NULL, TAIKO_A_RX_HPH_R_DAC_CTL, 7, 0,
-		taiko_hphr_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	/* Speaker */
-	SND_SOC_DAPM_OUTPUT("LINEOUT1"),
-	SND_SOC_DAPM_OUTPUT("LINEOUT2"),
-	SND_SOC_DAPM_OUTPUT("LINEOUT3"),
-	SND_SOC_DAPM_OUTPUT("LINEOUT4"),
-	SND_SOC_DAPM_OUTPUT("SPK_OUT"),
-
-	SND_SOC_DAPM_PGA_E("LINEOUT1 PA", TAIKO_A_RX_LINE_CNP_EN, 0, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("LINEOUT2 PA", TAIKO_A_RX_LINE_CNP_EN, 1, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("LINEOUT3 PA", TAIKO_A_RX_LINE_CNP_EN, 2, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("LINEOUT4 PA", TAIKO_A_RX_LINE_CNP_EN, 3, 0, NULL,
-			0, taiko_codec_enable_lineout, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_PGA_E("SPK PA", SND_SOC_NOPM, 0, 0 , NULL,
-			   0, taiko_codec_enable_spk_pa,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_DAC_E("LINEOUT1 DAC", NULL, TAIKO_A_RX_LINE_1_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_DAC_E("LINEOUT2 DAC", NULL, TAIKO_A_RX_LINE_2_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_DAC_E("LINEOUT3 DAC", NULL, TAIKO_A_RX_LINE_3_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_SWITCH("LINEOUT3 DAC GROUND", SND_SOC_NOPM, 0, 0,
-				&lineout3_ground_switch),
-	SND_SOC_DAPM_DAC_E("LINEOUT4 DAC", NULL, TAIKO_A_RX_LINE_4_DAC_CTL, 7, 0
-		, taiko_lineout_dac_event,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_SWITCH("LINEOUT4 DAC GROUND", SND_SOC_NOPM, 0, 0,
-				&lineout4_ground_switch),
-
-	SND_SOC_DAPM_DAC_E("SPK DAC", NULL, SND_SOC_NOPM, 0, 0,
-			   taiko_spk_dac_event,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("VDD_SPKDRV", SND_SOC_NOPM, 0, 0,
-			    taiko_codec_enable_vdd_spkr,
-			    SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MIXER("RX1 MIX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("RX2 MIX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("RX7 MIX1", SND_SOC_NOPM, 0, 0, NULL, 0),
-
-	SND_SOC_DAPM_MIXER_E("RX1 MIX2", TAIKO_A_CDC_CLK_RX_B1_CTL, 0, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX2 MIX2", TAIKO_A_CDC_CLK_RX_B1_CTL, 1, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-
-	SND_SOC_DAPM_MIXER_E("RX3 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 2, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX4 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 3, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX5 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 4, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX6 MIX1", TAIKO_A_CDC_CLK_RX_B1_CTL, 5, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_MIXER_E("RX7 MIX2", TAIKO_A_CDC_CLK_RX_B1_CTL, 6, 0, NULL,
-		0, taiko_codec_enable_interpolator, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMU),
-
-	SND_SOC_DAPM_MIXER("RX1 CHAIN", TAIKO_A_CDC_RX1_B6_CTL, 5, 0, NULL, 0),
-	SND_SOC_DAPM_MIXER("RX2 CHAIN", TAIKO_A_CDC_RX2_B6_CTL, 5, 0, NULL, 0),
-
-	SND_SOC_DAPM_MUX("RX1 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX1 INP3", SND_SOC_NOPM, 0, 0,
-		&rx_mix1_inp3_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx2_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx2_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX3 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx3_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX3 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx3_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX4 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx4_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX4 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx4_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX5 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx5_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX5 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx5_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX6 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx6_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX6 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx6_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX1 INP1", SND_SOC_NOPM, 0, 0,
-		&rx7_mix1_inp1_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX1 INP2", SND_SOC_NOPM, 0, 0,
-		&rx7_mix1_inp2_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX2 INP1", SND_SOC_NOPM, 0, 0,
-		&rx1_mix2_inp1_mux),
-	SND_SOC_DAPM_MUX("RX1 MIX2 INP2", SND_SOC_NOPM, 0, 0,
-		&rx1_mix2_inp2_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX2 INP1", SND_SOC_NOPM, 0, 0,
-		&rx2_mix2_inp1_mux),
-	SND_SOC_DAPM_MUX("RX2 MIX2 INP2", SND_SOC_NOPM, 0, 0,
-		&rx2_mix2_inp2_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX2 INP1", SND_SOC_NOPM, 0, 0,
-		&rx7_mix2_inp1_mux),
-	SND_SOC_DAPM_MUX("RX7 MIX2 INP2", SND_SOC_NOPM, 0, 0,
-		&rx7_mix2_inp2_mux),
-
-	SND_SOC_DAPM_MUX("RDAC5 MUX", SND_SOC_NOPM, 0, 0,
-		&rx_dac5_mux),
-	SND_SOC_DAPM_MUX("RDAC7 MUX", SND_SOC_NOPM, 0, 0,
-		&rx_dac7_mux),
-
-	SND_SOC_DAPM_MUX_E("CLASS_H_DSM MUX", SND_SOC_NOPM, 0, 0,
-		&class_h_dsm_mux, taiko_codec_dsm_mux_event,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("RX_BIAS", SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_rx_bias, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("CDC_I2S_RX_CONN", WCD9XXX_A_CDC_CLK_OTHR_CTL, 5, 0,
-			    NULL, 0),
-
-	/* TX */
-
-	SND_SOC_DAPM_SUPPLY("CDC_CONN", WCD9XXX_A_CDC_CLK_OTHR_CTL, 2, 0, NULL,
-		0),
-
-	SND_SOC_DAPM_SUPPLY("LDO_H", SND_SOC_NOPM, 7, 0,
-			    taiko_codec_enable_ldo_h,
-			    SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-	/*
-	 * DAPM 'LDO_H Standalone' is to be powered by mbhc driver after
-	 * acquring codec_resource lock.
-	 * So call __taiko_codec_enable_ldo_h instead and avoid deadlock.
-	 */
-	SND_SOC_DAPM_SUPPLY("LDO_H Standalone", SND_SOC_NOPM, 7, 0,
-			    __taiko_codec_enable_ldo_h,
-			    SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_SUPPLY("COMP0_CLK", SND_SOC_NOPM, 0, 0,
-		taiko_config_compander, SND_SOC_DAPM_PRE_PMU |
-			SND_SOC_DAPM_PRE_PMD),
-	SND_SOC_DAPM_SUPPLY("COMP1_CLK", SND_SOC_NOPM, 1, 0,
-		taiko_config_compander, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_PRE_PMD),
-	SND_SOC_DAPM_SUPPLY("COMP2_CLK", SND_SOC_NOPM, 2, 0,
-		taiko_config_compander, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_PRE_PMD),
-
-
-	SND_SOC_DAPM_INPUT("AMIC1"),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS1 External", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS1 Internal1", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS1 Internal2", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("Main Mic Bias", 0, 0, 0,
-				0, SND_SOC_DAPM_PRE_PMU |SND_SOC_DAPM_POST_PMU |
-				SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_INPUT("AMIC3"),
-
-	SND_SOC_DAPM_INPUT("AMIC4"),
-#if defined(CONFIG_LDO_SUBMIC_BIAS)
-	SND_SOC_DAPM_MICBIAS_E("Sub Mic Bias", 0, 0, 0,
-				0, SND_SOC_DAPM_PRE_PMU |SND_SOC_DAPM_POST_PMU |
-				SND_SOC_DAPM_POST_PMD),
-#endif
-
-	SND_SOC_DAPM_INPUT("AMIC5"),
-
-	SND_SOC_DAPM_INPUT("AMIC6"),
-
-	SND_SOC_DAPM_MUX_E("DEC1 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 0, 0,
-		&dec1_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC2 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 1, 0,
-		&dec2_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC3 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 2, 0,
-		&dec3_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC4 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 3, 0,
-		&dec4_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC5 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 4, 0,
-		&dec5_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC6 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 5, 0,
-		&dec6_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC7 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 6, 0,
-		&dec7_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC8 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B1_CTL, 7, 0,
-		&dec8_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC9 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL, 0, 0,
-		&dec9_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX_E("DEC10 MUX", TAIKO_A_CDC_CLK_TX_CLK_EN_B2_CTL, 1, 0,
-		&dec10_mux, taiko_codec_enable_dec,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_MUX("ANC1 MUX", SND_SOC_NOPM, 0, 0, &anc1_mux),
-	SND_SOC_DAPM_MUX("ANC2 MUX", SND_SOC_NOPM, 0, 0, &anc2_mux),
-
-	SND_SOC_DAPM_OUTPUT("ANC HEADPHONE"),
-	SND_SOC_DAPM_PGA_E("ANC HPHL", SND_SOC_NOPM, 5, 0, NULL, 0,
-		taiko_codec_enable_anc_hph,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_PRE_PMD |
-		SND_SOC_DAPM_POST_PMD | SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_PGA_E("ANC HPHR", SND_SOC_NOPM, 4, 0, NULL, 0,
-		taiko_codec_enable_anc_hph, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMD |
-		SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_OUTPUT("ANC EAR"),
-	SND_SOC_DAPM_PGA_E("ANC EAR PA", SND_SOC_NOPM, 0, 0, NULL, 0,
-		taiko_codec_enable_anc_ear,
-		SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_PRE_PMD |
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MUX("ANC1 FB MUX", SND_SOC_NOPM, 0, 0, &anc1_fb_mux),
-
-	SND_SOC_DAPM_INPUT("AMIC2"),
-	SND_SOC_DAPM_MICBIAS_E(DAPM_MICBIAS2_EXTERNAL_STANDALONE, SND_SOC_NOPM,
-			       7, 0, taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 External", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 Internal1", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU |
-			       SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 Internal2", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS2 Internal3", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E(DAPM_MICBIAS3_EXTERNAL_STANDALONE, SND_SOC_NOPM,
-			       7, 0, taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS3 External", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS3 Internal1", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU |
-			       SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS3 Internal2", SND_SOC_NOPM, 7, 0,
-			       taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU |
-			       SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("MIC BIAS4 External", SND_SOC_NOPM, 7,
-			       0, taiko_codec_enable_micbias,
-			       SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			       SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_MICBIAS_E("Ear Mic Bias", 0, 0, 0,
-				0, SND_SOC_DAPM_PRE_PMU |SND_SOC_DAPM_POST_PMU |
-				SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF1 CAP", "AIF1 Capture", 0, SND_SOC_NOPM,
-		AIF1_CAP, 0, taiko_codec_enable_slimtx,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF2 CAP", "AIF2 Capture", 0, SND_SOC_NOPM,
-		AIF2_CAP, 0, taiko_codec_enable_slimtx,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF3 CAP", "AIF3 Capture", 0, SND_SOC_NOPM,
-		AIF3_CAP, 0, taiko_codec_enable_slimtx,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_AIF_OUT_E("AIF4 VI", "VIfeed", 0, SND_SOC_NOPM,
-		AIF4_VIFEED, 0, taiko_codec_enable_slimvi_feedback,
-		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_AIF_OUT_E("AIF4 MAD", "AIF4 MAD TX", 0,
-			       SND_SOC_NOPM, 0, 0,
-			       taiko_codec_enable_mad, SND_SOC_DAPM_PRE_PMU),
-	SND_SOC_DAPM_SWITCH("MADONOFF", SND_SOC_NOPM, 0, 0,
-			    &aif4_mad_switch),
-	SND_SOC_DAPM_INPUT("MADINPUT"),
-
-	SND_SOC_DAPM_MIXER("AIF1_CAP Mixer", SND_SOC_NOPM, AIF1_CAP, 0,
-		aif_cap_mixer, ARRAY_SIZE(aif_cap_mixer)),
-
-	SND_SOC_DAPM_MIXER("AIF2_CAP Mixer", SND_SOC_NOPM, AIF2_CAP, 0,
-		aif_cap_mixer, ARRAY_SIZE(aif_cap_mixer)),
-
-	SND_SOC_DAPM_MIXER("AIF3_CAP Mixer", SND_SOC_NOPM, AIF3_CAP, 0,
-		aif_cap_mixer, ARRAY_SIZE(aif_cap_mixer)),
-
-	SND_SOC_DAPM_MUX("SLIM TX1 MUX", SND_SOC_NOPM, TAIKO_TX1, 0,
-		&sb_tx1_mux),
-	SND_SOC_DAPM_MUX("SLIM TX2 MUX", SND_SOC_NOPM, TAIKO_TX2, 0,
-		&sb_tx2_mux),
-	SND_SOC_DAPM_MUX("SLIM TX3 MUX", SND_SOC_NOPM, TAIKO_TX3, 0,
-		&sb_tx3_mux),
-	SND_SOC_DAPM_MUX("SLIM TX4 MUX", SND_SOC_NOPM, TAIKO_TX4, 0,
-		&sb_tx4_mux),
-	SND_SOC_DAPM_MUX("SLIM TX5 MUX", SND_SOC_NOPM, TAIKO_TX5, 0,
-		&sb_tx5_mux),
-	SND_SOC_DAPM_MUX("SLIM TX6 MUX", SND_SOC_NOPM, TAIKO_TX6, 0,
-		&sb_tx6_mux),
-	SND_SOC_DAPM_MUX("SLIM TX7 MUX", SND_SOC_NOPM, TAIKO_TX7, 0,
-		&sb_tx7_mux),
-	SND_SOC_DAPM_MUX("SLIM TX8 MUX", SND_SOC_NOPM, TAIKO_TX8, 0,
-		&sb_tx8_mux),
-	SND_SOC_DAPM_MUX("SLIM TX9 MUX", SND_SOC_NOPM, TAIKO_TX9, 0,
-		&sb_tx9_mux),
-	SND_SOC_DAPM_MUX("SLIM TX10 MUX", SND_SOC_NOPM, TAIKO_TX10, 0,
-		&sb_tx10_mux),
-
-	/* Digital Mic Inputs */
-	SND_SOC_DAPM_ADC_E("DMIC1", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC2", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC3", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC4", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("DMIC5", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("DMIC6", NULL, SND_SOC_NOPM, 0, 0,
-		taiko_codec_enable_dmic, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	/* Sidetone */
-	SND_SOC_DAPM_MUX("IIR1 INP1 MUX", SND_SOC_NOPM, 0, 0, &iir1_inp1_mux),
-	SND_SOC_DAPM_MIXER("IIR1", TAIKO_A_CDC_CLK_SD_CTL, 0, 0, NULL, 0),
-
-	SND_SOC_DAPM_MUX("IIR2 INP1 MUX", SND_SOC_NOPM, 0, 0, &iir2_inp1_mux),
-	SND_SOC_DAPM_MIXER("IIR2", TAIKO_A_CDC_CLK_SD_CTL, 1, 0, NULL, 0),
-
-	/* AUX PGA */
-	SND_SOC_DAPM_ADC_E("AUX_PGA_Left", NULL, TAIKO_A_RX_AUX_SW_CTL, 7, 0,
-		taiko_codec_enable_aux_pga, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	SND_SOC_DAPM_ADC_E("AUX_PGA_Right", NULL, TAIKO_A_RX_AUX_SW_CTL, 6, 0,
-		taiko_codec_enable_aux_pga, SND_SOC_DAPM_PRE_PMU |
-		SND_SOC_DAPM_POST_PMD),
-
-	/* Lineout, ear and HPH PA Mixers */
-
-	SND_SOC_DAPM_MIXER("EAR_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		ear_pa_mix, ARRAY_SIZE(ear_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("HPHL_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		hphl_pa_mix, ARRAY_SIZE(hphl_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("HPHR_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		hphr_pa_mix, ARRAY_SIZE(hphr_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT1_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout1_pa_mix, ARRAY_SIZE(lineout1_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT2_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout2_pa_mix, ARRAY_SIZE(lineout2_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT3_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout3_pa_mix, ARRAY_SIZE(lineout3_pa_mix)),
-
-	SND_SOC_DAPM_MIXER("LINEOUT4_PA_MIXER", SND_SOC_NOPM, 0, 0,
-		lineout4_pa_mix, ARRAY_SIZE(lineout4_pa_mix)),
-	SND_SOC_DAPM_SWITCH("VIONOFF", SND_SOC_NOPM, 0, 0,
-			    &aif4_vi_switch),
-	SND_SOC_DAPM_INPUT("VIINPUT"),
-
-};
-
-static irqreturn_t taiko_slimbus_irq(int irq, void *data)
-{
-	struct taiko_priv *priv = data;
-	struct snd_soc_codec *codec = priv->codec;
-	unsigned long status = 0;
-	int i, j, port_id, k;
-	u32 bit;
-	u8 val, int_val = 0;
-	bool tx, cleared;
-	unsigned short reg = 0;
-
-	for (i = TAIKO_SLIM_PGD_PORT_INT_STATUS_RX_0, j = 0;
-	     i <= TAIKO_SLIM_PGD_PORT_INT_STATUS_TX_1; i++, j++) {
-		val = wcd9xxx_interface_reg_read(codec->control_data, i);
-		status |= ((u32)val << (8 * j));
-	}
-
-	for_each_set_bit(j, &status, 32) {
-		tx = (j >= 16 ? true : false);
-		port_id = (tx ? j - 16 : j);
-		val = wcd9xxx_interface_reg_read(codec->control_data,
-					TAIKO_SLIM_PGD_PORT_INT_RX_SOURCE0 + j);
-		if (val & TAIKO_SLIM_IRQ_OVERFLOW)
-			pr_err_ratelimited(
-			   "%s: overflow error on %s port %d, value %x\n",
-			   __func__, (tx ? "TX" : "RX"), port_id, val);
-		if (val & TAIKO_SLIM_IRQ_UNDERFLOW)
-			pr_err_ratelimited(
-			   "%s: underflow error on %s port %d, value %x\n",
-			   __func__, (tx ? "TX" : "RX"), port_id, val);
-		if ((val & TAIKO_SLIM_IRQ_OVERFLOW) ||
-			(val & TAIKO_SLIM_IRQ_UNDERFLOW)) {
-			if (!tx)
-				reg = TAIKO_SLIM_PGD_PORT_INT_EN0 +
-					(port_id / 8);
-			else
-				reg = TAIKO_SLIM_PGD_PORT_INT_TX_EN0 +
-					(port_id / 8);
-			int_val = wcd9xxx_interface_reg_read(
-				codec->control_data, reg);
-			if (int_val & (1 << (port_id % 8))) {
-				int_val = int_val ^ (1 << (port_id % 8));
-				wcd9xxx_interface_reg_write(codec->control_data,
-					reg, int_val);
-			}
-		}
-		if (val & TAIKO_SLIM_IRQ_PORT_CLOSED) {
-			/*
-			 * INT SOURCE register starts from RX to TX
-			 * but port number in the ch_mask is in opposite way
-			 */
-			bit = (tx ? j - 16 : j + 16);
-			pr_debug("%s: %s port %d closed value %x, bit %u\n",
-				 __func__, (tx ? "TX" : "RX"), port_id, val,
-				 bit);
-			for (k = 0, cleared = false; k < NUM_CODEC_DAIS; k++) {
-				pr_debug("%s: priv->dai[%d].ch_mask = 0x%lx\n",
-					 __func__, k, priv->dai[k].ch_mask);
-				if (test_and_clear_bit(bit,
-						       &priv->dai[k].ch_mask)) {
-					cleared = true;
-					if (!priv->dai[k].ch_mask)
-						wake_up(&priv->dai[k].dai_wait);
-					/*
-					 * There are cases when multiple DAIs
-					 * might be using the same slimbus
-					 * channel. Hence don't break here.
-					 */
-				}
-			}
-			WARN(!cleared,
-			     "Couldn't find slimbus %s port %d for closing\n",
-			     (tx ? "TX" : "RX"), port_id);
-		}
-		wcd9xxx_interface_reg_write(codec->control_data,
-					    TAIKO_SLIM_PGD_PORT_INT_CLR_RX_0 +
-					    (j / 8),
-					    1 << (j % 8));
-	}
-
-	return IRQ_HANDLED;
-}
-
-static int taiko_handle_pdata(struct taiko_priv *taiko)
-{
-	struct snd_soc_codec *codec = taiko->codec;
-	struct wcd9xxx_pdata *pdata = taiko->resmgr.pdata;
-	int k1, k2, k3, rc = 0;
-	u8 leg_mode, txfe_bypass, txfe_buff, flag;
-	u8 i = 0, j = 0;
-	u8 val_txfe = 0, value = 0;
-	u8 dmic_sample_rate_value = 0;
-	u8 dmic_b1_ctl_value = 0, dmic_b2_ctl_value = 0;
-	u8 anc_ctl_value = 0;
-
-	if (!pdata) {
-		pr_err("%s: NULL pdata\n", __func__);
-		rc = -ENODEV;
-		goto done;
-	}
-
-	leg_mode = pdata->amic_settings.legacy_mode;
-	txfe_bypass = pdata->amic_settings.txfe_enable;
-	txfe_buff = pdata->amic_settings.txfe_buff;
-	flag = pdata->amic_settings.use_pdata;
-
-	/* Make sure settings are correct */
-	if ((pdata->micbias.ldoh_v > WCD9XXX_LDOH_3P0_V) ||
-	    (pdata->micbias.bias1_cfilt_sel > WCD9XXX_CFILT3_SEL) ||
-	    (pdata->micbias.bias2_cfilt_sel > WCD9XXX_CFILT3_SEL) ||
-	    (pdata->micbias.bias3_cfilt_sel > WCD9XXX_CFILT3_SEL) ||
-	    (pdata->micbias.bias4_cfilt_sel > WCD9XXX_CFILT3_SEL)) {
-		rc = -EINVAL;
-		goto done;
-	}
-	/* figure out k value */
-	k1 = wcd9xxx_resmgr_get_k_val(&taiko->resmgr, pdata->micbias.cfilt1_mv);
-	k2 = wcd9xxx_resmgr_get_k_val(&taiko->resmgr, pdata->micbias.cfilt2_mv);
-	k3 = wcd9xxx_resmgr_get_k_val(&taiko->resmgr, pdata->micbias.cfilt3_mv);
-
-	if (IS_ERR_VALUE(k1) || IS_ERR_VALUE(k2) || IS_ERR_VALUE(k3)) {
-		rc = -EINVAL;
-		goto done;
-	}
-	/* Set voltage level and always use LDO */
-	snd_soc_update_bits(codec, TAIKO_A_LDO_H_MODE_1, 0x0C,
-			    (pdata->micbias.ldoh_v << 2));
-
-	snd_soc_update_bits(codec, TAIKO_A_MICB_CFILT_1_VAL, 0xFC, (k1 << 2));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_CFILT_2_VAL, 0xFC, (k2 << 2));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_CFILT_3_VAL, 0xFC, (k3 << 2));
-
-	snd_soc_update_bits(codec, TAIKO_A_MICB_1_CTL, 0x60,
-			    (pdata->micbias.bias1_cfilt_sel << 5));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_2_CTL, 0x60,
-			    (pdata->micbias.bias2_cfilt_sel << 5));
-	snd_soc_update_bits(codec, TAIKO_A_MICB_3_CTL, 0x60,
-			    (pdata->micbias.bias3_cfilt_sel << 5));
-	snd_soc_update_bits(codec, taiko->resmgr.reg_addr->micb_4_ctl, 0x60,
-			    (pdata->micbias.bias4_cfilt_sel << 5));
-
-	for (i = 0; i < 6; j++, i += 2) {
-		if (flag & (0x01 << i)) {
-			value = (leg_mode & (0x01 << i)) ? 0x10 : 0x00;
-			val_txfe = (txfe_bypass & (0x01 << i)) ? 0x20 : 0x00;
-			val_txfe = val_txfe |
-				((txfe_buff & (0x01 << i)) ? 0x10 : 0x00);
-			snd_soc_update_bits(codec, TAIKO_A_TX_1_2_EN + j * 10,
-				0x10, value);
-			snd_soc_update_bits(codec,
-				TAIKO_A_TX_1_2_TEST_EN + j * 10,
-				0x30, val_txfe);
-		}
-		if (flag & (0x01 << (i + 1))) {
-			value = (leg_mode & (0x01 << (i + 1))) ? 0x01 : 0x00;
-			val_txfe = (txfe_bypass &
-					(0x01 << (i + 1))) ? 0x02 : 0x00;
-			val_txfe |= (txfe_buff &
-					(0x01 << (i + 1))) ? 0x01 : 0x00;
-			snd_soc_update_bits(codec, TAIKO_A_TX_1_2_EN + j * 10,
-				0x01, value);
-			snd_soc_update_bits(codec,
-				TAIKO_A_TX_1_2_TEST_EN + j * 10,
-				0x03, val_txfe);
-		}
-	}
-	if (flag & 0x40) {
-		value = (leg_mode & 0x40) ? 0x10 : 0x00;
-		value = value | ((txfe_bypass & 0x40) ? 0x02 : 0x00);
-		value = value | ((txfe_buff & 0x40) ? 0x01 : 0x00);
-		snd_soc_update_bits(codec, TAIKO_A_TX_7_MBHC_EN,
-			0x13, value);
-	}
-
-	if (pdata->ocp.use_pdata) {
-		/* not defined in CODEC specification */
-		if (pdata->ocp.hph_ocp_limit == 1 ||
-			pdata->ocp.hph_ocp_limit == 5) {
-			rc = -EINVAL;
-			goto done;
-		}
-		snd_soc_update_bits(codec, TAIKO_A_RX_COM_OCP_CTL,
-			0x0F, pdata->ocp.num_attempts);
-		snd_soc_write(codec, TAIKO_A_RX_COM_OCP_COUNT,
-			((pdata->ocp.run_time << 4) | pdata->ocp.wait_time));
-		snd_soc_update_bits(codec, TAIKO_A_RX_HPH_OCP_CTL,
-			0xE0, (pdata->ocp.hph_ocp_limit << 5));
-	}
-
-	for (i = 0; i < ARRAY_SIZE(pdata->regulator); i++) {
-		if (pdata->regulator[i].name &&
-		    !strncmp(pdata->regulator[i].name, "CDC_VDDA_RX", 11)) {
-			if (pdata->regulator[i].min_uV == 1800000 &&
-			    pdata->regulator[i].max_uV == 1800000) {
-				snd_soc_write(codec, TAIKO_A_BIAS_REF_CTL,
-					      0x1C);
-			} else if (pdata->regulator[i].min_uV == 2200000 &&
-				   pdata->regulator[i].max_uV == 2200000) {
-				snd_soc_write(codec, TAIKO_A_BIAS_REF_CTL,
-					      0x1E);
-			} else {
-				pr_err("%s: unsupported CDC_VDDA_RX voltage\n"
-				       "min %d, max %d\n", __func__,
-				       pdata->regulator[i].min_uV,
-				       pdata->regulator[i].max_uV);
-				rc = -EINVAL;
-			}
-			break;
-		}
-	}
-
-	/* Set micbias capless mode with tail current */
-	value = (pdata->micbias.bias1_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_1_CTL, 0x1E, value);
-	value = (pdata->micbias.bias2_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_2_CTL, 0x1E, value);
-	value = (pdata->micbias.bias3_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_3_CTL, 0x1E, value);
-	value = (pdata->micbias.bias4_cap_mode == MICBIAS_EXT_BYP_CAP ?
-		 0x00 : 0x16);
-	snd_soc_update_bits(codec, TAIKO_A_MICB_4_CTL, 0x1E, value);
-
-	/* Set the DMIC sample rate */
-	if (pdata->mclk_rate == TAIKO_MCLK_CLK_9P6MHZ) {
-		switch (pdata->dmic_sample_rate) {
-		case WCD9XXX_DMIC_SAMPLE_RATE_2P4MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_4;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_4;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_4;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_4P8MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_2;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_2;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_2;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_ON;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_3P2MHZ:
-		case WCD9XXX_DMIC_SAMPLE_RATE_UNDEFINED:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_3;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_3;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_3;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		default:
-			pr_err("%s Invalid sample rate %d for mclk %d\n",
-			__func__, pdata->dmic_sample_rate, pdata->mclk_rate);
-			rc = -EINVAL;
-			goto done;
-			break;
-		}
-	} else if (pdata->mclk_rate == TAIKO_MCLK_CLK_12P288MHZ) {
-		switch (pdata->dmic_sample_rate) {
-		case WCD9XXX_DMIC_SAMPLE_RATE_3P072MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_4;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_4;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_4;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_6P144MHZ:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_2;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_2;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_2;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_ON;
-			break;
-		case WCD9XXX_DMIC_SAMPLE_RATE_4P096MHZ:
-		case WCD9XXX_DMIC_SAMPLE_RATE_UNDEFINED:
-			dmic_sample_rate_value = WCD9XXX_DMIC_SAMPLE_RATE_DIV_3;
-			dmic_b1_ctl_value = WCD9XXX_DMIC_B1_CTL_DIV_3;
-			dmic_b2_ctl_value = WCD9XXX_DMIC_B2_CTL_DIV_3;
-			anc_ctl_value = WCD9XXX_ANC_DMIC_X2_OFF;
-			break;
-		default:
-			pr_err("%s Invalid sample rate %d for mclk %d\n",
-			__func__, pdata->dmic_sample_rate, pdata->mclk_rate);
-			rc = -EINVAL;
-			goto done;
-			break;
-		}
-	} else {
-		pr_err("%s MCLK is not set!\n", __func__);
-		rc = -EINVAL;
-		goto done;
-	}
-
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX1_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX2_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX3_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX4_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX5_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX6_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX7_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX8_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX9_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_TX10_DMIC_CTL,
-		0x7, dmic_sample_rate_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_DMIC_B1_CTL,
-		0xEE, dmic_b1_ctl_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_CLK_DMIC_B2_CTL,
-		0xE, dmic_b2_ctl_value);
-	snd_soc_update_bits(codec, TAIKO_A_CDC_ANC1_B2_CTL,
-		0x1, anc_ctl_value);
-
-done:
-	return rc;
-}
-
-static const struct wcd9xxx_reg_mask_val taiko_reg_defaults[] = {
-
-	/* set MCLk to 9.6 */
-	TAIKO_REG_VAL(TAIKO_A_CHIP_CTL, 0x02),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CLK_POWER_CTL, 0x03),
-
-	/* EAR PA deafults  */
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_CMBUFF, 0x05),
-
-	/* RX deafults */
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX1_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX2_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX3_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX4_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX5_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX6_B5_CTL, 0x78),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX7_B5_CTL, 0x78),
-
-	/* RX1 and RX2 defaults */
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX1_B6_CTL, 0xA0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX2_B6_CTL, 0xA0),
-
-	/* RX3 to RX7 defaults */
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX3_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX4_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX5_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX6_B6_CTL, 0x80),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX7_B6_CTL, 0x80),
-
-	/* MAD registers */
-	TAIKO_REG_VAL(TAIKO_A_MAD_ANA_CTRL, 0xF1),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_MAIN_CTL_1, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_MAIN_CTL_2, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_1, 0x00),
-	/* Set SAMPLE_TX_EN bit */
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_2, 0x03),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_3, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_4, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_5, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_6, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_7, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_CTL_8, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_IIR_CTL_PTR, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_MAD_AUDIO_IIR_CTL_VAL, 0x40),
-	TAIKO_REG_VAL(TAIKO_A_CDC_DEBUG_B7_CTL, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CLK_OTHR_RESET_B1_CTL, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CLK_OTHR_CTL, 0x00),
-	TAIKO_REG_VAL(TAIKO_A_CDC_CONN_MAD, 0x01),
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	/* Set HPH Path to low power mode */
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_BIAS_PA, 0x55),
-#endif
-	/* BUCK default */
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_CCL_4, 0x51),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_CCL_1, 0x5B),
-};
-
-static const struct wcd9xxx_reg_mask_val taiko_1_0_reg_defaults[] = {
-	/*
-	 * The following only need to be written for Taiko 1.0 parts.
-	 * Taiko 2.0 will have appropriate defaults for these registers.
-	 */
-
-	/* Required defaults for class H operation */
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CHOP_CTL, 0xF4),
-	TAIKO_REG_VAL(TAIKO_A_BIAS_CURR_CTL_2, 0x08),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_CCL_3, 0x60),
-
-	/* Choose max non-overlap time for NCP */
-	TAIKO_REG_VAL(TAIKO_A_NCP_CLK, 0xFC),
-	/* Use 25mV/50mV for deltap/m to reduce ripple */
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_VCL_1, 0x08),
-	/*
-	 * Set DISABLE_MODE_SEL<1:0> to 0b10 (disable PWM in auto mode).
-	 * Note that the other bits of this register will be changed during
-	 * Rx PA bring up.
-	 */
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_MODE_3, 0xCE),
-	/*Reduce EAR DAC bias to 70% */
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_BIAS_PA, 0x76),
-	/* Reduce LINE DAC bias to 70% */
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x78),
-#else
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x7A),
-	/* Reduce HPH DAC bias to 70% */
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_BIAS_PA, 0x7A),
-#endif
-
-	/*
-	 * There is a diode to pull down the micbias while doing
-	 * insertion detection.  This diode can cause leakage.
-	 * Set bit 0 to 1 to prevent leakage.
-	 * Setting this bit of micbias 2 prevents leakage for all other micbias.
-	 */
-	TAIKO_REG_VAL(TAIKO_A_MICB_2_MBHC, 0x41),
-
-	/* Disable TX7 internal biasing path which can cause leakage */
-	TAIKO_REG_VAL(TAIKO_A_TX_SUP_SWITCH_CTRL_1, 0xBF),
-	/* Enable MICB 4 VDDIO switch to prevent leakage */
-	TAIKO_REG_VAL(TAIKO_A_MICB_4_MBHC, 0x81),
-
-	/* Close leakage on the spkdrv */
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_DBG_PWRSTG, 0x24),
-};
-
-/*
- * Don't update TAIKO_A_CHIP_CTL, TAIKO_A_BUCK_CTRL_CCL_1 and
- * TAIKO_A_RX_EAR_CMBUFF as those are updated in taiko_reg_defaults
- */
-static const struct wcd9xxx_reg_mask_val taiko_2_0_reg_defaults[] = {
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_1_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_2_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_1_2_ADC_IB, 0x44),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_3_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_4_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_3_4_ADC_IB, 0x44),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_5_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_6_GAIN, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX_5_6_ADC_IB, 0x44),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_MODE_3, 0xCE),
-	TAIKO_REG_VAL(WCD9XXX_A_BUCK_CTRL_VCL_1, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_BUCK_CTRL_CCL_4, 0x51),
-	TAIKO_REG_VAL(TAIKO_A_NCP_DTEST, 0x10),
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CHOP_CTL, 0xA4),
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_OCP_CTL, 0x6B),
-#else
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_BIAS_PA, 0x7A),
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_OCP_CTL, 0x6B),
-#endif
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CNP_WG_CTL, 0xDA),
-	TAIKO_REG_VAL(TAIKO_A_RX_HPH_CNP_WG_TIME, 0x15),
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_BIAS_PA, 0x76),
-	TAIKO_REG_VAL(TAIKO_A_RX_EAR_CNP, 0xC0),
-#if !defined(CONFIG_MACH_VIENNA_LTE) && !defined(CONFIG_MACH_LT03_LTE) && !defined(CONFIG_MACH_PICASSO_LTE) && !defined(CONFIG_SEC_H_PROJECT) && !defined(CONFIG_SEC_FRESCO_PROJECT) && !defined(CONFIG_MACH_KS01EUR)
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x78),
-#else
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_BIAS_PA, 0x7A),
-#endif
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_1_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_2_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_3_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_RX_LINE_4_TEST, 0x2),
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_OCP_CTL, 0x97),
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_CLIP_DET, 0x1),
-	TAIKO_REG_VAL(TAIKO_A_SPKR_DRV_IEC, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX1_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX2_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX3_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX4_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX5_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX6_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX7_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX8_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX9_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_TX10_MUX_CTL, 0x48),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX1_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX2_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX3_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX4_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX5_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX6_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_RX7_B4_CTL, 0x8),
-	TAIKO_REG_VAL(TAIKO_A_CDC_VBAT_GAIN_UPD_MON, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B1_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B2_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B3_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_PA_RAMP_B4_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_SPKR_CLIPDET_B1_CTL, 0x0),
-	TAIKO_REG_VAL(TAIKO_A_CDC_COMP0_B4_CTL, 0x37),
-	TAIKO_REG_VAL(TAIKO_A_CDC_COMP0_B5_CTL, 0x7f),
-	TAIKO_REG_VAL(TAIKO_A_CDC_COMP0_B5_CTL, 0x7f),
-};
-
-static void taiko_update_reg_defaults(struct snd_soc_codec *codec)
-{
-	u32 i;
-	struct wcd9xxx *taiko_core = dev_get_drvdata(codec->dev->parent);
-
-	for (i = 0; i < ARRAY_SIZE(taiko_reg_defaults); i++)
-		snd_soc_write(codec, taiko_reg_defaults[i].reg,
-			      taiko_reg_defaults[i].val);
-
-	if (TAIKO_IS_1_0(taiko_core->version)) {
-		for (i = 0; i < ARRAY_SIZE(taiko_1_0_reg_defaults); i++)
-			snd_soc_write(codec, taiko_1_0_reg_defaults[i].reg,
-				      taiko_1_0_reg_defaults[i].val);
-		if (spkr_drv_wrnd == 1)
-			snd_soc_write(codec, TAIKO_A_SPKR_DRV_EN, 0xEF);
-	} else {
-		for (i = 0; i < ARRAY_SIZE(taiko_2_0_reg_defaults); i++)
-			snd_soc_write(codec, taiko_2_0_reg_defaults[i].reg,
-				      taiko_2_0_reg_defaults[i].val);
-		spkr_drv_wrnd = -1;
-	}
-}
-
-static const struct wcd9xxx_reg_mask_val taiko_codec_reg_init_val[] = {
-	/* Initialize current threshold to 350MA
-	 * number of wait and run cycles to 4096
-	 */
-	{TAIKO_A_RX_HPH_OCP_CTL, 0xE1, 0x61},
-	{TAIKO_A_RX_COM_OCP_COUNT, 0xFF, 0xFF},
-	{TAIKO_A_RX_HPH_L_TEST, 0x01, 0x01},
-	{TAIKO_A_RX_HPH_R_TEST, 0x01, 0x01},
-
-	/* Initialize gain registers to use register gain */
-	{TAIKO_A_RX_HPH_L_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_HPH_R_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_1_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_2_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_3_GAIN, 0x20, 0x20},
-	{TAIKO_A_RX_LINE_4_GAIN, 0x20, 0x20},
-	{TAIKO_A_SPKR_DRV_GAIN, 0x04, 0x04},
-
-	/* Use 16 bit sample size for TX1 to TX6 */
-	{TAIKO_A_CDC_CONN_TX_SB_B1_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B2_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B3_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B4_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B5_CTL, 0x30, 0x20},
-	{TAIKO_A_CDC_CONN_TX_SB_B6_CTL, 0x30, 0x20},
-
-	/* Use 16 bit sample size for TX7 to TX10 */
-	{TAIKO_A_CDC_CONN_TX_SB_B7_CTL, 0x60, 0x40},
-	{TAIKO_A_CDC_CONN_TX_SB_B8_CTL, 0x60, 0x40},
-	{TAIKO_A_CDC_CONN_TX_SB_B9_CTL, 0x60, 0x40},
-	{TAIKO_A_CDC_CONN_TX_SB_B10_CTL, 0x60, 0x40},
-
-	/*enable HPF filter for TX paths */
-	{TAIKO_A_CDC_TX1_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX2_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX3_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX4_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX5_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX6_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX7_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX8_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX9_MUX_CTL, 0x8, 0x0},
-	{TAIKO_A_CDC_TX10_MUX_CTL, 0x8, 0x0},
-
-	/* Compander zone selection */
-	{TAIKO_A_CDC_COMP0_B4_CTL, 0x3F, 0x37},
-	{TAIKO_A_CDC_COMP1_B4_CTL, 0x3F, 0x37},
-	{TAIKO_A_CDC_COMP2_B4_CTL, 0x3F, 0x37},
-	{TAIKO_A_CDC_COMP0_B5_CTL, 0x7F, 0x7F},
-	{TAIKO_A_CDC_COMP1_B5_CTL, 0x7F, 0x7F},
-	{TAIKO_A_CDC_COMP2_B5_CTL, 0x7F, 0x7F},
-
-	/*
-	 * Setup wavegen timer to 20msec and disable chopper
-	 * as default. This corresponds to Compander OFF
-	 */
-	{TAIKO_A_RX_HPH_CNP_WG_CTL, 0xFF, 0xDB},
-	{TAIKO_A_RX_HPH_CNP_WG_TIME, 0xFF, 0x58},
-	{TAIKO_A_RX_HPH_BIAS_WG_OCP, 0xFF, 0x1A},
-	{TAIKO_A_RX_HPH_CHOP_CTL, 0xFF, 0x24},
-
-	/* Choose max non-overlap time for NCP */
-	{TAIKO_A_NCP_CLK, 0xFF, 0xFC},
-
-	/* Program the 0.85 volt VBG_REFERENCE */
-	{TAIKO_A_BIAS_CURR_CTL_2, 0xFF, 0x04},
-
-	/* set MAD input MIC to DMIC1 */
-	{TAIKO_A_CDC_CONN_MAD, 0x0F, 0x08},
-
-};
-
-static void taiko_codec_init_reg(struct snd_soc_codec *codec)
-{
-	u32 i;
-
-	for (i = 0; i < ARRAY_SIZE(taiko_codec_reg_init_val); i++)
-		snd_soc_update_bits(codec, taiko_codec_reg_init_val[i].reg,
-				taiko_codec_reg_init_val[i].mask,
-				taiko_codec_reg_init_val[i].val);
-}
-
-static void taiko_slim_interface_init_reg(struct snd_soc_codec *codec)
-{
-	int i;
-
-	for (i = 0; i < WCD9XXX_SLIM_NUM_PORT_REG; i++)
-		wcd9xxx_interface_reg_write(codec->control_data,
-					    TAIKO_SLIM_PGD_PORT_INT_EN0 + i,
-					    0xFF);
-}
-
-static int taiko_setup_irqs(struct taiko_priv *taiko)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec = taiko->codec;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-	struct wcd9xxx_core_resource *core_res =
-				&wcd9xxx->core_res;
-
-	ret = wcd9xxx_request_irq(core_res, WCD9XXX_IRQ_SLIMBUS,
-				  taiko_slimbus_irq, "SLIMBUS Slave", taiko);
-	if (ret)
-		pr_err("%s: Failed to request irq %d\n", __func__,
-		       WCD9XXX_IRQ_SLIMBUS);
-	else
-		taiko_slim_interface_init_reg(codec);
-
-	return ret;
-}
-
-static void taiko_cleanup_irqs(struct taiko_priv *taiko)
-{
-	struct snd_soc_codec *codec = taiko->codec;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-	struct wcd9xxx_core_resource *core_res =
-				&wcd9xxx->core_res;
-
-	wcd9xxx_free_irq(core_res, WCD9XXX_IRQ_SLIMBUS, taiko);
-}
-static
-struct firmware_cal *taiko_get_hwdep_fw_cal(struct snd_soc_codec *codec,
-			enum wcd_cal_type type)
-{
-	struct taiko_priv *taiko;
-	struct firmware_cal *hwdep_cal;
-
-	if (!codec) {
-		pr_err("%s: NULL codec pointer\n", __func__);
-		return NULL;
-	}
-	taiko = snd_soc_codec_get_drvdata(codec);
-	hwdep_cal = wcdcal_get_fw_cal(taiko->fw_data, type);
-	if (!hwdep_cal) {
-		dev_err(codec->dev, "%s: cal not sent by %d\n",
-				 __func__, type);
-		return NULL;
-	}
-
-	return hwdep_cal;
-}
-
-int taiko_hs_detect(struct snd_soc_codec *codec,
-		    struct wcd9xxx_mbhc_config *mbhc_cfg)
-{
-	int rc;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	rc = wcd9xxx_mbhc_start(&taiko->mbhc, mbhc_cfg);
-	if (!rc)
-		taiko->mbhc_started = true;
-	return rc;
-}
-EXPORT_SYMBOL(taiko_hs_detect);
-
-void taiko_hs_detect_exit(struct snd_soc_codec *codec)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	wcd9xxx_mbhc_stop(&taiko->mbhc);
-	taiko->mbhc_started = false;
-}
-EXPORT_SYMBOL(taiko_hs_detect_exit);
-
-void taiko_event_register(
-	int (*machine_event_cb)(struct snd_soc_codec *codec,
-				enum wcd9xxx_codec_event),
-	struct snd_soc_codec *codec)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	taiko->machine_codec_event_cb = machine_event_cb;
-}
-EXPORT_SYMBOL(taiko_event_register);
-
-static void taiko_init_slim_slave_cfg(struct snd_soc_codec *codec)
-{
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-	struct afe_param_cdc_slimbus_slave_cfg *cfg;
-	struct wcd9xxx *wcd9xxx = codec->control_data;
-	uint64_t eaddr = 0;
-
-	cfg = &priv->slimbus_slave_cfg;
-	cfg->minor_version = 1;
-	cfg->tx_slave_port_offset = 0;
-	cfg->rx_slave_port_offset = 16;
-
-	memcpy(&eaddr, &wcd9xxx->slim->e_addr, sizeof(wcd9xxx->slim->e_addr));
-	WARN_ON(sizeof(wcd9xxx->slim->e_addr) != 6);
-	cfg->device_enum_addr_lsw = eaddr & 0xFFFFFFFF;
-	cfg->device_enum_addr_msw = eaddr >> 32;
-
-	pr_debug("%s: slimbus logical address 0x%llx\n", __func__, eaddr);
-}
-
-static int taiko_device_down(struct wcd9xxx *wcd9xxx)
-{
-	struct snd_soc_codec *codec;
-
-	codec = (struct snd_soc_codec *)(wcd9xxx->ssr_priv);
-	snd_soc_card_change_online_state(codec->card, 0);
-
-	return 0;
-}
-
-static int wcd9xxx_prepare_static_pa(struct wcd9xxx_mbhc *mbhc,
-				     struct list_head *lh)
-{
-	int i;
-	struct snd_soc_codec *codec = mbhc->codec;
-
-	const struct wcd9xxx_reg_mask_val reg_set_paon[] = {
-		{WCD9XXX_A_RX_HPH_OCP_CTL, 0x18, 0x00},
-		{WCD9XXX_A_RX_HPH_L_TEST, 0x1, 0x0},
-		{WCD9XXX_A_RX_HPH_R_TEST, 0x1, 0x0},
-		{WCD9XXX_A_RX_HPH_BIAS_WG_OCP, 0xff, 0x1A},
-		{WCD9XXX_A_RX_HPH_CNP_WG_CTL, 0xff, 0xDB},
-		{WCD9XXX_A_RX_HPH_CNP_WG_TIME, 0xff, 0x15},
-		{WCD9XXX_A_CDC_RX1_B6_CTL, 0xff, 0x81},
-		{WCD9XXX_A_CDC_CLK_RX_B1_CTL, 0x01, 0x01},
-		{WCD9XXX_A_RX_HPH_CHOP_CTL, 0xff, 0xA4},
-		{WCD9XXX_A_RX_HPH_L_GAIN, 0xff, 0x2C},
-		{WCD9XXX_A_CDC_RX2_B6_CTL, 0xff, 0x81},
-		{WCD9XXX_A_CDC_CLK_RX_B1_CTL, 0x02, 0x02},
-		{WCD9XXX_A_RX_HPH_R_GAIN, 0xff, 0x2C},
-		{WCD9XXX_A_NCP_CLK, 0xff, 0xFC},
-		{WCD9XXX_A_BUCK_CTRL_CCL_3, 0xff, 0x60},
-		{WCD9XXX_A_RX_COM_BIAS, 0xff, 0x80},
-		{WCD9XXX_A_BUCK_MODE_3, 0xff, 0xC6},
-		{WCD9XXX_A_BUCK_MODE_4, 0xff, 0xE6},
-		{WCD9XXX_A_BUCK_MODE_5, 0xff, 0x02},
-		{WCD9XXX_A_BUCK_MODE_1, 0xff, 0xA1},
-		{WCD9XXX_A_NCP_EN, 0xff, 0xFF},
-		{WCD9XXX_A_BUCK_MODE_5, 0xff, 0x7B},
-		{WCD9XXX_A_CDC_CLSH_B1_CTL, 0xff, 0xE6},
-		{WCD9XXX_A_RX_HPH_L_DAC_CTL, 0xff, 0xC0},
-		{WCD9XXX_A_RX_HPH_R_DAC_CTL, 0xff, 0xC0},
-	};
-
-	for (i = 0; i < ARRAY_SIZE(reg_set_paon); i++)
-		wcd9xxx_soc_update_bits_push(codec, lh,
-					     reg_set_paon[i].reg,
-					     reg_set_paon[i].mask,
-					     reg_set_paon[i].val, 0);
-	pr_debug("%s: PAs are prepared\n", __func__);
-
-	return 0;
-}
-
-static int wcd9xxx_enable_static_pa(struct wcd9xxx_mbhc *mbhc, bool enable)
-{
-	struct snd_soc_codec *codec = mbhc->codec;
-	const int wg_time = snd_soc_read(codec, WCD9XXX_A_RX_HPH_CNP_WG_TIME) *
-			    TAIKO_WG_TIME_FACTOR_US;
-
-	snd_soc_update_bits(codec, WCD9XXX_A_RX_HPH_CNP_EN, 0x30,
-			    enable ? 0x30 : 0x0);
-	/* Wait for wave gen time to avoid pop noise */
-	usleep_range(wg_time, wg_time + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-	pr_debug("%s: PAs are %s as static mode (wg_time %d)\n", __func__,
-		 enable ? "enabled" : "disabled", wg_time);
-	return 0;
-}
-
-static int taiko_setup_zdet(struct wcd9xxx_mbhc *mbhc,
-			    enum mbhc_impedance_detect_stages stage)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec = mbhc->codec;
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-	const int ramp_wait_us = 18 * 1000;
-
-#define __wr(reg, mask, value)						  \
-	do {								  \
-		ret = wcd9xxx_soc_update_bits_push(codec,		  \
-						   &taiko->reg_save_restore, \
-						   reg, mask, value, 0);  \
-		if (ret < 0)						  \
-			return ret;					  \
-	} while (0)
-
-	switch (stage) {
-
-	case PRE_MEAS:
-		INIT_LIST_HEAD(&taiko->reg_save_restore);
-		wcd9xxx_prepare_static_pa(mbhc, &taiko->reg_save_restore);
-		wcd9xxx_enable_static_pa(mbhc, true);
-
-		/*
-		 * save old value of registers and write the new value to
-		 * restore old value back, WCD9XXX_A_CDC_PA_RAMP_B{1,2,3,4}_CTL
-		 * registers don't need to be restored as those are solely used
-		 * by impedance detection.
-		 */
-		/* Phase 1 */
-		/* Reset the PA Ramp */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x1C);
-		/*
-		 * Connect the PA Ramp to PA chain and release reset with
-		 * keep it connected.
-		 */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x1F);
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x03);
-		/*
-		 * Program the PA Ramp to FS_48K, L shift 1 and sample
-		 * num to 24
-		 */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B3_CTL,
-			      0x3 << 4 | 0x6);
-		/* 0x56 for 10mv.  0xC0 is for 50mv */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B4_CTL, 0xC0);
-		/* Enable MBHC MUX, Set MUX current to 37.5uA and ADC7 */
-		__wr(WCD9XXX_A_MBHC_SCALING_MUX_1, 0xFF, 0xC0);
-		__wr(WCD9XXX_A_MBHC_SCALING_MUX_2, 0xFF, 0xF0);
-		__wr(WCD9XXX_A_TX_7_MBHC_TEST_CTL, 0xFF, 0x78);
-		__wr(WCD9XXX_A_TX_7_MBHC_EN, 0xFF, 0x8C);
-		/* Change NSA and NAVG */
-		__wr(WCD9XXX_A_CDC_MBHC_TIMER_B4_CTL, 0x4 << 4, 0x4 << 4);
-		__wr(WCD9XXX_A_CDC_MBHC_TIMER_B5_CTL, 0xFF, 0x10);
-		/* Reset MBHC and set it up for STA */
-		__wr(WCD9XXX_A_CDC_MBHC_CLK_CTL, 0xFF, 0x0A);
-		snd_soc_write(codec, WCD9XXX_A_CDC_MBHC_EN_CTL, 0x2);
-		__wr(WCD9XXX_A_CDC_MBHC_CLK_CTL, 0xFF, 0x02);
-
-		/* Set HPH_MBHC for zdet */
-		__wr(WCD9XXX_A_MBHC_HPH, 0xB3, 0x80);
-		break;
-	case POST_MEAS:
-		/* Phase 2 */
-		/* Start the PA ramp on HPH L and R */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x05);
-		/* Ramp generator takes ~17ms */
-		usleep_range(ramp_wait_us,
-				ramp_wait_us + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-
-		/* Disable Ical */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x00);
-		/* Ramp generator takes ~17ms */
-		usleep_range(ramp_wait_us,
-				ramp_wait_us + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-		break;
-	case PA_DISABLE:
-		/* Ramp HPH L & R back to Zero */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x0A);
-		/* Ramp generator takes ~17ms */
-		usleep_range(ramp_wait_us,
-				ramp_wait_us + WCD9XXX_USLEEP_RANGE_MARGIN_US);
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B2_CTL, 0x00);
-
-		/* Clean up starts */
-		/* Turn off PA ramp generator */
-		snd_soc_write(codec, WCD9XXX_A_CDC_PA_RAMP_B1_CTL, 0x0);
-		if (!mbhc->hph_pa_dac_state &&
-		    (!(test_bit(MBHC_EVENT_PA_HPHL, &mbhc->event_state) ||
-		       test_bit(MBHC_EVENT_PA_HPHR, &mbhc->event_state))))
-			wcd9xxx_enable_static_pa(mbhc, false);
-		wcd9xxx_restore_registers(codec, &taiko->reg_save_restore);
-		break;
-	}
-#undef __wr
-
-	return ret;
-}
-
-static void taiko_compute_impedance(s16 *l, s16 *r, uint32_t *zl, uint32_t *zr)
-{
-
-	int64_t rl, rr = 0; /* milliohm */
-	const int alphal = 364; /* 0.005555 * 65536 = 364.05 */
-	const int alphar = 364; /* 0.005555 * 65536 = 364.05 */
-	const int beta = 3855; /* 0.011765 * 5 * 65536 = 3855.15 */
-	const int rref = 11333; /* not scaled up */
-	const int shift = 16;
-
-	rl = (int)(l[0] - l[1]) * 1000 / (l[0] - l[2]);
-	rl = rl * rref * alphal;
-	rl = rl >> shift;
-	rl = rl * beta;
-	rl = rl >> shift;
-	*zl = rl;
-
-	rr = (int)(r[0] - r[1]) * 1000 / (r[0] - r[2]);
-	rr = rr * rref  * alphar;
-	rr = rr >> shift;
-	rr = rr * beta;
-	rr = rr >> shift;
-	*zr = rr;
-}
-
-static enum wcd9xxx_cdc_type taiko_get_cdc_type(void)
-{
-	return WCD9XXX_CDC_TYPE_TAIKO;
-}
-
-static const struct wcd9xxx_mbhc_cb mbhc_cb = {
-	.get_cdc_type = taiko_get_cdc_type,
-	.setup_zdet = taiko_setup_zdet,
-	.compute_impedance = taiko_compute_impedance,
-	.get_hwdep_fw_cal = taiko_get_hwdep_fw_cal,
-};
-
-static const struct wcd9xxx_mbhc_intr cdc_intr_ids = {
-	.poll_plug_rem = WCD9XXX_IRQ_MBHC_REMOVAL,
-	.shortavg_complete = WCD9XXX_IRQ_MBHC_SHORT_TERM,
-	.potential_button_press = WCD9XXX_IRQ_MBHC_PRESS,
-	.button_release = WCD9XXX_IRQ_MBHC_RELEASE,
-	.dce_est_complete = WCD9XXX_IRQ_MBHC_POTENTIAL,
-	.insertion = WCD9XXX_IRQ_MBHC_INSERTION,
-	.hph_left_ocp = WCD9XXX_IRQ_HPH_PA_OCPL_FAULT,
-	.hph_right_ocp = WCD9XXX_IRQ_HPH_PA_OCPR_FAULT,
-	.hs_jack_switch = WCD9320_IRQ_MBHC_JACK_SWITCH,
-};
-
-static int taiko_post_reset_cb(struct wcd9xxx *wcd9xxx)
-{
-	int ret = 0;
-	struct snd_soc_codec *codec;
-	struct taiko_priv *taiko;
-	int rco_clk_rate;
-	int count;
-
-	codec = (struct snd_soc_codec *)(wcd9xxx->ssr_priv);
-	taiko = snd_soc_codec_get_drvdata(codec);
-
-	snd_soc_card_change_online_state(codec->card, 1);
-
-	mutex_lock(&codec->mutex);
-
-        if (codec->reg_def_copy) {
-            pr_debug("%s: Update ASOC cache", __func__);
-            kfree(codec->reg_cache);
-            codec->reg_cache = kmemdup(codec->reg_def_copy,
-                                            codec->reg_size, GFP_KERNEL);
-            if (!codec->reg_cache) {
-                pr_err("%s: Cache update failed!\n", __func__);
-                mutex_unlock(&codec->mutex);
-                return -ENOMEM;
-            }
-        }
-
-	taiko_update_reg_defaults(codec);
-	if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_12P288MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x0);
-	else if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_9P6MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x2);
-	taiko_codec_init_reg(codec);
-
-	if (spkr_drv_wrnd == 1)
-		snd_soc_update_bits(codec, TAIKO_A_SPKR_DRV_EN, 0x80, 0x80);
-
-	codec->cache_sync = true;
-	snd_soc_cache_sync(codec);
-	codec->cache_sync = false;
-
-	ret = taiko_handle_pdata(taiko);
-	if (IS_ERR_VALUE(ret))
-		pr_err("%s: bad pdata\n", __func__);
-
-	taiko_init_slim_slave_cfg(codec);
-	taiko_slim_interface_init_reg(codec);
-
-	wcd9xxx_resmgr_post_ssr(&taiko->resmgr);
-
-	if (taiko->mbhc_started) {
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-		taiko->mbhc_started = false;
-
-		if (TAIKO_IS_1_0(wcd9xxx->version))
-			rco_clk_rate = TAIKO_MCLK_CLK_12P288MHZ;
-		else
-			rco_clk_rate = TAIKO_MCLK_CLK_9P6MHZ;
-
-		ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-					taiko_enable_mbhc_micbias,
-					&mbhc_cb, &cdc_intr_ids,
-					rco_clk_rate, false);
-		if (ret)
-			pr_err("%s: mbhc init failed %d\n", __func__, ret);
-		else
-			taiko_hs_detect(codec, taiko->mbhc.mbhc_cfg);
-	}
-	taiko->machine_codec_event_cb(codec, WCD9XXX_CODEC_EVENT_CODEC_UP);
-
-	taiko_cleanup_irqs(taiko);
-	ret = taiko_setup_irqs(taiko);
-	if (ret)
-		pr_err("%s: Failed to setup irq: %d\n", __func__, ret);
-
-	for (count = 0; count < NUM_CODEC_DAIS; count++)
-		taiko->dai[count].bus_down_in_recovery = true;
-
-	mutex_unlock(&codec->mutex);
-	return ret;
-}
-
-void *taiko_get_afe_config(struct snd_soc_codec *codec,
-			   enum afe_config_type config_type)
-{
-	struct taiko_priv *priv = snd_soc_codec_get_drvdata(codec);
-	struct wcd9xxx *taiko_core = dev_get_drvdata(codec->dev->parent);
-
-	switch (config_type) {
-	case AFE_SLIMBUS_SLAVE_CONFIG:
-		return &priv->slimbus_slave_cfg;
-	case AFE_CDC_REGISTERS_CONFIG:
-		return &taiko_audio_reg_cfg;
-	case AFE_SLIMBUS_SLAVE_PORT_CONFIG:
-		return &taiko_slimbus_slave_port_cfg;
-	case AFE_AANC_VERSION:
-		return &taiko_cdc_aanc_version;
-	case AFE_CLIP_BANK_SEL:
-		if (!TAIKO_IS_1_0(taiko_core->version))
-			return &clip_bank_sel;
-		else
-			return NULL;
-	case AFE_CDC_CLIP_REGISTERS_CONFIG:
-		if (!TAIKO_IS_1_0(taiko_core->version))
-			return &taiko_clip_reg_cfg;
-		else
-			return NULL;
-	default:
-		pr_err("%s: Unknown config_type 0x%x\n", __func__, config_type);
-		return NULL;
-	}
-}
-
-static struct wcd9xxx_reg_address taiko_reg_address = {
-	.micb_4_mbhc = TAIKO_A_MICB_4_MBHC,
-	.micb_4_int_rbias = TAIKO_A_MICB_4_INT_RBIAS,
-	.micb_4_ctl = TAIKO_A_MICB_4_CTL,
-};
-
-static int wcd9xxx_ssr_register(struct wcd9xxx *control,
-				int (*device_down_cb)(struct wcd9xxx *wcd9xxx),
-				int (*device_up_cb)(struct wcd9xxx *wcd9xxx),
-				void *priv)
-{
-	control->dev_down = device_down_cb;
-	control->post_reset = device_up_cb;
-	control->ssr_priv = priv;
-	return 0;
-}
-
-static const struct snd_soc_dapm_widget taiko_1_dapm_widgets[] = {
-	SND_SOC_DAPM_ADC_E("ADC1", NULL, TAIKO_A_TX_1_2_EN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC2", NULL, TAIKO_A_TX_1_2_EN, 3, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC3", NULL, TAIKO_A_TX_3_4_EN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC4", NULL, TAIKO_A_TX_3_4_EN, 3, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC5", NULL, TAIKO_A_TX_5_6_EN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_ADC_E("ADC6", NULL, TAIKO_A_TX_5_6_EN, 3, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-};
-
-static const struct snd_soc_dapm_widget taiko_2_dapm_widgets[] = {
-	SND_SOC_DAPM_ADC_E("ADC1", NULL, TAIKO_A_CDC_TX_1_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC2", NULL, TAIKO_A_CDC_TX_2_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU |
-			   SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC3", NULL, TAIKO_A_CDC_TX_3_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC4", NULL, TAIKO_A_CDC_TX_4_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMU |
-			   SND_SOC_DAPM_POST_PMD),
-	SND_SOC_DAPM_ADC_E("ADC5", NULL, TAIKO_A_CDC_TX_5_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-	SND_SOC_DAPM_ADC_E("ADC6", NULL, TAIKO_A_CDC_TX_6_GAIN, 7, 0,
-			   taiko_codec_enable_adc,
-			   SND_SOC_DAPM_POST_PMU),
-};
-
-static struct regulator *taiko_codec_find_regulator(struct snd_soc_codec *codec,
-						    const char *name)
-{
-	int i;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-
-	for (i = 0; i < core->num_of_supplies; i++) {
-		if (core->supplies[i].supply &&
-		    !strcmp(core->supplies[i].supply, name))
-			return core->supplies[i].consumer;
-	}
-
-	return NULL;
-}
-
-static int taiko_codec_probe(struct snd_soc_codec *codec)
-{
-	struct wcd9xxx *control;
-	struct taiko_priv *taiko;
-	struct wcd9xxx_pdata *pdata;
-	struct wcd9xxx *wcd9xxx;
-	struct snd_soc_dapm_context *dapm = &codec->dapm;
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-	extern unsigned int system_rev;
-#endif
-	int ret = 0;
-	int i, rco_clk_rate;
-	void *ptr = NULL;
-	struct wcd9xxx *core = dev_get_drvdata(codec->dev->parent);
-	struct wcd9xxx_core_resource *core_res;
-
-	codec->control_data = dev_get_drvdata(codec->dev->parent);
-	control = codec->control_data;
-
-	wcd9xxx_ssr_register(control, taiko_device_down,
-			     taiko_post_reset_cb, (void *)codec);
-
-	dev_info(codec->dev, "%s()\n", __func__);
-
-	taiko = kzalloc(sizeof(struct taiko_priv), GFP_KERNEL);
-	if (!taiko) {
-		dev_err(codec->dev, "Failed to allocate private data\n");
-		return -ENOMEM;
-	}
-	for (i = 0 ; i < NUM_DECIMATORS; i++) {
-		tx_hpf_work[i].taiko = taiko;
-		tx_hpf_work[i].decimator = i + 1;
-		INIT_DELAYED_WORK(&tx_hpf_work[i].dwork,
-			tx_hpf_corner_freq_callback);
-	}
-
-	snd_soc_codec_set_drvdata(codec, taiko);
-
-	/* codec resmgr module init */
-	wcd9xxx = codec->control_data;
-	core_res = &wcd9xxx->core_res;
-	pdata = dev_get_platdata(codec->dev->parent);
-	ret = wcd9xxx_resmgr_init(&taiko->resmgr, codec, core_res, pdata,
-				  &pdata->micbias, &taiko_reg_address,
-				  WCD9XXX_CDC_TYPE_TAIKO);
-	if (ret) {
-		pr_err("%s: wcd9xxx init failed %d\n", __func__, ret);
-		goto err_init;
-	}
-
-	taiko->clsh_d.buck_mv = taiko_codec_get_buck_mv(codec);
-	/* Taiko does not support dynamic switching of vdd_cp */
-	taiko->clsh_d.is_dynamic_vdd_cp = false;
-	wcd9xxx_clsh_init(&taiko->clsh_d, &taiko->resmgr);
-
-	if (TAIKO_IS_1_0(core->version))
-		rco_clk_rate = TAIKO_MCLK_CLK_12P288MHZ;
-	else
-		rco_clk_rate = TAIKO_MCLK_CLK_9P6MHZ;
-	taiko->fw_data = kzalloc(sizeof(*(taiko->fw_data)), GFP_KERNEL);
-	if (!taiko->fw_data) {
-		dev_err(codec->dev, "Failed to allocate fw_data\n");
-		goto err_nomem_slimch;
-	}
-	set_bit(WCD9XXX_ANC_CAL, taiko->fw_data->cal_bit);
-	set_bit(WCD9XXX_MAD_CAL, taiko->fw_data->cal_bit);
-	set_bit(WCD9XXX_MBHC_CAL, taiko->fw_data->cal_bit);
-
-	ret = wcd_cal_create_hwdep(taiko->fw_data,
-					WCD9XXX_CODEC_HWDEP_NODE, codec);
-	if (ret < 0) {
-		dev_err(codec->dev, "%s hwdep failed %d\n", __func__, ret);
-		goto err_init;
-	}
-
-#if defined(CONFIG_MACH_KLTE_KOR)
-	if (system_rev >= 13) {
-		/* init and start mbhc */
-		ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-					taiko_enable_mbhc_micbias,
-					&mbhc_cb, &cdc_intr_ids,
-					rco_clk_rate, false);
-		if (ret) {
-			pr_err("%s: mbhc init failed %d\n", __func__, ret);
-			goto err_init;
-		}
-	}
-#elif defined(CONFIG_MACH_KLTE_JPN)
-	if (system_rev >= 11) {
-		/* init and start mbhc */
-		ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-					taiko_enable_mbhc_micbias,
-					&mbhc_cb, &cdc_intr_ids,
-					rco_clk_rate, false);
-		if (ret) {
-			pr_err("%s: mbhc init failed %d\n", __func__, ret);
-			goto err_init;
-		}
-	}
-#else
-#if !defined(CONFIG_SAMSUNG_JACK) && !defined(CONFIG_MUIC_DET_JACK)
-	/* init and start mbhc */
-	ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-				taiko_enable_mbhc_micbias,
-				&mbhc_cb, &cdc_intr_ids,
-				rco_clk_rate, false);
-	if (ret) {
-		pr_err("%s: mbhc init failed %d\n", __func__, ret);
-		goto err_init;
-	}
-#elif defined(CONFIG_SEC_JACTIVE_PROJECT)
-/* init and start mbhc */
-	pr_info("taiko_codec_probe system_rev %d",system_rev);
-	if(system_rev < 3)
-	{
-        ret = wcd9xxx_mbhc_init(&taiko->mbhc, &taiko->resmgr, codec,
-                    taiko_enable_mbhc_micbias,
-                    &mbhc_cb, &cdc_intr_ids,
-                    rco_clk_rate, false);
-        if (ret) {
-            pr_err("%s: mbhc init failed %d\n", __func__, ret);
-            goto err_init;
-        }
-	}
-#endif
-#endif
-
-	taiko->codec = codec;
-	for (i = 0; i < COMPANDER_MAX; i++) {
-		taiko->comp_enabled[i] = 0;
-		taiko->comp_fs[i] = COMPANDER_FS_48KHZ;
-	}
-	taiko->intf_type = wcd9xxx_get_intf_type();
-	taiko->aux_pga_cnt = 0;
-	taiko->aux_l_gain = 0x1F;
-	taiko->aux_r_gain = 0x1F;
-	taiko->ldo_h_users = 0;
-	taiko->micb_2_users = 0;
-	taiko_update_reg_defaults(codec);
-	pr_debug("%s: MCLK Rate = %x\n", __func__, wcd9xxx->mclk_rate);
-	if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_12P288MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x0);
-	else if (wcd9xxx->mclk_rate == TAIKO_MCLK_CLK_9P6MHZ)
-		snd_soc_update_bits(codec, TAIKO_A_CHIP_CTL, 0x06, 0x2);
-	taiko_codec_init_reg(codec);
-	ret = taiko_handle_pdata(taiko);
-	if (IS_ERR_VALUE(ret)) {
-		pr_err("%s: bad pdata\n", __func__);
-		goto err_pdata;
-	}
-
-	taiko->spkdrv_reg = taiko_codec_find_regulator(codec,
-						       WCD9XXX_VDD_SPKDRV_NAME);
-
-	if (spkr_drv_wrnd > 0) {
-		WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-		wcd9xxx_resmgr_get_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-		WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-	}
-
-#if defined(CONFIG_SND_SOC_ESXXX)
-	remote_add_codec_controls(codec);
-#elif defined(CONFIG_SND_SOC_ES325)
-	es325_remote_add_codec_controls(codec);
-#endif
-
-	ptr = kmalloc((sizeof(taiko_rx_chs) +
-		       sizeof(taiko_tx_chs)), GFP_KERNEL);
-	if (!ptr) {
-		pr_err("%s: no mem for slim chan ctl data\n", __func__);
-		ret = -ENOMEM;
-		goto err_nomem_slimch;
-	}
-
-	if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_I2C) {
-		snd_soc_dapm_new_controls(dapm, taiko_dapm_i2s_widgets,
-			ARRAY_SIZE(taiko_dapm_i2s_widgets));
-		snd_soc_dapm_add_routes(dapm, audio_i2s_map,
-			ARRAY_SIZE(audio_i2s_map));
-		if (TAIKO_IS_1_0(core->version))
-			snd_soc_dapm_add_routes(dapm, audio_i2s_map_1_0,
-						ARRAY_SIZE(audio_i2s_map_1_0));
-		else
-			snd_soc_dapm_add_routes(dapm, audio_i2s_map_2_0,
-						ARRAY_SIZE(audio_i2s_map_2_0));
-		for (i = 0; i < ARRAY_SIZE(taiko_i2s_dai); i++)
-			INIT_LIST_HEAD(&taiko->dai[i].wcd9xxx_ch_list);
-	} else if (taiko->intf_type == WCD9XXX_INTERFACE_TYPE_SLIMBUS) {
-		for (i = 0; i < NUM_CODEC_DAIS; i++) {
-			INIT_LIST_HEAD(&taiko->dai[i].wcd9xxx_ch_list);
-			init_waitqueue_head(&taiko->dai[i].dai_wait);
-		}
-		taiko_slimbus_slave_port_cfg.slave_dev_intfdev_la =
-		    control->slim_slave->laddr;
-		taiko_slimbus_slave_port_cfg.slave_dev_pgd_la =
-		    control->slim->laddr;
-		taiko_slimbus_slave_port_cfg.slave_port_mapping[0] =
-		    TAIKO_MAD_SLIMBUS_TX_PORT;
-
-		taiko_init_slim_slave_cfg(codec);
-	}
-
-	if (TAIKO_IS_1_0(control->version)) {
-		snd_soc_dapm_new_controls(dapm, taiko_1_dapm_widgets,
-					  ARRAY_SIZE(taiko_1_dapm_widgets));
-		snd_soc_add_codec_controls(codec,
-			taiko_1_x_analog_gain_controls,
-			ARRAY_SIZE(taiko_1_x_analog_gain_controls));
-	} else {
-		snd_soc_dapm_new_controls(dapm, taiko_2_dapm_widgets,
-					  ARRAY_SIZE(taiko_2_dapm_widgets));
-		snd_soc_add_codec_controls(codec,
-			taiko_2_x_analog_gain_controls,
-			ARRAY_SIZE(taiko_2_x_analog_gain_controls));
-	}
-
-	snd_soc_add_codec_controls(codec, impedance_detect_controls,
-				   ARRAY_SIZE(impedance_detect_controls));
-
-	control->num_rx_port = TAIKO_RX_MAX;
-	control->rx_chs = ptr;
-	memcpy(control->rx_chs, taiko_rx_chs, sizeof(taiko_rx_chs));
-	control->num_tx_port = TAIKO_TX_MAX;
-	control->tx_chs = ptr + sizeof(taiko_rx_chs);
-	memcpy(control->tx_chs, taiko_tx_chs, sizeof(taiko_tx_chs));
-
-	snd_soc_dapm_sync(dapm);
-
-	ret = taiko_setup_irqs(taiko);
-	if (ret) {
-		pr_err("%s: taiko irq setup failed %d\n", __func__, ret);
-		goto err_irq;
-	}
-
-	atomic_set(&kp_taiko_priv, (unsigned long)taiko);
-	mutex_lock(&dapm->codec->mutex);
-	snd_soc_dapm_disable_pin(dapm, "ANC HPHL");
-	snd_soc_dapm_disable_pin(dapm, "ANC HPHR");
-	snd_soc_dapm_disable_pin(dapm, "ANC HEADPHONE");
-	snd_soc_dapm_disable_pin(dapm, "ANC EAR PA");
-	snd_soc_dapm_disable_pin(dapm, "ANC EAR");
-	mutex_unlock(&dapm->codec->mutex);
-	snd_soc_dapm_sync(dapm);
-
-	codec->ignore_pmdown_time = 1;
-	return ret;
-
-err_irq:
-	taiko_cleanup_irqs(taiko);
-err_pdata:
-	kfree(ptr);
-err_nomem_slimch:
-	kfree(taiko);
-err_init:
-	return ret;
-}
-static int taiko_codec_remove(struct snd_soc_codec *codec)
-{
-	struct taiko_priv *taiko = snd_soc_codec_get_drvdata(codec);
-#if defined(CONFIG_SEC_JACTIVE_PROJECT)
-	extern unsigned int system_rev;
-#endif
-	WCD9XXX_BG_CLK_LOCK(&taiko->resmgr);
-	atomic_set(&kp_taiko_priv, 0);
-
-	if (spkr_drv_wrnd > 0)
-		wcd9xxx_resmgr_put_bandgap(&taiko->resmgr,
-					   WCD9XXX_BANDGAP_AUDIO_MODE);
-	WCD9XXX_BG_CLK_UNLOCK(&taiko->resmgr);
-
-	taiko_cleanup_irqs(taiko);
-
-#if defined(CONFIG_MACH_KLTE_KOR)
-	if (system_rev >= 13) {
-		/* cleanup MBHC */
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-	}
-#elif defined(CONFIG_MACH_KLTE_JPN)
-	if (system_rev >= 11) {
-		/* cleanup MBHC */
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-	}
-#else
-#if !defined(CONFIG_SAMSUNG_JACK) && !defined(CONFIG_MUIC_DET_JACK)
-	/* cleanup MBHC */
-	wcd9xxx_mbhc_deinit(&taiko->mbhc);
-#elif defined(CONFIG_SEC_JACTIVE_PROJECT)
-	pr_info("taiko_codec_remove system_rev %d",system_rev);
-	if(system_rev < 3)
-	{
-		wcd9xxx_mbhc_deinit(&taiko->mbhc);
-	}
-#endif
-#endif
-	/* cleanup resmgr */
-	wcd9xxx_resmgr_deinit(&taiko->resmgr);
-
-	taiko->spkdrv_reg = NULL;
-
-	kfree(taiko->fw_data);
-	kfree(taiko);
-	return 0;
-}
-static struct snd_soc_codec_driver soc_codec_dev_taiko = {
-	.probe	= taiko_codec_probe,
-	.remove	= taiko_codec_remove,
-
-	.read = taiko_read,
-	.write = taiko_write,
-
-	.readable_register = taiko_readable,
-	.volatile_register = taiko_volatile,
-
-	.reg_cache_size = TAIKO_CACHE_SIZE,
-	.reg_cache_default = taiko_reset_reg_defaults,
-	.reg_word_size = 1,
-
-	.controls = taiko_snd_controls,
-	.num_controls = ARRAY_SIZE(taiko_snd_controls),
-	.dapm_widgets = taiko_dapm_widgets,
-	.num_dapm_widgets = ARRAY_SIZE(taiko_dapm_widgets),
-	.dapm_routes = audio_map,
-	.num_dapm_routes = ARRAY_SIZE(audio_map),
-};
-
-#ifdef CONFIG_PM
-static int taiko_suspend(struct device *dev)
-{
-	dev_dbg(dev, "%s: system suspend\n", __func__);
-	return 0;
-}
-
-static int taiko_resume(struct device *dev)
-{
-	struct platform_device *pdev = to_platform_device(dev);
-	struct taiko_priv *taiko = platform_get_drvdata(pdev);
-
-	if (!taiko) {
-		dev_err(dev, "%s: taiko private data is NULL\n", __func__);
-		return -EINVAL;
-	}
-	dev_dbg(dev, "%s: system resume\n", __func__);
-	/* Notify */
-	wcd9xxx_resmgr_notifier_call(&taiko->resmgr, WCD9XXX_EVENT_POST_RESUME);
-	return 0;
-}
-
-static const struct dev_pm_ops taiko_pm_ops = {
-	.suspend	= taiko_suspend,
-	.resume		= taiko_resume,
-};
-#endif
-
-static int __devinit taiko_probe(struct platform_device *pdev)
-{
-	int ret = 0;
-	if (wcd9xxx_get_intf_type() == WCD9XXX_INTERFACE_TYPE_SLIMBUS)
-		ret = snd_soc_register_codec(&pdev->dev, &soc_codec_dev_taiko,
-			taiko_dai, ARRAY_SIZE(taiko_dai));
-	else if (wcd9xxx_get_intf_type() == WCD9XXX_INTERFACE_TYPE_I2C)
-		ret = snd_soc_register_codec(&pdev->dev, &soc_codec_dev_taiko,
-			taiko_i2s_dai, ARRAY_SIZE(taiko_i2s_dai));
-	return ret;
-}
-static int __devexit taiko_remove(struct platform_device *pdev)
-{
-	snd_soc_unregister_codec(&pdev->dev);
-	return 0;
-}
-static struct platform_driver taiko_codec_driver = {
-	.probe = taiko_probe,
-	.remove = taiko_remove,
-	.driver = {
-		.name = "taiko_codec",
-		.owner = THIS_MODULE,
-#ifdef CONFIG_PM
-		.pm = &taiko_pm_ops,
-#endif
-	},
-};
-
-static int __init taiko_codec_init(void)
-{
-	return platform_driver_register(&taiko_codec_driver);
-}
-
-static void __exit taiko_codec_exit(void)
-{
-	platform_driver_unregister(&taiko_codec_driver);
-}
-
-module_init(taiko_codec_init);
-module_exit(taiko_codec_exit);
-
-MODULE_DESCRIPTION("Taiko codec driver");
-MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/codecs/wcd9320.o_shipped b/sound/soc/codecs/wcd9320.o_shipped
new file mode 100644
index 0000000000000000000000000000000000000000..1e892acac9e2971ba78f00d747b4797f56eda5e8
GIT binary patch
literal 161420
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

literal 0
HcmV?d00001

-- 
2.11.0

